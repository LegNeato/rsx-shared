var searchIndex = {};
searchIndex["adler32"] = {"doc":"A minimal implementation of Adler32 for Rust.","items":[[3,"RollingAdler32","adler32","A rolling version of the Adler32 hash, which can 'forget' past bytes.",null,null],[5,"adler32","","Consume a Read object and returns the Adler32 hash.",null,{"inputs":[{"name":"r"}],"output":{"generics":["u32"],"name":"result"}}],[11,"new","","Creates an empty Adler32 context (with hash 1).",0,{"inputs":[],"output":{"name":"rollingadler32"}}],[11,"from_value","","Creates an Adler32 context with the given initial value.",0,{"inputs":[{"name":"u32"}],"output":{"name":"rollingadler32"}}],[11,"from_buffer","","Convenience function initializing a context from the hash of a buffer.",0,null],[11,"hash","","Returns the current hash.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"remove","","Removes the given `byte` that was fed to the algorithm `size` bytes ago.",0,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"u8"}],"output":null}],[11,"update","","Feeds a new `byte` to the algorithm to update the hash.",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"update_buffer","","Feeds a vector of bytes to the algorithm to update the hash.",0,null]],"paths":[[3,"RollingAdler32"]]};
searchIndex["app_units"] = {"doc":"An Au is an \"App Unit\" and represents 1/60th of a CSS pixel. It was originally proposed in 2002 as a standard unit of measure in Gecko. See https://bugzilla.mozilla.org/show_bug.cgi?id=177805 for more info.","items":[[3,"Au","app_units","An App Unit, the fundamental unit of length in Servo. Usually 1/60th of a pixel (see AU_PER_PX)",null,null],[12,"0","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"au"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"au"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"au"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"au"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"au"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"au"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"au"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"au"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"au"}],"output":{"name":"ordering"}}],[11,"deserialize","","",0,{"inputs":[{"name":"d"}],"output":{"generics":["au"],"name":"result"}}],[11,"serialize","","",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"au"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"au"}}],[11,"is_zero","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"au"}],"output":{"name":"au"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"au"}],"output":{"name":"au"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"au"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"au"}],"output":{"name":"i32"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"au"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"au"}],"output":{"name":"au"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"au"}}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"au"}}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"au"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"au"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"new","","FIXME(pcwalton): Workaround for lack of cross crate inlining of newtype structs!",0,{"inputs":[{"name":"i32"}],"output":{"name":"au"}}],[11,"scale_by","","",0,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"au"}}],[11,"scale_by_trunc","","Scale, but truncate (useful for viewport-relative units)",0,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"au"}}],[11,"from_f64_au","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"self"}}],[11,"from_px","","",0,{"inputs":[{"name":"i32"}],"output":{"name":"au"}}],[11,"to_px","","Rounds this app unit down to the pixel towards zero and returns it.",0,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"ceil_to_px","","Ceil this app unit to the appropriate pixel boundary and return it.",0,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"to_nearest_px","","",0,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"to_nearest_pixel","","",0,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"to_f32_px","","",0,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"to_f64_px","","",0,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"from_f32_px","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"au"}}],[11,"from_f64_px","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"au"}}],[11,"abs","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[17,"MIN_AU","","",null,null],[17,"MAX_AU","","",null,null],[17,"AU_PER_PX","","The number of app units in a pixel.",null,null]],"paths":[[3,"Au"]]};
searchIndex["arrayvec"] = {"doc":"arrayvec provides the types `ArrayVec` and `ArrayString`:  array-backed vector and string types, which store their contents inline.","items":[[3,"ArrayString","arrayvec","A string with a fixed capacity.",null,null],[3,"CapacityError","","Error value indicating insufficient capacity",null,null],[3,"ArrayVec","","A vector with a fixed capacity.",null,null],[3,"IntoIter","","By-value iterator for `ArrayVec`.",null,null],[3,"Drain","","A draining iterator for `ArrayVec`.",null,null],[11,"default","","Return an empty `ArrayString`",0,{"inputs":[],"output":{"name":"arraystring"}}],[11,"new","","Create a new empty `ArrayString`.",0,{"inputs":[],"output":{"name":"arraystring"}}],[11,"from","","Create a new `ArrayString` from a `str`.",0,{"inputs":[{"name":"str"}],"output":{"generics":["capacityerror"],"name":"result"}}],[11,"from_byte_string","","Create a new `ArrayString` from a byte string literal.",0,{"inputs":[{"name":"a"}],"output":{"generics":["utf8error"],"name":"result"}}],[11,"capacity","","Return the capacity of the `ArrayString`.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_full","","Return if the `ArrayString` is completely filled.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Adds the given char to the end of the string.",0,{"inputs":[{"name":"self"},{"name":"char"}],"output":null}],[11,"try_push","","Adds the given char to the end of the string.",0,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"generics":["capacityerror"],"name":"result"}}],[11,"push_str","","Adds the given string slice to the end of the string.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"try_push_str","","Adds the given string slice to the end of the string.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["capacityerror"],"name":"result"}}],[11,"pop","","Removes the last character from the string and returns it.",0,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"truncate","","Shortens this `ArrayString` to the specified length.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"remove","","Removes a `char` from this `ArrayString` at a byte position and returns it.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"char"}}],[11,"clear","","Make the string empty.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"set_len","","Set the strings’s length.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"as_str","","Return a string slice of the whole `ArrayString`.",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"borrow","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_char","","",0,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_str","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"arraystring"}}],[11,"clone_from","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"capacityerror"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"ordering"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"new","","Create a new `CapacityError` from `element`.",1,{"inputs":[{"name":"t"}],"output":{"name":"capacityerror"}}],[11,"element","","Extract the overflowing element",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"simplify","","Convert into a `CapacityError` that does not carry an element.",1,{"inputs":[{"name":"self"}],"output":{"name":"capacityerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Array","","Trait for fixed size arrays.",null,null],[16,"Item","","The array’s element type",2,null],[8,"RangeArgument","","`RangeArgument` is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",null,null],[11,"start","","Start index (inclusive)",3,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"end","","End index (exclusive)",3,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Create a new empty `ArrayVec`.",4,{"inputs":[],"output":{"name":"arrayvec"}}],[11,"len","","Return the number of elements in the `ArrayVec`.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"capacity","","Return the capacity of the `ArrayVec`.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_full","","Return if the `ArrayVec` is completely filled.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Push `element` to the end of the vector.",4,null],[11,"try_push","","Push `element` to the end of the vector.",4,null],[11,"push_unchecked","","Push `element` to the end of the vector without checking the capacity.",4,null],[11,"insert","","Insert `element` at position `index`.",4,null],[11,"try_insert","","Insert `element` at position `index`.",4,null],[11,"pop","","Remove the last element in the vector and return it.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"swap_remove","","Remove the element at `index` and swap the last element into its place.",4,null],[11,"swap_pop","","Remove the element at `index` and swap the last element into its place.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"remove","","Remove the element at `index` and shift down the following elements.",4,null],[11,"pop_at","","Remove the element at `index` and shift down the following elements.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"truncate","","Shortens the vector, keeping the first `len` elements and dropping the rest.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"clear","","Remove all elements in the vector.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"retain","","Retains only the elements specified by the predicate.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"set_len","","Set the vector’s length without dropping or moving out elements",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"drain","","Create a draining iterator that removes the specified range in the vector and yields the removed items from start to end. The element range is removed even if the iterator is not consumed until the end.",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_inner","","Return the inner fixed size array, if it is full to its capacity.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"dispose","","Dispose of `self` without the overwriting that is needed in Drop.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"as_slice","","Return a slice containing all elements of the vector.",4,null],[11,"as_mut_slice","","Return a mutable slice containing all elements of the vector.",4,null],[11,"deref","","",4,null],[11,"deref_mut","","",4,null],[11,"from","","",4,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"into_iter","","",4,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"extend","","",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",4,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"hash","","",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",4,null],[11,"borrow","","",4,null],[11,"borrow_mut","","",4,null],[11,"as_ref","","",4,null],[11,"as_mut","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","Return an empty array",4,{"inputs":[],"output":{"name":"arrayvec"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"arrayvec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"arrayvec"}],"output":{"name":"ordering"}}],[11,"start","","Start index (inclusive)",3,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"end","","End index (exclusive)",3,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}]],"paths":[[3,"ArrayString"],[3,"CapacityError"],[8,"Array"],[8,"RangeArgument"],[3,"ArrayVec"],[3,"IntoIter"],[3,"Drain"]]};
searchIndex["binary_space_partition"] = {"doc":"Binary Space Partitioning (BSP)","items":[[3,"BspNode","binary_space_partition","A node in the `BspTree`, which can be considered a tree itself.",null,null],[4,"PlaneCut","","The result of one plane being cut by another one. The \"cut\" here is an attempt to classify a plane as being in front or in the back of another one.",null,null],[13,"Sibling","","The planes are one the same geometrical plane.",0,null],[13,"Cut","","Planes are different, thus we can either determine that our plane is completely in front/back of another one, or split it into these sub-groups.",0,null],[12,"front","binary_space_partition::PlaneCut","Sub-planes in front of the base plane.",0,null],[12,"back","","Sub-planes in the back of the base plane.",0,null],[8,"Plane","binary_space_partition","A plane abstracted to the matter of partitioning.",null,null],[10,"cut","","Try to cut a different plane by this one.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"planecut"}}],[10,"is_aligned","","Check if a different plane is aligned in the same direction as this one.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bspnode"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new node.",2,{"inputs":[],"output":{"name":"self"}}],[11,"is_leaf","","Check if this node is a leaf of the tree.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_depth","","Get the tree depth starting with this node.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"insert","","Insert a value into the sub-tree starting with this node. This operation may spawn additional leafs/branches of the tree.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"order","","Build the draw order of this sub-tree into an `out` vector, so that the contained planes are sorted back to front according to the view vector defines as the `base` plane front direction.",2,{"inputs":[{"name":"self"},{"name":"t"},{"name":"vec"}],"output":null}]],"paths":[[4,"PlaneCut"],[8,"Plane"],[3,"BspNode"]]};
searchIndex["bincode"] = {"doc":"`bincode` is a crate for encoding and decoding using a tiny binary serialization strategy.","items":[[3,"Bounded","bincode","A SizeLimit that restricts serialized or deserialized messages from exceeding a certain byte length.",null,null],[12,"0","","",0,null],[3,"Infinite","","A SizeLimit without a limit! Use this if you don't care about the size of encoded or decoded messages.",null,null],[5,"deserialize","","Deserializes a slice of bytes into an object.",null,null],[5,"deserialize_from","","Deserializes an object directly from a `Buffer`ed Reader.",null,{"inputs":[{"name":"r"},{"name":"s"}],"output":{"name":"result"}}],[5,"serialize_into","","Serializes an object directly into a `Writer`.",null,{"inputs":[{"name":"w"},{"name":"t"},{"name":"s"}],"output":{"name":"result"}}],[5,"serialize","","Serializes a serializable object into a `Vec` of bytes.",null,{"inputs":[{"name":"t"},{"name":"s"}],"output":{"generics":["vec"],"name":"result"}}],[0,"internal","","A collection of serialization and deserialization functions that use the `serde` crate for the serializable and deserializable implementation.",null,null],[3,"Deserializer","bincode::internal","A Deserializer that reads bytes from a buffer.",null,null],[3,"Serializer","","An Serializer that encodes values directly into a Writer.",null,null],[4,"ErrorKind","","The kind of error that can be produced during a serialization or deserialization.",null,null],[13,"Io","","If the error stems from the reader/writer that is being used during (de)serialization, that error will be stored and returned here.",1,null],[13,"InvalidUtf8Encoding","","Returned if the deserializer attempts to deserialize a string that is not valid utf8",1,null],[13,"InvalidBoolEncoding","","Returned if the deserializer attempts to deserialize a bool that was not encoded as either a 1 or a 0",1,null],[13,"InvalidCharEncoding","","Returned if the deserializer attempts to deserialize a char that is not in the correct format.",1,null],[13,"InvalidTagEncoding","","Returned if the deserializer attempts to deserialize the tag of an enum that is not in the expected ranges",1,null],[13,"DeserializeAnyNotSupported","","Serde has a deserialize_any method that lets the format hint to the object which route to take in deserializing.",1,null],[13,"SizeLimit","","If (de)serializing a message takes more than the provided size limit, this error is returned.",1,null],[13,"SequenceMustHaveLength","","Bincode can not encode sequences of unknown length (like iterators).",1,null],[13,"Custom","","A custom error message from Serde.",1,null],[5,"serialize_into","","Serializes an object directly into a `Writer`.",null,{"inputs":[{"name":"w"},{"name":"t"},{"name":"s"}],"output":{"name":"result"}}],[5,"serialize","","Serializes a serializable object into a `Vec` of bytes.",null,{"inputs":[{"name":"t"},{"name":"s"}],"output":{"generics":["vec"],"name":"result"}}],[5,"serialized_size","","Returns the size that an object would be if serialized using bincode.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"serialized_size_bounded","","Given a maximum size limit, check how large an object would be if it were to be serialized.",null,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"generics":["u64"],"name":"option"}}],[5,"deserialize_from","","Deserializes an object directly from a `Read`er.",null,{"inputs":[{"name":"r"},{"name":"s"}],"output":{"name":"result"}}],[5,"deserialize","","Deserializes a slice of bytes into an object.",null,null],[6,"Result","","The result of a serialization or deserialization operation.",null,null],[6,"Error","","An error that can be produced during (de)serializing.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"from","","",2,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"custom","","",2,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"custom","","",2,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"read_types","bincode","The types that the deserializer uses for optimizations",null,null],[3,"SliceReader","bincode::read_types","A BincodeRead implementation for byte slices",null,null],[3,"IoReader","","A BincodeRead implementation for io::Readers",null,null],[8,"BincodeRead","","A byte-oriented reading trait that is specialized for slices and generic readers.",null,null],[6,"Deserializer","bincode","A Deserializer that uses LittleEndian byteorder",null,null],[6,"Serializer","","A Serializer that uses LittleEndian byteorder",null,null],[8,"SizeLimit","","A limit on the amount of bytes that can be read or written.",null,null],[10,"add","","Tells the SizeLimit that a certain number of bytes has been read or written.  Returns Err if the limit has been exceeded.",3,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"limit","","Returns the hard limit (if one exists)",3,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bounded"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"infinite"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"limit","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"add","","",4,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"limit","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"new","bincode::internal","Creates a new Serializer with the given `Write`r.",5,{"inputs":[{"name":"w"}],"output":{"name":"serializer"}}],[11,"new","bincode::read_types","Constructs a slice reader",6,null],[11,"new","","Constructs an IoReadReader",7,{"inputs":[{"name":"r"}],"output":{"name":"ioreader"}}],[11,"read","","",6,null],[11,"read_exact","","",6,null],[11,"read","","",7,null],[11,"read_exact","","",7,null],[11,"forward_read_str","","",6,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"get_byte_buffer","","",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["vec"],"name":"result"}}],[11,"forward_read_bytes","","",6,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"forward_read_str","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"get_byte_buffer","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["vec"],"name":"result"}}],[11,"forward_read_bytes","","",7,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","bincode::internal","Creates a new Deserializer with a given `Read`er and a size_limit.",8,{"inputs":[{"name":"r"},{"name":"s"}],"output":{"name":"deserializer"}}]],"paths":[[3,"Bounded"],[4,"ErrorKind"],[6,"Error"],[8,"SizeLimit"],[3,"Infinite"],[3,"Serializer"],[3,"SliceReader"],[3,"IoReader"],[3,"Deserializer"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator useful for sets of C-style bitmask flags. It can be used for creating typesafe wrappers around C APIs.","items":[[0,"example_generated","bitflags","This module shows an example of code generated by the macro. IT MUST NOT BE USED OUTSIDE THIS CRATE.",null,null],[3,"Flags","bitflags::example_generated","This is the same `Flags` struct defined in the crate level example. Note that this struct is just for documentation purposes only, it must not be used outside this crate.",null,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"FLAG_A","","",0,null],[18,"FLAG_B","","",0,null],[18,"FLAG_C","","",0,null],[18,"FLAG_ABC","","",0,null],[11,"empty","","Returns an empty set of flags.",0,{"inputs":[],"output":{"name":"flags"}}],[11,"all","","Returns the set containing all flags.",0,{"inputs":[],"output":{"name":"flags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",0,{"inputs":[{"name":"u32"}],"output":{"generics":["flags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",0,{"inputs":[{"name":"u32"}],"output":{"name":"flags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",0,{"inputs":[{"name":"self"},{"name":"flags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitor_assign","","Adds the set of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitxor_assign","","Toggles the set of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",0,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",0,{"inputs":[{"name":"t"}],"output":{"name":"flags"}}],[14,"bitflags","bitflags","The macro used to generate the flag structure.",null,null]],"paths":[[3,"Flags"]]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers in either [big-endian or little-endian order].","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"BE","","A type alias for [`BigEndian`].",null,null],[6,"LE","","A type alias for [`LittleEndian`].",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends [`Read`] with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"result"}}],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"result"}}],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,null],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,null],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,null],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,null],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,null],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,null],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f32_into_unchecked","","DEPRECATED.",0,null],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f64_into_unchecked","","DEPRECATED.",0,null],[8,"WriteBytesExt","","Extends [`Write`] with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","","`ByteOrder` describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,null],[11,"read_u24","","Reads an unsigned 24 bit integer from `buf`, stored in u32.",2,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,null],[11,"write_u24","","Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.",2,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,null],[11,"read_i24","","Reads a signed 24 bit integer from `buf`, stored in i32.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,null],[11,"write_i24","","Writes a signed 24 bit integer `n` to `buf`, stored in i32.",2,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,null],[10,"read_u16_into","","Reads unsigned 16 bit integers from `src` into `dst`.",2,null],[10,"read_u32_into","","Reads unsigned 32 bit integers from `src` into `dst`.",2,null],[10,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.",2,null],[11,"read_i16_into","","Reads signed 16 bit integers from `src` to `dst`.",2,null],[11,"read_i32_into","","Reads signed 32 bit integers from `src` into `dst`.",2,null],[11,"read_i64_into","","Reads signed 64 bit integers from `src` into `dst`.",2,null],[11,"read_f32_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[11,"read_f64_into_unchecked","","Reads IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[10,"write_u16_into","","Writes unsigned 16 bit integers from `src` into `dst`.",2,null],[10,"write_u32_into","","Writes unsigned 32 bit integers from `src` into `dst`.",2,null],[10,"write_u64_into","","Writes unsigned 64 bit integers from `src` into `dst`.",2,null],[11,"write_i16_into","","Writes signed 16 bit integers from `src` into `dst`.",2,null],[11,"write_i32_into","","Writes signed 32 bit integers from `src` into `dst`.",2,null],[11,"write_i64_into","","Writes signed 64 bit integers from `src` into `dst`.",2,null],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point numbers from `src` into `dst`.",2,null],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point numbers from `src` into `dst`.",2,null],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a particular endianness.",2,null],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a particular endianness.",2,null],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a particular endianness.",2,null],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a particular endianness.",2,null],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a particular endianness.",2,null],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a particular endianness.",2,null],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4 bytes) floating point numbers to a particular endianness.",2,null],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8 bytes) floating point numbers to a particular endianness.",2,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigendian"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"ordering"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigendian"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"bigendian"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"littleendian"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"ordering"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"littleendian"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"littleendian"}}],[11,"read_u16","","",3,null],[11,"read_u32","","",3,null],[11,"read_u64","","",3,null],[11,"read_uint","","",3,null],[11,"write_u16","","",3,null],[11,"write_u32","","",3,null],[11,"write_u64","","",3,null],[11,"write_uint","","",3,null],[11,"read_u16_into","","",3,null],[11,"read_u32_into","","",3,null],[11,"read_u64_into","","",3,null],[11,"write_u16_into","","",3,null],[11,"write_u32_into","","",3,null],[11,"write_u64_into","","",3,null],[11,"from_slice_u16","","",3,null],[11,"from_slice_u32","","",3,null],[11,"from_slice_u64","","",3,null],[11,"from_slice_f32","","",3,null],[11,"from_slice_f64","","",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u16_into","","",4,null],[11,"read_u32_into","","",4,null],[11,"read_u64_into","","",4,null],[11,"write_u16_into","","",4,null],[11,"write_u32_into","","",4,null],[11,"write_u64_into","","",4,null],[11,"from_slice_u16","","",4,null],[11,"from_slice_u32","","",4,null],[11,"from_slice_u64","","",4,null],[11,"from_slice_f32","","",4,null],[11,"from_slice_f64","","",4,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"result"}}],[11,"read_u24","","Reads an unsigned 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i24","","Reads a signed 24 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",0,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"result"}}],[11,"read_u16_into","","Reads a sequence of unsigned 16 bit integers from the underlying reader.",0,null],[11,"read_u32_into","","Reads a sequence of unsigned 32 bit integers from the underlying reader.",0,null],[11,"read_u64_into","","Reads a sequence of unsigned 64 bit integers from the underlying reader.",0,null],[11,"read_i16_into","","Reads a sequence of signed 16 bit integers from the underlying reader.",0,null],[11,"read_i32_into","","Reads a sequence of signed 32 bit integers from the underlying reader.",0,null],[11,"read_i64_into","","Reads a sequence of signed 64 bit integers from the underlying reader.",0,null],[11,"read_f32_into","","Reads a sequence of IEEE754 single-precision (4 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f32_into_unchecked","","DEPRECATED.",0,null],[11,"read_f64_into","","Reads a sequence of IEEE754 double-precision (8 bytes) floating point numbers from the underlying reader.",0,null],[11,"read_f64_into_unchecked","","DEPRECATED.",0,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u24","","Writes an unsigned 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i24","","Writes a signed 24 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["cfg_if"] = {"doc":"A macro for defining #[cfg] if-else statements.","items":[[14,"cfg_if","cfg_if","",null,null]],"paths":[]};
searchIndex["color_quant"] = {"doc":"Color quantization library This library provides a color quantizer based on the NEUQUANT quantization algorithm by Anthony Dekker. ### Usage `let data = vec![0; 40]; let nq = color_quant::NeuQuant::new(10, 256, &data); let indixes: Vec<u8> = data.chunks(4).map(|pix| nq.index_of(pix) as u8).collect(); let color_map = nq.color_map_rgba();`","items":[[3,"NeuQuant","color_quant","Neural network based color quantizer.",null,null],[11,"new","","Creates a new neuronal network and trains it with the supplied data.",0,null],[11,"init","","Initializes the neuronal network and trains it with the supplied data.",0,null],[11,"map_pixel","","Maps the rgba-pixel in-place to the best-matching color in the color map.",0,null],[11,"index_of","","Finds the best-matching index in the color map.",0,null],[11,"color_map_rgba","","Returns the RGBA color map calculated from the sample. ",0,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"color_map_rgb","","Returns the RGBA color map calculated from the sample. ",0,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}]],"paths":[[3,"NeuQuant"]]};
searchIndex["crossbeam_deque"] = {"doc":"A concurrent work-stealing deque.","items":[[3,"Deque","crossbeam_deque","A concurrent work-stealing deque.",null,null],[3,"Stealer","","A stealer that steals elements from the top of a deque.",null,null],[4,"Steal","","Possible outcomes of a steal operation.",null,null],[13,"Empty","","The deque was empty at the time of stealing.",0,null],[13,"Data","","Some data has been successfully stolen.",0,null],[13,"Retry","","Lost the race for stealing data to another concurrent operation. Try again.",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"ordering"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"steal"}}],[11,"new","","Returns a new deque.",1,{"inputs":[],"output":{"name":"deque"}}],[11,"with_min_capacity","","Returns a new deque with the specified minimum capacity.",1,{"inputs":[{"name":"usize"}],"output":{"name":"deque"}}],[11,"is_empty","","Returns `true` if the deque is empty.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the number of elements in the deque.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"push","","Pushes an element into the bottom of the deque.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","Pops an element from the bottom of the deque.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"steal","","Steals an element from the top of the deque.",1,{"inputs":[{"name":"self"}],"output":{"name":"steal"}}],[11,"stealer","","Creates a stealer that can be shared with other threads.",1,{"inputs":[{"name":"self"}],"output":{"name":"stealer"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"deque"}}],[11,"is_empty","","Returns `true` if the deque is empty.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the number of elements in the deque.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"steal","","Steals an element from the top of the deque.",2,{"inputs":[{"name":"self"}],"output":{"name":"steal"}}],[11,"clone","","Creates another stealer.",2,{"inputs":[{"name":"self"}],"output":{"name":"stealer"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"Steal"],[3,"Deque"],[3,"Stealer"]]};
searchIndex["crossbeam_epoch"] = {"doc":"Epoch-based memory reclamation.","items":[[3,"Atomic","crossbeam_epoch","An atomic pointer that can be safely shared between threads.",null,null],[3,"CompareAndSetError","","The error returned on failed compare-and-set operation.",null,null],[12,"current","","The value in the atomic pointer at the time of the failed operation.",0,null],[12,"new","","The new value, which the operation failed to store.",0,null],[3,"Owned","","An owned heap-allocated object.",null,null],[3,"Shared","","A pointer to an object protected by the epoch GC.",null,null],[3,"Guard","","A guard that keeps the current thread pinned.",null,null],[3,"Collector","","An epoch-based garbage collector.",null,null],[3,"Handle","","A handle to a garbage collector.",null,null],[5,"unprotected","","Returns a reference to a dummy guard that allows unprotected access to [`Atomic`]s.",null,{"inputs":[],"output":{"name":"guard"}}],[5,"default_handle","","Returns the default handle associated with the current thread.",null,{"inputs":[],"output":{"name":"handle"}}],[5,"is_pinned","","Returns `true` if the current thread is pinned.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"pin","","Pins the current thread.",null,{"inputs":[],"output":{"name":"guard"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"null","","Returns a new null atomic pointer.",1,{"inputs":[],"output":{"name":"atomic"}}],[11,"new","","Allocates `value` on the heap and returns a new atomic pointer pointing to it.",1,{"inputs":[{"name":"t"}],"output":{"name":"atomic"}}],[11,"load","","Loads a `Shared` from the atomic pointer.",1,{"inputs":[{"name":"self"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"shared"}}],[11,"store","","Stores a `Shared` or `Owned` pointer into the atomic pointer.",1,{"inputs":[{"name":"self"},{"name":"p"},{"name":"ordering"}],"output":null}],[11,"swap","","Stores a `Shared` or `Owned` pointer into the atomic pointer, returning the previous `Shared`.",1,{"inputs":[{"name":"self"},{"name":"p"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"shared"}}],[11,"compare_and_set","","Stores the pointer `new` (either `Shared` or `Owned`) into the atomic pointer if the current value is the same as `current`. The tag is also taken into account, so two pointers to the same object, but with different tags, will not be considered equal.",1,{"inputs":[{"name":"self"},{"name":"shared"},{"name":"p"},{"name":"o"},{"name":"guard"}],"output":{"generics":["shared","compareandseterror"],"name":"result"}}],[11,"compare_and_set_weak","","Stores the pointer `new` (either `Shared` or `Owned`) into the atomic pointer if the current value is the same as `current`. The tag is also taken into account, so two pointers to the same object, but with different tags, will not be considered equal.",1,{"inputs":[{"name":"self"},{"name":"shared"},{"name":"p"},{"name":"o"},{"name":"guard"}],"output":{"generics":["shared","compareandseterror"],"name":"result"}}],[11,"fetch_and","","Bitwise \"and\" with the current tag.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"shared"}}],[11,"fetch_or","","Bitwise \"or\" with the current tag.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"shared"}}],[11,"fetch_xor","","Bitwise \"xor\" with the current tag.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"shared"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","Returns a copy of the atomic value.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"from","","Returns a new atomic pointer pointing to `owned`.",1,{"inputs":[{"name":"owned"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","Returns a new atomic pointer pointing to `ptr`.",1,{"inputs":[{"name":"shared"}],"output":{"name":"self"}}],[11,"from","","Returns a new atomic pointer pointing to `raw`.",1,null],[11,"new","","Allocates `value` on the heap and returns a new owned pointer pointing to it.",2,{"inputs":[{"name":"t"}],"output":{"name":"owned"}}],[11,"from_raw","","Returns a new owned pointer pointing to `raw`.",2,null],[11,"into_shared","","Converts the owned pointer into a [`Shared`].",2,{"inputs":[{"name":"self"},{"name":"guard"}],"output":{"name":"shared"}}],[11,"into_box","","Converts the owned pointer into a `Box`.",2,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[11,"tag","","Returns the tag stored within the pointer.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_tag","","Returns the same pointer, but tagged with `tag`. `tag` is truncated to be fit into the unused bits of the pointer to `T`.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"owned"}}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from","","",2,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","Returns a new owned pointer pointing to `b`.",2,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"borrow","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"borrow_mut","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"null","","Returns a new null pointer.",3,{"inputs":[],"output":{"name":"shared"}}],[11,"is_null","","Returns `true` if the pointer is null.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_raw","","Converts the pointer to a raw pointer (without the tag).",3,null],[11,"deref","","Dereferences the pointer.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","Converts the pointer to a reference.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_owned","","Takes ownership of the pointee.",3,{"inputs":[{"name":"self"}],"output":{"name":"owned"}}],[11,"tag","","Returns the tag stored within the pointer.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_tag","","Returns the same pointer, but tagged with `tag`. `tag` is truncated to be fit into the unused bits of the pointer to `T`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"shared"}}],[11,"from","","Returns a new pointer pointing to `raw`.",3,null],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Creates a new collector.",4,{"inputs":[],"output":{"name":"self"}}],[11,"handle","","Creates a new handle for the collector.",4,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"clone","","Creates another reference to the same garbage collector.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"pin","","Pins the handle.",5,{"inputs":[{"name":"self"}],"output":{"name":"guard"}}],[11,"is_pinned","","Returns `true` if the handle is pinned.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"defer","","Stores a function so that it can be executed at some point after all currently pinned threads get unpinned.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"flush","","Clears up the thread-local cache of deferred functions by executing them or moving into the global cache.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"repin","","Unpins and then immediately re-pins the thread.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"repin_after","","Temporarily unpins the thread, executes the given function and then re-pins the thread.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"guard"}}],[8,"CompareAndSetOrdering","","Memory orderings for compare-and-set operations.",null,null],[10,"success","","The ordering of the operation when it succeeds.",7,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}],[10,"failure","","The ordering of the operation when it fails.",7,{"inputs":[{"name":"self"}],"output":{"name":"ordering"}}]],"paths":[[3,"CompareAndSetError"],[3,"Atomic"],[3,"Owned"],[3,"Shared"],[3,"Collector"],[3,"Handle"],[3,"Guard"],[8,"CompareAndSetOrdering"]]};
searchIndex["crossbeam_utils"] = {"doc":"","items":[[0,"cache_padded","crossbeam_utils","",null,null],[3,"CachePadded","crossbeam_utils::cache_padded","Pads `T` to the length of a cache line.",null,null],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Pads a value to the length of a cache line.",0,{"inputs":[{"name":"t"}],"output":{"name":"cachepadded"}}],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"atomic_option","crossbeam_utils","",null,null],[3,"AtomicOption","crossbeam_utils::atomic_option","",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"swap_box","","",1,{"inputs":[{"name":"self"},{"name":"box"},{"name":"ordering"}],"output":{"generics":["box"],"name":"option"}}],[11,"swap","","",1,{"inputs":[{"name":"self"},{"name":"t"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"take","","",1,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[0,"scoped","crossbeam_utils","",null,null],[3,"Scope","crossbeam_utils::scoped","",null,null],[3,"ScopedJoinHandle","","A handle to a scoped thread",null,null],[3,"ScopedThreadBuilder","","Scoped thread configuration. Provides detailed control over the properties and behavior of new scoped threads.",null,null],[5,"spawn_unsafe","","Like `std::thread::spawn`, but without the closure bounds.",null,{"inputs":[{"name":"f"}],"output":{"name":"joinhandle"}}],[5,"builder_spawn_unsafe","","Like `std::thread::Builder::spawn`, but without the closure bounds.",null,{"inputs":[{"name":"builder"},{"name":"f"}],"output":{"generics":["joinhandle"],"name":"result"}}],[5,"scope","","Create a new `scope`, for deferred destructors.",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"defer","","Schedule code to be executed when exiting the scope.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"spawn","","Create a scoped thread.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"scopedjoinhandle"}}],[11,"builder","","Generates the base configuration for spawning a scoped thread, from which configuration methods can be chained.",2,{"inputs":[{"name":"self"}],"output":{"name":"scopedthreadbuilder"}}],[11,"name","","Names the thread-to-be. Currently the name is used for identification only in panic messages.",4,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"scopedthreadbuilder"}}],[11,"stack_size","","Sets the size of the stack for the new thread.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"scopedthreadbuilder"}}],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["scopedjoinhandle"],"name":"result"}}],[11,"join","","Join the scoped thread, returning the result it produced.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"thread","","Get the underlying thread handle.",3,{"inputs":[{"name":"self"}],"output":{"name":"thread"}}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"CachePadded"],[3,"AtomicOption"],[3,"Scope"],[3,"ScopedJoinHandle"],[3,"ScopedThreadBuilder"]]};
searchIndex["deflate"] = {"doc":"An implementation an encoder using DEFLATE compression algorightm in pure rust.","items":[[3,"CompressionOptions","deflate","A struct describing the options for a compressor or compression function.",null,null],[12,"max_hash_checks","","The maximum number of checks to make in the hash table for matches.",0,null],[12,"lazy_if_less_than","","Only lazy match if we have a length less than this value.",0,null],[12,"matching_type","","Whether to use lazy or greedy matching.",0,null],[12,"special","","Force fixed/stored blocks (Not implemented yet). * Default value: `SpecialOptions::Normal`",0,null],[4,"SpecialOptions","","Enum allowing some special options (not implemented yet)!",null,null],[13,"Normal","","Compress normally.",1,null],[13,"_ForceFixed","","Force fixed huffman tables. (Unimplemented!).",1,null],[13,"_ForceStored","","Force stored (uncompressed) blocks only. (Unimplemented!).",1,null],[4,"Compression","","An enum describing the level of compression to be used by the encoder",null,null],[13,"Fast","","Fast minimal compression (`CompressionOptions::fast()`).",2,null],[13,"Default","","Default level (`CompressionOptions::default()`).",2,null],[13,"Best","","Higher compression level (`CompressionOptions::high()`).",2,null],[4,"MatchingType","","An enum describing whether we use lazy or greedy matching.",null,null],[13,"Greedy","","Use greedy matching: the matching algorithm simply uses a match right away if found.",3,null],[13,"Lazy","","Use lazy matching: after finding a match, the next input byte is checked, to see if there is a better match starting at that byte.",3,null],[5,"deflate_bytes_conf","","Compress the given slice of bytes with DEFLATE compression.",null,null],[5,"deflate_bytes","","Compress the given slice of bytes with DEFLATE compression using the default compression level.",null,null],[5,"deflate_bytes_zlib_conf","","Compress the given slice of bytes with DEFLATE compression, including a zlib header and trailer.",null,null],[5,"deflate_bytes_zlib","","Compress the given slice of bytes with DEFLATE compression, including a zlib header and trailer, using the default compression level.",null,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"compression"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"compression"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"compression"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"compression"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"hash","","",2,null],[11,"default","","",2,{"inputs":[],"output":{"name":"compression"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"specialoptions"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"specialoptions"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"specialoptions"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"compressionoptions"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"compressionoptions"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"compressionoptions"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"high","","Returns compression settings rouhgly corresponding to the `HIGH(9)` setting in miniz.",0,{"inputs":[],"output":{"name":"compressionoptions"}}],[11,"fast","","Returns  a fast set of compression settings",0,{"inputs":[],"output":{"name":"compressionoptions"}}],[11,"huffman_only","","Returns a set of compression settings that makes the compressor only compress using huffman coding. (Ignoring any length/distance matching)",0,{"inputs":[],"output":{"name":"compressionoptions"}}],[11,"rle","","Returns a set of compression settings that makes the compressor compress only using run-length encoding (i.e only looking for matches one byte back).",0,{"inputs":[],"output":{"name":"compressionoptions"}}],[11,"default","","Returns the options describing the default compression level.",0,{"inputs":[],"output":{"name":"compressionoptions"}}],[11,"from","","",0,{"inputs":[{"name":"compression"}],"output":{"name":"compressionoptions"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"matchingtype"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"matchingtype"}],"output":{"name":"bool"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"matchingtype"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"matchingtype"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"hash","","",3,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"write","","Encoders implementing a `Write` interface.",null,null],[3,"DeflateEncoder","deflate::write","A DEFLATE encoder/compressor.",null,null],[3,"ZlibEncoder","","A Zlib encoder/compressor.",null,null],[11,"new","","Creates a new encoder using the provided compression options.",4,{"inputs":[{"name":"w"},{"name":"o"}],"output":{"name":"deflateencoder"}}],[11,"finish","","Encode all pending data to the contained writer, consume this `DeflateEncoder`, and return the contained writer if writing succeeds.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"reset","","Resets the encoder (except the compression options), replacing the current writer with a new one, returning the old one.",4,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"write","","",4,null],[11,"flush","","Flush the encoder.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","When the encoder is dropped, output the rest of the data.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Create a new `ZlibEncoder` using the provided compression options.",5,{"inputs":[{"name":"w"},{"name":"o"}],"output":{"name":"zlibencoder"}}],[11,"finish","","Encode all pending data to the contained writer, consume this `ZlibEncoder`, and return the contained writer if writing succeeds.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"reset","","Resets the encoder (except the compression options), replacing the current writer with a new one, returning the old one.",5,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"checksum","","Return the adler32 checksum of the currently consumed data.",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"write","","",5,null],[11,"flush","","Flush the encoder.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"drop","","When the encoder is dropped, output the rest of the data.",5,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"CompressionOptions"],[4,"SpecialOptions"],[4,"Compression"],[4,"MatchingType"],[3,"DeflateEncoder"],[3,"ZlibEncoder"]]};
searchIndex["either"] = {"doc":"The enum [`Either`] with variants `Left` and `Right` is a general purpose sum type with two cases.","items":[[4,"Either","either","The enum `Either` with variants `Left` and `Right` is a general purpose sum type with two cases.",null,null],[13,"Left","","A value of type `L`.",0,null],[13,"Right","","A value of type `R`.",0,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"either"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_left","","Return true if the value is the `Left` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_right","","Return true if the value is the `Right` variant.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"left","","Convert the left side of `Either<L, R>` to an `Option<L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"right","","Convert the right side of `Either<L, R>` to an `Option<R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","Convert `&Either<L, R>` to `Either<&L, &R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"as_mut","","Convert `&mut Either<L, R>` to `Either<&mut L, &mut R>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"flip","","Convert `Either<L, R>` to `Either<R, L>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"map_left","","Apply the function `f` on the value in the `Left` variant if it is present rewrapping the result in `Left`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"map_right","","Apply the function `f` on the value in the `Right` variant if it is present rewrapping the result in `Right`.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"either","","Apply one of two functions depending on contents, unifying their result. If the value is `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second function `g` is applied.",0,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"either_with","","Like `either`, but provide some context to whichever of the functions ends up being called.",0,{"inputs":[{"name":"self"},{"name":"ctx"},{"name":"f"},{"name":"g"}],"output":{"name":"t"}}],[11,"left_and_then","","Apply the function `f` on the value in the `Left` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"right_and_then","","Apply the function `f` on the value in the `Right` variant if it is present.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"either"}}],[11,"into_iter","","Convert the inner value to an iterator.",0,{"inputs":[{"name":"self"}],"output":{"name":"either"}}],[11,"factor_first","","Factor out a homogeneous type from an either of pairs.",0,null],[11,"factor_second","","Factor out a homogeneous type from an either of pairs.",0,null],[11,"into_inner","","Extract the value of an either over two equivalent types.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from","","",0,{"inputs":[{"name":"result"}],"output":{"name":"self"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"fold","","",0,{"inputs":[{"name":"self"},{"name":"acc"},{"name":"g"}],"output":{"name":"acc"}}],[11,"count","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"nth","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"collect","","",0,{"inputs":[{"name":"self"}],"output":{"name":"b"}}],[11,"all","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"bool"}}],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"as_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"try_left","","Macro for unwrapping the left side of an `Either`, which fails early with the opposite side. Can only be used in functions that return `Either` because of the early return of `Right` that it provides.",null,null],[14,"try_right","","Dual to `try_left!`, see its documentation for more information.",null,null]],"paths":[[4,"Either"]]};
searchIndex["enum_primitive"] = {"doc":"This crate exports a macro `enum_from_primitive!` that wraps an `enum` declaration and automatically adds an implementation of `num::FromPrimitive` (reexported here), to allow conversion from primitive integers to the enum.  It therefore provides an alternative to the built-in `#[derive(FromPrimitive)]`, which requires the unstable `std::num::FromPrimitive` and is disabled in Rust 1.0.","items":[[4,"Option","enum_primitive","The `Option` type. See the module level documentation for more.",null,null],[13,"None","","No value",0,null],[13,"Some","","Some value `T`",0,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",1,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[14,"enum_from_primitive_impl_ty","","Helper macro for internal use by `enum_from_primitive!`.",null,null],[14,"enum_from_primitive_impl","","Helper macro for internal use by `enum_from_primitive!`.",null,null],[14,"enum_from_primitive","","Wrap this macro around an `enum` declaration to get an automatically generated implementation of `num::FromPrimitive`.",null,null],[11,"is_some","","Returns `true` if the option is a [`Some`] value.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a [`None`] value.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a [`Some`].",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is [`Some(v)`].",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any), or returns the provided default (if not).",0,{"inputs":[{"name":"self"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any), or computes a default (if not).",0,{"inputs":[{"name":"self"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to [`Ok(v)`] and [`None`] to [`Err(err)`].",0,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to [`Ok(v)`] and [`None`] to [`Err(err())`].",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",0,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",0,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"and","","Returns [`None`] if the option is [`None`], otherwise returns `optb`.",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns [`None`] if the option is [`None`], otherwise calls `f` with the wrapped value and returns the result.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"filter","","Returns `None` if the option is `None`, otherwise calls `predicate` with the wrapped value and returns:",0,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and returns the result.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"get_or_insert","","Inserts `v` into the option if it is [`None`], then returns a mutable reference to the contained value.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"get_or_insert_with","","Inserts a value computed from `f` into the option if it is [`None`], then returns a mutable reference to the contained value.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"take","","Takes the value out of the option, leaving a [`None`] in its place.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the option.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option<&mut T>` to an `Option<T>` by cloning the contents of the option.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"transpose","","Transposes an `Option` of a `Result` into a `Result` of an `Option`.",0,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"into_result","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["noneerror"],"name":"result"}}],[11,"from_ok","","",0,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"from_error","","",0,{"inputs":[{"name":"noneerror"}],"output":{"name":"option"}}],[11,"default","","Returns [`None`].",0,{"inputs":[],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the [`Iterator`]: if it is [`None`], no further elements are taken, and the [`None`] is returned. Should no [`None`] occur, a container with the values of each `Option` is returned.",0,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",0,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}]],"paths":[[4,"Option"],[8,"FromPrimitive"]]};
searchIndex["enum_primitive_derive"] = {"doc":"This crate provides a custom derive `Primitive` that helps people providing native Rust bindings to C code by allowing a C-like `enum` declaration to convert to its primitve values and back from them. You can selectively include `num_traits::ToPrimitive` and `num_traits::FromPrimitive` to get these features.","items":[[5,"primitive","enum_primitive_derive","Provides implementation of `num_traits::ToPrimitive` and `num_traits::FromPrimitive`",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
searchIndex["euclid"] = {"doc":"A collection of strongly typed math tools for computer graphics with an inclination towards 2d graphics and layout.","items":[[3,"Length","euclid","A one-dimensional distance, with value represented by `T` and unit of measurement `Unit`.",null,null],[12,"0","","",0,null],[3,"TypedScale","","A scaling factor between two different units of measurement.",null,null],[12,"0","","",1,null],[3,"TypedTransform2D","","A 2d transform stored as a 2 by 3 matrix in row-major order in memory.",null,null],[12,"m11","","",2,null],[12,"m12","","",2,null],[12,"m21","","",2,null],[12,"m22","","",2,null],[12,"m31","","",2,null],[12,"m32","","",2,null],[3,"TypedTransform3D","","A 3d transform stored as a 4 by 4 matrix in row-major order in memory.",null,null],[12,"m11","","",3,null],[12,"m12","","",3,null],[12,"m13","","",3,null],[12,"m14","","",3,null],[12,"m21","","",3,null],[12,"m22","","",3,null],[12,"m23","","",3,null],[12,"m24","","",3,null],[12,"m31","","",3,null],[12,"m32","","",3,null],[12,"m33","","",3,null],[12,"m34","","",3,null],[12,"m41","","",3,null],[12,"m42","","",3,null],[12,"m43","","",3,null],[12,"m44","","",3,null],[3,"TypedPoint2D","","A 2d Point tagged with a unit.",null,null],[12,"x","","",4,null],[12,"y","","",4,null],[3,"TypedPoint3D","","A 3d Point tagged with a unit.",null,null],[12,"x","","",5,null],[12,"y","","",5,null],[12,"z","","",5,null],[3,"TypedVector2D","","A 2d Vector tagged with a unit.",null,null],[12,"x","","",6,null],[12,"y","","",6,null],[3,"TypedVector3D","","A 3d Vector tagged with a unit.",null,null],[12,"x","","",7,null],[12,"y","","",7,null],[12,"z","","",7,null],[3,"TypedRect","","A 2d Rectangle optionally tagged with a unit.",null,null],[12,"origin","","",8,null],[12,"size","","",8,null],[3,"Angle","","An angle in radians",null,null],[12,"radians","","",9,null],[3,"TypedRotation2D","","A transform that can represent rotations in 2d, represented as an angle in radians.",null,null],[12,"angle","","",10,null],[3,"TypedRotation3D","","A transform that can represent rotations in 3d, represented as a quaternion.",null,null],[12,"i","","",11,null],[12,"j","","",11,null],[12,"k","","",11,null],[12,"r","","",11,null],[3,"TypedSideOffsets2D","","",null,null],[12,"top","","",12,null],[12,"right","","",12,null],[12,"bottom","","",12,null],[12,"left","","",12,null],[3,"TypedSize2D","","",null,null],[12,"width","","",13,null],[12,"height","","",13,null],[3,"UnknownUnit","","The default unit.",null,null],[3,"Radians","","An angle in radians",null,null],[12,"radians","","",9,null],[5,"point2","","",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"typedpoint2d"}}],[5,"point3","","",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"typedpoint3d"}}],[5,"vec2","","Convenience constructor.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"typedvector2d"}}],[5,"vec3","","Convenience constructor.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"typedvector3d"}}],[5,"rect","","Shorthand for `TypedRect::new(TypedPoint2D::new(x, y), TypedSize2D::new(w, h))`.",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"typedrect"}}],[5,"size2","","Shorthand for `TypedSize2D::new(w, h)`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"typedsize2d"}}],[0,"approxeq","","",null,null],[8,"ApproxEq","euclid::approxeq","Trait for testing approximate equality",null,null],[10,"approx_epsilon","","",14,{"inputs":[],"output":{"name":"eps"}}],[10,"approx_eq","","",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"approx_eq_eps","","",14,{"inputs":[{"name":"self"},{"name":"self"},{"name":"eps"}],"output":{"name":"bool"}}],[0,"num","euclid","A one-dimensional length, tagged with its units.",null,null],[8,"Zero","euclid::num","",null,null],[10,"zero","","",15,{"inputs":[],"output":{"name":"self"}}],[8,"One","","",null,null],[10,"one","","",16,{"inputs":[],"output":{"name":"self"}}],[8,"Round","","",null,null],[10,"round","","",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[8,"Floor","","",null,null],[10,"floor","","",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[8,"Ceil","","",null,null],[10,"ceil","","",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","euclid","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",0,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"new","","",0,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"get","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"length"}],"output":{"name":"length"}}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"length"}],"output":null}],[11,"sub","","",0,null],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"length"}],"output":null}],[11,"saturating_add","","",0,{"inputs":[{"name":"self"},{"name":"length"}],"output":{"name":"length"}}],[11,"saturating_sub","","",0,{"inputs":[{"name":"self"},{"name":"length"}],"output":{"name":"length"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"length"}],"output":{"name":"typedscale"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"typedscale"}],"output":{"name":"length"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"typedscale"}],"output":{"name":"length"}}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"cast","","Cast from one numeric representation to another, preserving the units.",0,{"inputs":[{"name":"self"}],"output":{"generics":["length"],"name":"option"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"lerp","","Linearly interpolate between this length and another length.",0,{"inputs":[{"name":"self"},{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",2,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"row_major","","Create a transform specifying its matrix elements in row-major order.",2,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"column_major","","Create a transform specifying its matrix elements in column-major order.",2,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"to_row_major_array","","Returns an array containing this transform's terms in row-major order (the order in which the transform is actually laid out in memory).",2,null],[11,"to_column_major_array","","Returns an array containing this transform's terms in column-major order.",2,null],[11,"to_row_arrays","","Returns an array containing this transform's 3 rows in (in row-major order) as arrays.",2,null],[11,"from_row_major_array","","Creates a transform from an array of 6 elements in row-major order.",2,null],[11,"from_row_arrays","","Creates a transform from 3 rows of 2 elements (row-major order).",2,null],[11,"to_untyped","","Drop the units, preserving only the numeric value.",2,{"inputs":[{"name":"self"}],"output":{"name":"transform2d"}}],[11,"from_untyped","","Tag a unitless value with units.",2,{"inputs":[{"name":"transform2d"}],"output":{"name":"self"}}],[11,"cast","","Cast from one numeric representation to another, preserving the units.",2,{"inputs":[{"name":"self"}],"output":{"generics":["typedtransform2d"],"name":"option"}}],[11,"identity","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"post_mul","","Returns the multiplication of the two matrices such that mat's transformation applies after self's transformation.",2,{"inputs":[{"name":"self"},{"name":"typedtransform2d"}],"output":{"name":"typedtransform2d"}}],[11,"pre_mul","","Returns the multiplication of the two matrices such that mat's transformation applies before self's transformation.",2,{"inputs":[{"name":"self"},{"name":"typedtransform2d"}],"output":{"name":"typedtransform2d"}}],[11,"create_translation","","Returns a translation transform.",2,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"post_translate","","Applies a translation after self's transformation and returns the resulting transform.",2,{"inputs":[{"name":"self"},{"name":"typedvector2d"}],"output":{"name":"self"}}],[11,"pre_translate","","Applies a translation before self's transformation and returns the resulting transform.",2,{"inputs":[{"name":"self"},{"name":"typedvector2d"}],"output":{"name":"self"}}],[11,"create_scale","","Returns a scale transform.",2,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"post_scale","","Applies a scale after self's transformation and returns the resulting transform.",2,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"pre_scale","","Applies a scale before self's transformation and returns the resulting transform.",2,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"create_rotation","","Returns a rotation transform.",2,{"inputs":[{"name":"angle"}],"output":{"name":"self"}}],[11,"post_rotate","","Applies a rotation after self's transformation and returns the resulting transform.",2,{"inputs":[{"name":"self"},{"name":"angle"}],"output":{"name":"self"}}],[11,"pre_rotate","","Applies a rotation after self's transformation and returns the resulting transform.",2,{"inputs":[{"name":"self"},{"name":"angle"}],"output":{"name":"self"}}],[11,"transform_point","","Returns the given point transformed by this transform.",2,{"inputs":[{"name":"self"},{"name":"typedpoint2d"}],"output":{"name":"typedpoint2d"}}],[11,"transform_vector","","Returns the given vector transformed by this matrix.",2,{"inputs":[{"name":"self"},{"name":"typedvector2d"}],"output":{"name":"typedvector2d"}}],[11,"transform_rect","","Returns a rectangle that encompasses the result of transforming the given rectangle by this transform.",2,{"inputs":[{"name":"self"},{"name":"typedrect"}],"output":{"name":"typedrect"}}],[11,"determinant","","Computes and returns the determinant of this transform.",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"inverse","","Returns the inverse transform if possible.",2,{"inputs":[{"name":"self"}],"output":{"generics":["typedtransform2d"],"name":"option"}}],[11,"with_destination","","Returns the same transform with a different destination unit.",2,{"inputs":[{"name":"self"}],"output":{"name":"typedtransform2d"}}],[11,"with_source","","Returns the same transform with a different source unit.",2,{"inputs":[{"name":"self"}],"output":{"name":"typedtransform2d"}}],[11,"to_3d","","Create a 3D transform from the current transform",2,{"inputs":[{"name":"self"}],"output":{"name":"typedtransform3d"}}],[11,"approx_eq","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",3,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",3,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"row_major","","Create a transform specifying its components in row-major order.",3,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"column_major","","Create a transform specifying its components in column-major order.",3,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"identity","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"row_major_2d","","Create a 4 by 4 transform representing a 2d transformation, specifying its components in row-major order.",3,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"ortho","","Create an orthogonal projection transform.",3,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"is_2d","","Returns true if this transform can be represented with a TypedTransform2D.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_2d","","Create a 2D transform picking the relevant terms from this transform.",3,{"inputs":[{"name":"self"}],"output":{"name":"typedtransform2d"}}],[11,"is_backface_visible","","Check whether shapes on the XY plane with Z pointing towards the screen transformed by this matrix would be facing back.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"approx_eq","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"with_destination","","Returns the same transform with a different destination unit.",3,{"inputs":[{"name":"self"}],"output":{"name":"typedtransform3d"}}],[11,"with_source","","Returns the same transform with a different source unit.",3,{"inputs":[{"name":"self"}],"output":{"name":"typedtransform3d"}}],[11,"to_untyped","","Drop the units, preserving only the numeric value.",3,{"inputs":[{"name":"self"}],"output":{"name":"transform3d"}}],[11,"from_untyped","","Tag a unitless value with units.",3,{"inputs":[{"name":"transform3d"}],"output":{"name":"self"}}],[11,"post_mul","","Returns the multiplication of the two matrices such that mat's transformation applies after self's transformation.",3,{"inputs":[{"name":"self"},{"name":"typedtransform3d"}],"output":{"name":"typedtransform3d"}}],[11,"pre_mul","","Returns the multiplication of the two matrices such that mat's transformation applies before self's transformation.",3,{"inputs":[{"name":"self"},{"name":"typedtransform3d"}],"output":{"name":"typedtransform3d"}}],[11,"inverse","","Returns the inverse transform if possible.",3,{"inputs":[{"name":"self"}],"output":{"generics":["typedtransform3d"],"name":"option"}}],[11,"determinant","","Compute the determinant of the transform.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"mul_s","","Multiplies all of the transform's component by a scalar and returns the result.",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"from_scale","","Convenience function to create a scale transform from a TypedScale.",3,{"inputs":[{"name":"typedscale"}],"output":{"name":"self"}}],[11,"transform_point2d","","Returns the given 2d point transformed by this transform.",3,{"inputs":[{"name":"self"},{"name":"typedpoint2d"}],"output":{"name":"typedpoint2d"}}],[11,"transform_vector2d","","Returns the given 2d vector transformed by this matrix.",3,{"inputs":[{"name":"self"},{"name":"typedvector2d"}],"output":{"name":"typedvector2d"}}],[11,"transform_point3d","","Returns the given 3d point transformed by this transform.",3,{"inputs":[{"name":"self"},{"name":"typedpoint3d"}],"output":{"name":"typedpoint3d"}}],[11,"transform_vector3d","","Returns the given 3d vector transformed by this matrix.",3,{"inputs":[{"name":"self"},{"name":"typedvector3d"}],"output":{"name":"typedvector3d"}}],[11,"transform_rect","","Returns a rectangle that encompasses the result of transforming the given rectangle by this transform.",3,{"inputs":[{"name":"self"},{"name":"typedrect"}],"output":{"name":"typedrect"}}],[11,"create_translation","","Create a 3d translation transform",3,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"pre_translate","","Returns a transform with a translation applied before self's transformation.",3,{"inputs":[{"name":"self"},{"name":"typedvector3d"}],"output":{"name":"self"}}],[11,"post_translate","","Returns a transform with a translation applied after self's transformation.",3,{"inputs":[{"name":"self"},{"name":"typedvector3d"}],"output":{"name":"self"}}],[11,"create_scale","","Create a 3d scale transform",3,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"pre_scale","","Returns a transform with a scale applied before self's transformation.",3,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"post_scale","","Returns a transform with a scale applied after self's transformation.",3,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"create_rotation","","Create a 3d rotation transform from an angle / axis. The supplied axis must be normalized.",3,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"angle"}],"output":{"name":"self"}}],[11,"post_rotate","","Returns a transform with a rotation applied after self's transformation.",3,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"angle"}],"output":{"name":"self"}}],[11,"pre_rotate","","Returns a transform with a rotation applied before self's transformation.",3,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"},{"name":"t"},{"name":"angle"}],"output":{"name":"self"}}],[11,"create_skew","","Create a 2d skew transform.",3,{"inputs":[{"name":"angle"},{"name":"angle"}],"output":{"name":"self"}}],[11,"create_perspective","","Create a simple perspective projection transform",3,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"to_row_major_array","","Returns an array containing this transform's terms in row-major order (the order in which the transform is actually laid out in memory).",3,null],[11,"to_column_major_array","","Returns an array containing this transform's terms in column-major order.",3,null],[11,"to_row_arrays","","Returns an array containing this transform's 4 rows in (in row-major order) as arrays.",3,null],[11,"to_column_arrays","","Returns an array containing this transform's 4 columns in (in row-major order, or 4 rows in column-major order) as arrays.",3,null],[11,"from_array","","Creates a transform from an array of 16 elements in row-major order.",3,null],[11,"from_row_arrays","","Creates a transform from 4 rows of 4 elements (row-major order).",3,null],[11,"cast","","Cast from one numeric representation to another, preserving the units.",3,{"inputs":[{"name":"self"}],"output":{"generics":["typedtransform3d"],"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"origin","","Constructor, setting all components to zero.",4,{"inputs":[],"output":{"name":"self"}}],[11,"zero","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"to_3d","","Convert into a 3d point.",4,{"inputs":[{"name":"self"}],"output":{"name":"typedpoint3d"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructor taking scalar values directly.",4,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"from_lengths","","Constructor taking properly typed Lengths instead of scalar values.",4,{"inputs":[{"name":"length"},{"name":"length"}],"output":{"name":"self"}}],[11,"extend","","Create a 3d point from this one, using the specified z value.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"typedpoint3d"}}],[11,"to_vector","","Cast this point into a vector.",4,{"inputs":[{"name":"self"}],"output":{"name":"typedvector2d"}}],[11,"yx","","Swap x and y.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"x_typed","","Returns self.x as a Length carrying the unit.",4,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"y_typed","","Returns self.y as a Length carrying the unit.",4,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"to_untyped","","Drop the units, preserving only the numeric value.",4,{"inputs":[{"name":"self"}],"output":{"name":"point2d"}}],[11,"from_untyped","","Tag a unitless value with units.",4,{"inputs":[{"name":"point2d"}],"output":{"name":"self"}}],[11,"to_array","","",4,null],[11,"add_size","","",4,{"inputs":[{"name":"self"},{"name":"typedsize2d"}],"output":{"name":"self"}}],[11,"add","","",4,{"inputs":[{"name":"self"},{"name":"typedsize2d"}],"output":{"name":"self"}}],[11,"add_assign","","",4,{"inputs":[{"name":"self"},{"name":"typedvector2d"}],"output":null}],[11,"sub_assign","","",4,{"inputs":[{"name":"self"},{"name":"typedvector2d"}],"output":null}],[11,"add","","",4,{"inputs":[{"name":"self"},{"name":"typedvector2d"}],"output":{"name":"self"}}],[11,"sub","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"typedvector2d"}}],[11,"sub","","",4,{"inputs":[{"name":"self"},{"name":"typedvector2d"}],"output":{"name":"self"}}],[11,"min","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"max","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"mul","","",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"mul_assign","","",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"div","","",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"div_assign","","",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"mul","","",4,{"inputs":[{"name":"self"},{"name":"typedscale"}],"output":{"name":"typedpoint2d"}}],[11,"div","","",4,{"inputs":[{"name":"self"},{"name":"typedscale"}],"output":{"name":"typedpoint2d"}}],[11,"round","","Rounds each component to the nearest integer value.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"ceil","","Rounds each component to the smallest integer equal or greater than the original value.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"floor","","Rounds each component to the biggest integer equal or lower than the original value.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"cast","","Cast from one numeric representation to another, preserving the units.",4,{"inputs":[{"name":"self"}],"output":{"generics":["typedpoint2d"],"name":"option"}}],[11,"to_f32","","Cast into an `f32` point.",4,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"typedpoint2d"}}],[11,"to_f64","","Cast into an `f64` point.",4,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"typedpoint2d"}}],[11,"to_usize","","Cast into an `usize` point, truncating decimals if any.",4,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"typedpoint2d"}}],[11,"to_i32","","Cast into an i32 point, truncating decimals if any.",4,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"typedpoint2d"}}],[11,"to_i64","","Cast into an i64 point, truncating decimals if any.",4,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"typedpoint2d"}}],[11,"lerp","","Linearly interpolate between this point and another point.",4,{"inputs":[{"name":"self"},{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"approx_epsilon","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"approx_eq","","",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",4,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"into","","",4,null],[11,"from","","",4,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize","","",5,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",5,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"origin","","Constructor, setting all copmonents to zero.",5,{"inputs":[],"output":{"name":"self"}}],[11,"to_array_4d","","",5,null],[11,"lerp","","Linearly interpolate between this point and another point.",5,{"inputs":[{"name":"self"},{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructor taking scalar values directly.",5,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"from_lengths","","Constructor taking properly typed Lengths instead of scalar values.",5,{"inputs":[{"name":"length"},{"name":"length"},{"name":"length"}],"output":{"name":"self"}}],[11,"to_vector","","Cast this point into a vector.",5,{"inputs":[{"name":"self"}],"output":{"name":"typedvector3d"}}],[11,"xy","","Returns a 2d point using this point's x and y coordinates",5,{"inputs":[{"name":"self"}],"output":{"name":"typedpoint2d"}}],[11,"xz","","Returns a 2d point using this point's x and z coordinates",5,{"inputs":[{"name":"self"}],"output":{"name":"typedpoint2d"}}],[11,"yz","","Returns a 2d point using this point's x and z coordinates",5,{"inputs":[{"name":"self"}],"output":{"name":"typedpoint2d"}}],[11,"x_typed","","Returns self.x as a Length carrying the unit.",5,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"y_typed","","Returns self.y as a Length carrying the unit.",5,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"z_typed","","Returns self.z as a Length carrying the unit.",5,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"to_array","","",5,null],[11,"to_untyped","","Drop the units, preserving only the numeric value.",5,{"inputs":[{"name":"self"}],"output":{"name":"point3d"}}],[11,"from_untyped","","Tag a unitless value with units.",5,{"inputs":[{"name":"point3d"}],"output":{"name":"self"}}],[11,"to_2d","","Convert into a 2d point.",5,{"inputs":[{"name":"self"}],"output":{"name":"typedpoint2d"}}],[11,"add_assign","","",5,{"inputs":[{"name":"self"},{"name":"typedvector3d"}],"output":null}],[11,"sub_assign","","",5,{"inputs":[{"name":"self"},{"name":"typedvector3d"}],"output":null}],[11,"add","","",5,{"inputs":[{"name":"self"},{"name":"typedvector3d"}],"output":{"name":"self"}}],[11,"sub","","",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"typedvector3d"}}],[11,"sub","","",5,{"inputs":[{"name":"self"},{"name":"typedvector3d"}],"output":{"name":"self"}}],[11,"mul","","",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"div","","",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"min","","",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"max","","",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"round","","Rounds each component to the nearest integer value.",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"ceil","","Rounds each component to the smallest integer equal or greater than the original value.",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"floor","","Rounds each component to the biggest integer equal or lower than the original value.",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"cast","","Cast from one numeric representation to another, preserving the units.",5,{"inputs":[{"name":"self"}],"output":{"generics":["typedpoint3d"],"name":"option"}}],[11,"to_f32","","Cast into an `f32` point.",5,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"typedpoint3d"}}],[11,"to_f64","","Cast into an `f64` point.",5,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"typedpoint3d"}}],[11,"to_usize","","Cast into an `usize` point, truncating decimals if any.",5,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"typedpoint3d"}}],[11,"to_i32","","Cast into an `i32` point, truncating decimals if any.",5,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"typedpoint3d"}}],[11,"to_i64","","Cast into an `i64` point, truncating decimals if any.",5,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"typedpoint3d"}}],[11,"approx_epsilon","","",5,{"inputs":[],"output":{"name":"self"}}],[11,"approx_eq","","",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",5,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"into","","",5,null],[11,"from","","",5,null],[11,"deserialize","","",8,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",8,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"hash","","",8,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructor.",8,{"inputs":[{"name":"typedpoint2d"},{"name":"typedsize2d"}],"output":{"name":"self"}}],[11,"intersects","","",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"max_x","","",8,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"min_x","","",8,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"max_y","","",8,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"min_y","","",8,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"max_x_typed","","",8,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"min_x_typed","","",8,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"max_y_typed","","",8,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"min_y_typed","","",8,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"intersection","","",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"translate","","Returns the same rectangle, translated by a vector.",8,{"inputs":[{"name":"self"},{"name":"typedvector2d"}],"output":{"name":"self"}}],[11,"contains","","Returns true if this rectangle contains the point. Points are considered in the rectangle if they are on the left or top edge, but outside if they are on the right or bottom edge.",8,{"inputs":[{"name":"self"},{"name":"typedpoint2d"}],"output":{"name":"bool"}}],[11,"contains_rect","","Returns true if this rectangle contains the interior of rect. Always returns true if rect is empty, and always returns false if rect is nonempty but this rectangle is empty.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"inflate","","",8,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"inflate_typed","","",8,{"inputs":[{"name":"self"},{"name":"length"},{"name":"length"}],"output":{"name":"self"}}],[11,"top_right","","",8,{"inputs":[{"name":"self"}],"output":{"name":"typedpoint2d"}}],[11,"bottom_left","","",8,{"inputs":[{"name":"self"}],"output":{"name":"typedpoint2d"}}],[11,"bottom_right","","",8,{"inputs":[{"name":"self"}],"output":{"name":"typedpoint2d"}}],[11,"translate_by_size","","",8,{"inputs":[{"name":"self"},{"name":"typedsize2d"}],"output":{"name":"self"}}],[11,"inner_rect","","Calculate the size and position of an inner rectangle.",8,{"inputs":[{"name":"self"},{"name":"typedsideoffsets2d"}],"output":{"name":"self"}}],[11,"outer_rect","","Calculate the size and position of an outer rectangle.",8,{"inputs":[{"name":"self"},{"name":"typedsideoffsets2d"}],"output":{"name":"self"}}],[11,"from_points","","Returns the smallest rectangle defined by the top/bottom/left/right-most points provided as parameter.",8,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"lerp","","Linearly interpolate between this rectangle and another rectangle.",8,{"inputs":[{"name":"self"},{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"union","","",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"scale","","",8,{"inputs":[{"name":"self"},{"name":"s"},{"name":"s"}],"output":{"name":"self"}}],[11,"zero","","Constructor, setting all sides to zero.",8,{"inputs":[],"output":{"name":"self"}}],[11,"is_empty","","Returns true if the size is zero, regardless of the origin's value.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"mul","","",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"div","","",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"mul","","",8,{"inputs":[{"name":"self"},{"name":"typedscale"}],"output":{"name":"typedrect"}}],[11,"div","","",8,{"inputs":[{"name":"self"},{"name":"typedscale"}],"output":{"name":"typedrect"}}],[11,"to_untyped","","Drop the units, preserving only the numeric value.",8,{"inputs":[{"name":"self"}],"output":{"name":"rect"}}],[11,"from_untyped","","Tag a unitless value with units.",8,{"inputs":[{"name":"rect"}],"output":{"name":"typedrect"}}],[11,"cast","","Cast from one numeric representation to another, preserving the units.",8,{"inputs":[{"name":"self"}],"output":{"generics":["typedrect"],"name":"option"}}],[11,"round","","Return a rectangle with edges rounded to integer coordinates, such that the returned rectangle has the same set of pixel centers as the original one. Edges at offset 0.5 round up. Suitable for most places where integral device coordinates are needed, but note that any translation should be applied first to avoid pixel rounding errors. Note that this is not rounding to nearest integer if the values are negative. They are always rounding as floor(n + 0.5).",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"round_in","","Return a rectangle with edges rounded to integer coordinates, such that the original rectangle contains the resulting rectangle.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"round_out","","Return a rectangle with edges rounded to integer coordinates, such that the original rectangle is contained in the resulting rectangle.",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_f32","","Cast into an `f32` rectangle.",8,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"typedrect"}}],[11,"to_f64","","Cast into an `f64` rectangle.",8,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"typedrect"}}],[11,"to_usize","","Cast into an `usize` rectangle, truncating decimals if any.",8,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"typedrect"}}],[11,"to_i32","","Cast into an `i32` rectangle, truncating decimals if any.",8,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"typedrect"}}],[11,"to_i64","","Cast into an `i64` rectangle, truncating decimals if any.",8,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"typedrect"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"angle"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"angle"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"angle"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"angle"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"angle"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"angle"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"angle"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"angle"}],"output":{"name":"bool"}}],[11,"hash","","",9,null],[11,"radians","","",9,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"get","","",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"degrees","","",9,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"to_degrees","","",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"positive","","Returns this angle in the [0..2*PI[ range.",9,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"signed","","Returns this angle in the ]-PI..PI] range.",9,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"sin_cos","","Returns (sin(self), cos(self)).",9,null],[11,"zero","","",9,{"inputs":[],"output":{"name":"self"}}],[11,"pi","","",9,{"inputs":[],"output":{"name":"self"}}],[11,"two_pi","","",9,{"inputs":[],"output":{"name":"self"}}],[11,"frac_pi_2","","",9,{"inputs":[],"output":{"name":"self"}}],[11,"frac_pi_3","","",9,{"inputs":[],"output":{"name":"self"}}],[11,"frac_pi_4","","",9,{"inputs":[],"output":{"name":"self"}}],[11,"add","","",9,{"inputs":[{"name":"self"},{"name":"angle"}],"output":{"name":"angle"}}],[11,"add_assign","","",9,{"inputs":[{"name":"self"},{"name":"angle"}],"output":null}],[11,"sub","","",9,null],[11,"sub_assign","","",9,{"inputs":[{"name":"self"},{"name":"angle"}],"output":null}],[11,"div","","",9,{"inputs":[{"name":"self"},{"name":"angle"}],"output":{"name":"t"}}],[11,"div","","",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"angle"}}],[11,"div_assign","","",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"mul","","",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"angle"}}],[11,"mul_assign","","",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"neg","","",9,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize","","",10,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",10,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",10,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"new","","Creates a rotation from an angle in radians.",10,{"inputs":[{"name":"angle"}],"output":{"name":"self"}}],[11,"radians","","",10,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"identity","","Creates the identity rotation.",10,{"inputs":[],"output":{"name":"self"}}],[11,"get_angle","","Returns self.angle as a strongly typed `Angle<T>`.",10,{"inputs":[{"name":"self"}],"output":{"name":"angle"}}],[11,"to_3d","","Creates a 3d rotation (around the z axis) from this 2d rotation.",10,{"inputs":[{"name":"self"}],"output":{"name":"typedrotation3d"}}],[11,"inverse","","Returns the inverse of this rotation.",10,{"inputs":[{"name":"self"}],"output":{"name":"typedrotation2d"}}],[11,"pre_rotate","","Returns a rotation representing the other rotation followed by this rotation.",10,{"inputs":[{"name":"self"},{"name":"typedrotation2d"}],"output":{"name":"typedrotation2d"}}],[11,"post_rotate","","Returns a rotation representing this rotation followed by the other rotation.",10,{"inputs":[{"name":"self"},{"name":"typedrotation2d"}],"output":{"name":"typedrotation2d"}}],[11,"transform_point","","Returns the given 2d point transformed by this rotation.",10,{"inputs":[{"name":"self"},{"name":"typedpoint2d"}],"output":{"name":"typedpoint2d"}}],[11,"transform_vector","","Returns the given 2d vector transformed by this rotation.",10,{"inputs":[{"name":"self"},{"name":"typedvector2d"}],"output":{"name":"typedvector2d"}}],[11,"to_transform","","Returns the matrix representation of this rotation.",10,{"inputs":[{"name":"self"}],"output":{"name":"typedtransform2d"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize","","",11,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",11,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",11,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"quaternion","","Creates a rotation around from a quaternion representation.",11,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"vector_part","","Returns the vector part (i, j, k) of this quaternion.",11,{"inputs":[{"name":"self"}],"output":{"name":"vector3d"}}],[11,"identity","","Creates the identity rotation.",11,{"inputs":[],"output":{"name":"self"}}],[11,"unit_quaternion","","Creates a rotation around from a quaternion representation and normalizes it.",11,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"around_axis","","Creates a rotation around a given axis.",11,{"inputs":[{"name":"typedvector3d"},{"name":"angle"}],"output":{"name":"self"}}],[11,"around_x","","Creates a rotation around the x axis.",11,{"inputs":[{"name":"angle"}],"output":{"name":"self"}}],[11,"around_y","","Creates a rotation around the y axis.",11,{"inputs":[{"name":"angle"}],"output":{"name":"self"}}],[11,"around_z","","Creates a rotation around the z axis.",11,{"inputs":[{"name":"angle"}],"output":{"name":"self"}}],[11,"euler","","Creates a rotation from Euler angles.",11,{"inputs":[{"name":"angle"},{"name":"angle"},{"name":"angle"}],"output":{"name":"self"}}],[11,"inverse","","Returns the inverse of this rotation.",11,{"inputs":[{"name":"self"}],"output":{"name":"typedrotation3d"}}],[11,"norm","","Computes the norm of this quaternion",11,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"square_norm","","",11,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"normalize","","Returns a unit quaternion from this one.",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"is_normalized","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"slerp","","Spherical linear interpolation between this rotation and another rotation.",11,{"inputs":[{"name":"self"},{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"lerp","","Basic Linear interpolation between this rotation and another rotation.",11,{"inputs":[{"name":"self"},{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"rotate_point3d","","Returns the given 3d point transformed by this rotation.",11,{"inputs":[{"name":"self"},{"name":"typedpoint3d"}],"output":{"name":"typedpoint3d"}}],[11,"rotate_point2d","","Returns the given 2d point transformed by this rotation then projected on the xy plane.",11,{"inputs":[{"name":"self"},{"name":"typedpoint2d"}],"output":{"name":"typedpoint2d"}}],[11,"rotate_vector3d","","Returns the given 3d vector transformed by this rotation then projected on the xy plane.",11,{"inputs":[{"name":"self"},{"name":"typedvector3d"}],"output":{"name":"typedvector3d"}}],[11,"rotate_vector2d","","Returns the given 2d vector transformed by this rotation then projected on the xy plane.",11,{"inputs":[{"name":"self"},{"name":"typedvector2d"}],"output":{"name":"typedvector2d"}}],[11,"to_transform","","Returns the matrix representation of this rotation.",11,{"inputs":[{"name":"self"}],"output":{"name":"typedtransform3d"}}],[11,"pre_rotate","","Returns a rotation representing the other rotation followed by this rotation.",11,{"inputs":[{"name":"self"},{"name":"typedrotation3d"}],"output":{"name":"typedrotation3d"}}],[11,"post_rotate","","Returns a rotation representing this rotation followed by the other rotation.",11,{"inputs":[{"name":"self"},{"name":"typedrotation3d"}],"output":{"name":"typedrotation3d"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"approx_epsilon","","",11,{"inputs":[],"output":{"name":"t"}}],[11,"approx_eq","","",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",11,{"inputs":[{"name":"self"},{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"deserialize","","",1,{"inputs":[{"name":"d"}],"output":{"generics":["typedscale"],"name":"result"}}],[11,"serialize","","",1,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"new","","",1,{"inputs":[{"name":"t"}],"output":{"name":"typedscale"}}],[11,"get","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"inv","","The inverse TypedScale (1.0 / self).",1,{"inputs":[{"name":"self"}],"output":{"name":"typedscale"}}],[11,"mul","","",1,{"inputs":[{"name":"self"},{"name":"typedscale"}],"output":{"name":"typedscale"}}],[11,"add","","",1,{"inputs":[{"name":"self"},{"name":"typedscale"}],"output":{"name":"typedscale"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"typedscale"}],"output":{"name":"typedscale"}}],[11,"cast","","Cast from one numeric representation to another, preserving the units.",1,{"inputs":[{"name":"self"}],"output":{"generics":["typedscale"],"name":"option"}}],[11,"transform_point","","Returns the given point transformed by this scale.",1,{"inputs":[{"name":"self"},{"name":"typedpoint2d"}],"output":{"name":"typedpoint2d"}}],[11,"transform_vector","","Returns the given vector transformed by this scale.",1,{"inputs":[{"name":"self"},{"name":"typedvector2d"}],"output":{"name":"typedvector2d"}}],[11,"transform_size","","Returns the given vector transformed by this scale.",1,{"inputs":[{"name":"self"},{"name":"typedsize2d"}],"output":{"name":"typedsize2d"}}],[11,"transform_rect","","Returns the given rect transformed by this scale.",1,{"inputs":[{"name":"self"},{"name":"typedrect"}],"output":{"name":"typedrect"}}],[11,"inverse","","Returns the inverse of this scale.",1,{"inputs":[{"name":"self"}],"output":{"name":"typedscale"}}],[11,"is_identity","","Returns true if this scale has no effect.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"typedscale"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"typedscale"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize","","",12,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",12,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",12,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructor taking a scalar for each side.",12,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"from_lengths","","Constructor taking a typed Length for each side.",12,{"inputs":[{"name":"length"},{"name":"length"},{"name":"length"},{"name":"length"}],"output":{"name":"self"}}],[11,"top_typed","","Access self.top as a typed Length instead of a scalar value.",12,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"right_typed","","Access self.right as a typed Length instead of a scalar value.",12,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"bottom_typed","","Access self.bottom as a typed Length instead of a scalar value.",12,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"left_typed","","Access self.left as a typed Length instead of a scalar value.",12,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"new_all_same","","Constructor setting the same value to all sides, taking a scalar value directly.",12,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from_length_all_same","","Constructor setting the same value to all sides, taking a typed Length.",12,{"inputs":[{"name":"length"}],"output":{"name":"self"}}],[11,"horizontal","","",12,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"vertical","","",12,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"horizontal_typed","","",12,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"vertical_typed","","",12,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"add","","",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"zero","","Constructor, setting all sides to zero.",12,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize","","",13,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",13,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",13,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructor taking scalar values.",13,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"from_lengths","","Constructor taking scalar strongly typed lengths.",13,{"inputs":[{"name":"length"},{"name":"length"}],"output":{"name":"self"}}],[11,"round","","Rounds each component to the nearest integer value.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"ceil","","Rounds each component to the smallest integer equal or greater than the original value.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"floor","","Rounds each component to the biggest integer equal or lower than the original value.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"add","","",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"sub","","",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"area","","",13,null],[11,"lerp","","Linearly interpolate between this size and another size.",13,{"inputs":[{"name":"self"},{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"is_empty_or_negative","","",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"zero","","",13,{"inputs":[],"output":{"name":"self"}}],[11,"zero","","",13,{"inputs":[],"output":{"name":"self"}}],[11,"mul","","",13,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"div","","",13,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"mul","","",13,{"inputs":[{"name":"self"},{"name":"typedscale"}],"output":{"name":"typedsize2d"}}],[11,"div","","",13,{"inputs":[{"name":"self"},{"name":"typedscale"}],"output":{"name":"typedsize2d"}}],[11,"width_typed","","Returns self.width as a Length carrying the unit.",13,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"height_typed","","Returns self.height as a Length carrying the unit.",13,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"to_array","","",13,null],[11,"to_vector","","",13,{"inputs":[{"name":"self"}],"output":{"name":"typedvector2d"}}],[11,"to_untyped","","Drop the units, preserving only the numeric value.",13,{"inputs":[{"name":"self"}],"output":{"name":"size2d"}}],[11,"from_untyped","","Tag a unitless value with units.",13,{"inputs":[{"name":"size2d"}],"output":{"name":"self"}}],[11,"cast","","Cast from one numeric representation to another, preserving the units.",13,{"inputs":[{"name":"self"}],"output":{"generics":["typedsize2d"],"name":"option"}}],[11,"to_f32","","Cast into an `f32` size.",13,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"typedsize2d"}}],[11,"to_f64","","Cast into an `f64` size.",13,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"typedsize2d"}}],[11,"to_usize","","Cast into an `uint` size, truncating decimals if any.",13,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"typedsize2d"}}],[11,"to_i32","","Cast into an `i32` size, truncating decimals if any.",13,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"typedsize2d"}}],[11,"to_i64","","Cast into an `i64` size, truncating decimals if any.",13,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"typedsize2d"}}],[11,"abs","","",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"is_positive","","",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize","","",6,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",6,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"zero","","Constructor, setting all components to zero.",6,{"inputs":[],"output":{"name":"self"}}],[11,"to_3d","","Convert into a 3d vector.",6,{"inputs":[{"name":"self"}],"output":{"name":"typedvector3d"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructor taking scalar values directly.",6,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"from_lengths","","Constructor taking properly typed Lengths instead of scalar values.",6,{"inputs":[{"name":"length"},{"name":"length"}],"output":{"name":"self"}}],[11,"extend","","Create a 3d vector from this one, using the specified z value.",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"typedvector3d"}}],[11,"to_point","","Cast this vector into a point.",6,{"inputs":[{"name":"self"}],"output":{"name":"typedpoint2d"}}],[11,"yx","","Swap x and y.",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_size","","Cast this vector into a size.",6,{"inputs":[{"name":"self"}],"output":{"name":"typedsize2d"}}],[11,"x_typed","","Returns self.x as a Length carrying the unit.",6,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"y_typed","","Returns self.y as a Length carrying the unit.",6,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"to_untyped","","Drop the units, preserving only the numeric value.",6,{"inputs":[{"name":"self"}],"output":{"name":"vector2d"}}],[11,"from_untyped","","Tag a unitless value with units.",6,{"inputs":[{"name":"vector2d"}],"output":{"name":"self"}}],[11,"to_array","","",6,null],[11,"angle_from_x_axis","","Returns the angle between this vector and the x axis between -PI and PI.",6,{"inputs":[{"name":"self"}],"output":{"name":"angle"}}],[11,"dot","","Dot product.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"t"}}],[11,"cross","","Returns the norm of the cross product [self.x, self.y, 0] x [other.x, other.y, 0]..",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"t"}}],[11,"normalize","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"square_length","","",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"length","","",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"lerp","","Linearly interpolate between this vector and another vector.",6,{"inputs":[{"name":"self"},{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"add","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"add_assign","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"sub_assign","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"sub","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"neg","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"min","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"max","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"mul","","",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"div","","",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"mul_assign","","",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"div_assign","","",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"mul","","",6,{"inputs":[{"name":"self"},{"name":"typedscale"}],"output":{"name":"typedvector2d"}}],[11,"div","","",6,{"inputs":[{"name":"self"},{"name":"typedscale"}],"output":{"name":"typedvector2d"}}],[11,"round","","Rounds each component to the nearest integer value.",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"ceil","","Rounds each component to the smallest integer equal or greater than the original value.",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"floor","","Rounds each component to the biggest integer equal or lower than the original value.",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"cast","","Cast from one numeric representation to another, preserving the units.",6,{"inputs":[{"name":"self"}],"output":{"generics":["typedvector2d"],"name":"option"}}],[11,"to_f32","","Cast into an `f32` vector.",6,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"typedvector2d"}}],[11,"to_f64","","Cast into an `f64` vector.",6,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"typedvector2d"}}],[11,"to_usize","","Cast into an `usize` vector, truncating decimals if any.",6,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"typedvector2d"}}],[11,"to_i32","","Cast into an i32 vector, truncating decimals if any.",6,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"typedvector2d"}}],[11,"to_i64","","Cast into an i64 vector, truncating decimals if any.",6,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"typedvector2d"}}],[11,"approx_epsilon","","",6,{"inputs":[],"output":{"name":"self"}}],[11,"approx_eq","","",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",6,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"into","","",6,null],[11,"from","","",6,null],[11,"abs","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"deserialize","","",7,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",7,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"zero","","Constructor, setting all components to zero.",7,{"inputs":[],"output":{"name":"self"}}],[11,"to_array_4d","","",7,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructor taking scalar values directly.",7,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"self"}}],[11,"from_lengths","","Constructor taking properly typed Lengths instead of scalar values.",7,{"inputs":[{"name":"length"},{"name":"length"},{"name":"length"}],"output":{"name":"typedvector3d"}}],[11,"to_point","","Cast this vector into a point.",7,{"inputs":[{"name":"self"}],"output":{"name":"typedpoint3d"}}],[11,"xy","","Returns a 2d vector using this vector's x and y coordinates",7,{"inputs":[{"name":"self"}],"output":{"name":"typedvector2d"}}],[11,"xz","","Returns a 2d vector using this vector's x and z coordinates",7,{"inputs":[{"name":"self"}],"output":{"name":"typedvector2d"}}],[11,"yz","","Returns a 2d vector using this vector's x and z coordinates",7,{"inputs":[{"name":"self"}],"output":{"name":"typedvector2d"}}],[11,"x_typed","","Returns self.x as a Length carrying the unit.",7,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"y_typed","","Returns self.y as a Length carrying the unit.",7,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"z_typed","","Returns self.z as a Length carrying the unit.",7,{"inputs":[{"name":"self"}],"output":{"name":"length"}}],[11,"to_array","","",7,null],[11,"to_untyped","","Drop the units, preserving only the numeric value.",7,{"inputs":[{"name":"self"}],"output":{"name":"vector3d"}}],[11,"from_untyped","","Tag a unitless value with units.",7,{"inputs":[{"name":"vector3d"}],"output":{"name":"self"}}],[11,"to_2d","","Convert into a 2d vector.",7,{"inputs":[{"name":"self"}],"output":{"name":"typedvector2d"}}],[11,"dot","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"t"}}],[11,"cross","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"normalize","","",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"square_length","","",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"length","","",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"lerp","","Linearly interpolate between this vector and another vector.",7,{"inputs":[{"name":"self"},{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"add_assign","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"sub_assign","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"neg","","",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"mul","","",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"div","","",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"mul_assign","","",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"div_assign","","",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"min","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"max","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"round","","Rounds each component to the nearest integer value.",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"ceil","","Rounds each component to the smallest integer equal or greater than the original value.",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"floor","","Rounds each component to the biggest integer equal or lower than the original value.",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"cast","","Cast from one numeric representation to another, preserving the units.",7,{"inputs":[{"name":"self"}],"output":{"generics":["typedvector3d"],"name":"option"}}],[11,"to_f32","","Cast into an `f32` vector.",7,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"typedvector3d"}}],[11,"to_f64","","Cast into an `f64` vector.",7,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"typedvector3d"}}],[11,"to_usize","","Cast into an `usize` vector, truncating decimals if any.",7,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"typedvector3d"}}],[11,"to_i32","","Cast into an `i32` vector, truncating decimals if any.",7,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"typedvector3d"}}],[11,"to_i64","","Cast into an `i64` vector, truncating decimals if any.",7,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"typedvector3d"}}],[11,"approx_epsilon","","",7,{"inputs":[],"output":{"name":"self"}}],[11,"approx_eq","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",7,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"into","","",7,null],[11,"from","","",7,null],[11,"abs","","",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[6,"Transform2D","","The default 2d transform type with no units.",null,null],[6,"Transform3D","","The default 4d transform type with no units.",null,null],[6,"Point2D","","Default 2d point type with no unit.",null,null],[6,"Point3D","","Default 3d point type with no unit.",null,null],[6,"Vector2D","","Default 2d vector type with no unit.",null,null],[6,"Vector3D","","Default 3d vector type with no unit.",null,null],[6,"Rect","","The default rectangle type with no unit.",null,null],[6,"Rotation2D","","The default 2d rotation type with no units.",null,null],[6,"Rotation3D","","The default 3d rotation type with no units.",null,null],[6,"SideOffsets2D","","The default side offset type with no unit.",null,null],[6,"Size2D","","Default 2d size type with no unit.",null,null],[6,"Matrix2D","","Temporary alias to facilitate the transition to the new naming scheme",null,null],[6,"TypedMatrix2D","","Temporary alias to facilitate the transition to the new naming scheme",null,null],[6,"Matrix4D","","Temporary alias to facilitate the transition to the new naming scheme",null,null],[6,"TypedMatrix4D","","Temporary alias to facilitate the transition to the new naming scheme",null,null],[6,"ScaleFactor","","Temporary alias to facilitate the transition to the new naming scheme",null,null],[8,"Trig","","Trait for basic trigonometry functions, so they can be used on generic numeric types",null,null],[10,"sin","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fast_atan2","","",20,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"degrees_to_radians","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"radians_to_degrees","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"unknownunit"}}]],"paths":[[3,"Length"],[3,"TypedScale"],[3,"TypedTransform2D"],[3,"TypedTransform3D"],[3,"TypedPoint2D"],[3,"TypedPoint3D"],[3,"TypedVector2D"],[3,"TypedVector3D"],[3,"TypedRect"],[3,"Angle"],[3,"TypedRotation2D"],[3,"TypedRotation3D"],[3,"TypedSideOffsets2D"],[3,"TypedSize2D"],[8,"ApproxEq"],[8,"Zero"],[8,"One"],[8,"Round"],[8,"Floor"],[8,"Ceil"],[8,"Trig"],[3,"UnknownUnit"]]};
searchIndex["freetype"] = {"doc":"","items":[[3,"FT_Error","freetype","A wrapper over FT_Error so we can add convenience methods on it.",null,null],[12,"0","","",0,null],[0,"freetype","","",null,null],[3,"__BindgenUnionField","freetype::freetype","",null,null],[3,"FT_MemoryRec_","","",null,null],[12,"user","","",1,null],[12,"alloc","","",1,null],[12,"free","","",1,null],[12,"realloc","","",1,null],[3,"FT_StreamRec_","","",null,null],[12,"base","","",2,null],[12,"size","","",2,null],[12,"pos","","",2,null],[12,"descriptor","","",2,null],[12,"pathname","","",2,null],[12,"read","","",2,null],[12,"close","","",2,null],[12,"memory","","",2,null],[12,"cursor","","",2,null],[12,"limit","","",2,null],[3,"FT_StreamDesc_","","",null,null],[12,"value","","",3,null],[12,"pointer","","",3,null],[12,"bindgen_union_field","","",3,null],[3,"FT_Vector_","","",null,null],[12,"x","","",4,null],[12,"y","","",4,null],[3,"FT_BBox_","","",null,null],[12,"xMin","","",5,null],[12,"yMin","","",5,null],[12,"xMax","","",5,null],[12,"yMax","","",5,null],[3,"FT_Bitmap_","","",null,null],[12,"rows","","",6,null],[12,"width","","",6,null],[12,"pitch","","",6,null],[12,"buffer","","",6,null],[12,"num_grays","","",6,null],[12,"pixel_mode","","",6,null],[12,"palette_mode","","",6,null],[12,"palette","","",6,null],[3,"FT_Outline_","","",null,null],[12,"n_contours","","",7,null],[12,"n_points","","",7,null],[12,"points","","",7,null],[12,"tags","","",7,null],[12,"contours","","",7,null],[12,"flags","","",7,null],[3,"FT_Outline_Funcs_","","",null,null],[12,"move_to","","",8,null],[12,"line_to","","",8,null],[12,"conic_to","","",8,null],[12,"cubic_to","","",8,null],[12,"shift","","",8,null],[12,"delta","","",8,null],[3,"FT_RasterRec_","","",null,null],[3,"FT_Span_","","",null,null],[12,"x","","",9,null],[12,"len","","",9,null],[12,"coverage","","",9,null],[3,"FT_Raster_Params_","","",null,null],[12,"target","","",10,null],[12,"source","","",10,null],[12,"flags","","",10,null],[12,"gray_spans","","",10,null],[12,"black_spans","","",10,null],[12,"bit_test","","",10,null],[12,"bit_set","","",10,null],[12,"user","","",10,null],[12,"clip_box","","",10,null],[3,"FT_Raster_Funcs_","","",null,null],[12,"glyph_format","","",11,null],[12,"raster_new","","",11,null],[12,"raster_reset","","",11,null],[12,"raster_set_mode","","",11,null],[12,"raster_render","","",11,null],[12,"raster_done","","",11,null],[3,"FT_UnitVector_","","",null,null],[12,"x","","",12,null],[12,"y","","",12,null],[3,"FT_Matrix_","","",null,null],[12,"xx","","",13,null],[12,"xy","","",13,null],[12,"yx","","",13,null],[12,"yy","","",13,null],[3,"FT_Data_","","",null,null],[12,"pointer","","",14,null],[12,"length","","",14,null],[3,"FT_Generic_","","",null,null],[12,"data","","",15,null],[12,"finalizer","","",15,null],[3,"FT_ListNodeRec_","","",null,null],[12,"prev","","",16,null],[12,"next","","",16,null],[12,"data","","",16,null],[3,"FT_ListRec_","","",null,null],[12,"head","","",17,null],[12,"tail","","",17,null],[3,"FT_Glyph_Metrics_","","",null,null],[12,"width","","",18,null],[12,"height","","",18,null],[12,"horiBearingX","","",18,null],[12,"horiBearingY","","",18,null],[12,"horiAdvance","","",18,null],[12,"vertBearingX","","",18,null],[12,"vertBearingY","","",18,null],[12,"vertAdvance","","",18,null],[3,"FT_Bitmap_Size_","","",null,null],[12,"height","","",19,null],[12,"width","","",19,null],[12,"size","","",19,null],[12,"x_ppem","","",19,null],[12,"y_ppem","","",19,null],[3,"FT_LibraryRec_","","",null,null],[3,"FT_ModuleRec_","","",null,null],[3,"FT_DriverRec_","","",null,null],[3,"FT_RendererRec_","","",null,null],[3,"FT_FaceRec_","","",null,null],[12,"num_faces","","",20,null],[12,"face_index","","",20,null],[12,"face_flags","","",20,null],[12,"style_flags","","",20,null],[12,"num_glyphs","","",20,null],[12,"family_name","","",20,null],[12,"style_name","","",20,null],[12,"num_fixed_sizes","","",20,null],[12,"available_sizes","","",20,null],[12,"num_charmaps","","",20,null],[12,"charmaps","","",20,null],[12,"generic","","",20,null],[12,"bbox","","",20,null],[12,"units_per_EM","","",20,null],[12,"ascender","","",20,null],[12,"descender","","",20,null],[12,"height","","",20,null],[12,"max_advance_width","","",20,null],[12,"max_advance_height","","",20,null],[12,"underline_position","","",20,null],[12,"underline_thickness","","",20,null],[12,"glyph","","",20,null],[12,"size","","",20,null],[12,"charmap","","",20,null],[12,"driver","","",20,null],[12,"memory","","",20,null],[12,"stream","","",20,null],[12,"sizes_list","","",20,null],[12,"autohint","","",20,null],[12,"extensions","","",20,null],[12,"internal","","",20,null],[3,"FT_SizeRec_","","",null,null],[12,"face","","",21,null],[12,"generic","","",21,null],[12,"metrics","","",21,null],[12,"internal","","",21,null],[3,"FT_GlyphSlotRec_","","",null,null],[12,"library","","",22,null],[12,"face","","",22,null],[12,"next","","",22,null],[12,"reserved","","",22,null],[12,"generic","","",22,null],[12,"metrics","","",22,null],[12,"linearHoriAdvance","","",22,null],[12,"linearVertAdvance","","",22,null],[12,"advance","","",22,null],[12,"format","","",22,null],[12,"bitmap","","",22,null],[12,"bitmap_left","","",22,null],[12,"bitmap_top","","",22,null],[12,"outline","","",22,null],[12,"num_subglyphs","","",22,null],[12,"subglyphs","","",22,null],[12,"control_data","","",22,null],[12,"control_len","","",22,null],[12,"lsb_delta","","",22,null],[12,"rsb_delta","","",22,null],[12,"other","","",22,null],[12,"internal","","",22,null],[3,"FT_CharMapRec_","","",null,null],[12,"face","","",23,null],[12,"encoding","","",23,null],[12,"platform_id","","",23,null],[12,"encoding_id","","",23,null],[3,"FT_Face_InternalRec_","","",null,null],[3,"FT_Size_InternalRec_","","",null,null],[3,"FT_Size_Metrics_","","",null,null],[12,"x_ppem","","",24,null],[12,"y_ppem","","",24,null],[12,"x_scale","","",24,null],[12,"y_scale","","",24,null],[12,"ascender","","",24,null],[12,"descender","","",24,null],[12,"height","","",24,null],[12,"max_advance","","",24,null],[3,"FT_SubGlyphRec_","","",null,null],[3,"FT_Slot_InternalRec_","","",null,null],[3,"FT_Parameter_","","",null,null],[12,"tag","","",25,null],[12,"data","","",25,null],[3,"FT_Open_Args_","","",null,null],[12,"flags","","",26,null],[12,"memory_base","","",26,null],[12,"memory_size","","",26,null],[12,"pathname","","",26,null],[12,"stream","","",26,null],[12,"driver","","",26,null],[12,"num_params","","",26,null],[12,"params","","",26,null],[3,"FT_Size_RequestRec_","","",null,null],[12,"type_","","",27,null],[12,"width","","",27,null],[12,"height","","",27,null],[12,"horiResolution","","",27,null],[12,"vertResolution","","",27,null],[3,"FT_Module_Class_","","",null,null],[12,"module_flags","","",28,null],[12,"module_size","","",28,null],[12,"module_name","","",28,null],[12,"module_version","","",28,null],[12,"module_requires","","",28,null],[12,"module_interface","","",28,null],[12,"module_init","","",28,null],[12,"module_done","","",28,null],[12,"get_interface","","",28,null],[4,"FT_Pixel_Mode_","","",null,null],[13,"FT_PIXEL_MODE_NONE","","",29,null],[13,"FT_PIXEL_MODE_MONO","","",29,null],[13,"FT_PIXEL_MODE_GRAY","","",29,null],[13,"FT_PIXEL_MODE_GRAY2","","",29,null],[13,"FT_PIXEL_MODE_GRAY4","","",29,null],[13,"FT_PIXEL_MODE_LCD","","",29,null],[13,"FT_PIXEL_MODE_LCD_V","","",29,null],[13,"FT_PIXEL_MODE_BGRA","","",29,null],[13,"FT_PIXEL_MODE_MAX","","",29,null],[4,"FT_Glyph_Format_","","",null,null],[13,"FT_GLYPH_FORMAT_NONE","","",30,null],[13,"FT_GLYPH_FORMAT_COMPOSITE","","",30,null],[13,"FT_GLYPH_FORMAT_BITMAP","","",30,null],[13,"FT_GLYPH_FORMAT_OUTLINE","","",30,null],[13,"FT_GLYPH_FORMAT_PLOTTER","","",30,null],[4,"_bindgen_ty_1","","",null,null],[13,"FT_Mod_Err_Base","","",31,null],[13,"FT_Mod_Err_Max","","",31,null],[4,"_bindgen_ty_2","","",null,null],[13,"FT_Err_Ok","","",32,null],[13,"FT_Err_Cannot_Open_Resource","","",32,null],[13,"FT_Err_Unknown_File_Format","","",32,null],[13,"FT_Err_Invalid_File_Format","","",32,null],[13,"FT_Err_Invalid_Version","","",32,null],[13,"FT_Err_Lower_Module_Version","","",32,null],[13,"FT_Err_Invalid_Argument","","",32,null],[13,"FT_Err_Unimplemented_Feature","","",32,null],[13,"FT_Err_Invalid_Table","","",32,null],[13,"FT_Err_Invalid_Offset","","",32,null],[13,"FT_Err_Array_Too_Large","","",32,null],[13,"FT_Err_Missing_Module","","",32,null],[13,"FT_Err_Missing_Property","","",32,null],[13,"FT_Err_Invalid_Glyph_Index","","",32,null],[13,"FT_Err_Invalid_Character_Code","","",32,null],[13,"FT_Err_Invalid_Glyph_Format","","",32,null],[13,"FT_Err_Cannot_Render_Glyph","","",32,null],[13,"FT_Err_Invalid_Outline","","",32,null],[13,"FT_Err_Invalid_Composite","","",32,null],[13,"FT_Err_Too_Many_Hints","","",32,null],[13,"FT_Err_Invalid_Pixel_Size","","",32,null],[13,"FT_Err_Invalid_Handle","","",32,null],[13,"FT_Err_Invalid_Library_Handle","","",32,null],[13,"FT_Err_Invalid_Driver_Handle","","",32,null],[13,"FT_Err_Invalid_Face_Handle","","",32,null],[13,"FT_Err_Invalid_Size_Handle","","",32,null],[13,"FT_Err_Invalid_Slot_Handle","","",32,null],[13,"FT_Err_Invalid_CharMap_Handle","","",32,null],[13,"FT_Err_Invalid_Cache_Handle","","",32,null],[13,"FT_Err_Invalid_Stream_Handle","","",32,null],[13,"FT_Err_Too_Many_Drivers","","",32,null],[13,"FT_Err_Too_Many_Extensions","","",32,null],[13,"FT_Err_Out_Of_Memory","","",32,null],[13,"FT_Err_Unlisted_Object","","",32,null],[13,"FT_Err_Cannot_Open_Stream","","",32,null],[13,"FT_Err_Invalid_Stream_Seek","","",32,null],[13,"FT_Err_Invalid_Stream_Skip","","",32,null],[13,"FT_Err_Invalid_Stream_Read","","",32,null],[13,"FT_Err_Invalid_Stream_Operation","","",32,null],[13,"FT_Err_Invalid_Frame_Operation","","",32,null],[13,"FT_Err_Nested_Frame_Access","","",32,null],[13,"FT_Err_Invalid_Frame_Read","","",32,null],[13,"FT_Err_Raster_Uninitialized","","",32,null],[13,"FT_Err_Raster_Corrupted","","",32,null],[13,"FT_Err_Raster_Overflow","","",32,null],[13,"FT_Err_Raster_Negative_Height","","",32,null],[13,"FT_Err_Too_Many_Caches","","",32,null],[13,"FT_Err_Invalid_Opcode","","",32,null],[13,"FT_Err_Too_Few_Arguments","","",32,null],[13,"FT_Err_Stack_Overflow","","",32,null],[13,"FT_Err_Code_Overflow","","",32,null],[13,"FT_Err_Bad_Argument","","",32,null],[13,"FT_Err_Divide_By_Zero","","",32,null],[13,"FT_Err_Invalid_Reference","","",32,null],[13,"FT_Err_Debug_OpCode","","",32,null],[13,"FT_Err_ENDF_In_Exec_Stream","","",32,null],[13,"FT_Err_Nested_DEFS","","",32,null],[13,"FT_Err_Invalid_CodeRange","","",32,null],[13,"FT_Err_Execution_Too_Long","","",32,null],[13,"FT_Err_Too_Many_Function_Defs","","",32,null],[13,"FT_Err_Too_Many_Instruction_Defs","","",32,null],[13,"FT_Err_Table_Missing","","",32,null],[13,"FT_Err_Horiz_Header_Missing","","",32,null],[13,"FT_Err_Locations_Missing","","",32,null],[13,"FT_Err_Name_Table_Missing","","",32,null],[13,"FT_Err_CMap_Table_Missing","","",32,null],[13,"FT_Err_Hmtx_Table_Missing","","",32,null],[13,"FT_Err_Post_Table_Missing","","",32,null],[13,"FT_Err_Invalid_Horiz_Metrics","","",32,null],[13,"FT_Err_Invalid_CharMap_Format","","",32,null],[13,"FT_Err_Invalid_PPem","","",32,null],[13,"FT_Err_Invalid_Vert_Metrics","","",32,null],[13,"FT_Err_Could_Not_Find_Context","","",32,null],[13,"FT_Err_Invalid_Post_Table_Format","","",32,null],[13,"FT_Err_Invalid_Post_Table","","",32,null],[13,"FT_Err_Syntax_Error","","",32,null],[13,"FT_Err_Stack_Underflow","","",32,null],[13,"FT_Err_Ignore","","",32,null],[13,"FT_Err_No_Unicode_Glyph_Name","","",32,null],[13,"FT_Err_Glyph_Too_Big","","",32,null],[13,"FT_Err_Missing_Startfont_Field","","",32,null],[13,"FT_Err_Missing_Font_Field","","",32,null],[13,"FT_Err_Missing_Size_Field","","",32,null],[13,"FT_Err_Missing_Fontboundingbox_Field","","",32,null],[13,"FT_Err_Missing_Chars_Field","","",32,null],[13,"FT_Err_Missing_Startchar_Field","","",32,null],[13,"FT_Err_Missing_Encoding_Field","","",32,null],[13,"FT_Err_Missing_Bbx_Field","","",32,null],[13,"FT_Err_Bbx_Too_Big","","",32,null],[13,"FT_Err_Corrupted_Font_Header","","",32,null],[13,"FT_Err_Corrupted_Font_Glyphs","","",32,null],[13,"FT_Err_Max","","",32,null],[4,"FT_Encoding_","","",null,null],[13,"FT_ENCODING_NONE","","",33,null],[13,"FT_ENCODING_MS_SYMBOL","","",33,null],[13,"FT_ENCODING_UNICODE","","",33,null],[13,"FT_ENCODING_SJIS","","",33,null],[13,"FT_ENCODING_GB2312","","",33,null],[13,"FT_ENCODING_BIG5","","",33,null],[13,"FT_ENCODING_WANSUNG","","",33,null],[13,"FT_ENCODING_JOHAB","","",33,null],[13,"FT_ENCODING_ADOBE_STANDARD","","",33,null],[13,"FT_ENCODING_ADOBE_EXPERT","","",33,null],[13,"FT_ENCODING_ADOBE_CUSTOM","","",33,null],[13,"FT_ENCODING_ADOBE_LATIN_1","","",33,null],[13,"FT_ENCODING_OLD_LATIN_2","","",33,null],[13,"FT_ENCODING_APPLE_ROMAN","","",33,null],[4,"FT_Size_Request_Type_","","",null,null],[13,"FT_SIZE_REQUEST_TYPE_NOMINAL","","",34,null],[13,"FT_SIZE_REQUEST_TYPE_REAL_DIM","","",34,null],[13,"FT_SIZE_REQUEST_TYPE_BBOX","","",34,null],[13,"FT_SIZE_REQUEST_TYPE_CELL","","",34,null],[13,"FT_SIZE_REQUEST_TYPE_SCALES","","",34,null],[13,"FT_SIZE_REQUEST_TYPE_MAX","","",34,null],[4,"FT_Render_Mode_","","",null,null],[13,"FT_RENDER_MODE_NORMAL","","",35,null],[13,"FT_RENDER_MODE_LIGHT","","",35,null],[13,"FT_RENDER_MODE_MONO","","",35,null],[13,"FT_RENDER_MODE_LCD","","",35,null],[13,"FT_RENDER_MODE_LCD_V","","",35,null],[13,"FT_RENDER_MODE_MAX","","",35,null],[4,"FT_Kerning_Mode_","","",null,null],[13,"FT_KERNING_DEFAULT","","",36,null],[13,"FT_KERNING_UNFITTED","","",36,null],[13,"FT_KERNING_UNSCALED","","",36,null],[4,"FT_LcdFilter_","","",null,null],[13,"FT_LCD_FILTER_NONE","","",37,null],[13,"FT_LCD_FILTER_DEFAULT","","",37,null],[13,"FT_LCD_FILTER_LIGHT","","",37,null],[13,"FT_LCD_FILTER_LEGACY1","","",37,null],[13,"FT_LCD_FILTER_LEGACY","","",37,null],[13,"FT_LCD_FILTER_MAX","","",37,null],[4,"FT_Sfnt_Tag_","","",null,null],[13,"FT_SFNT_HEAD","","",38,null],[13,"FT_SFNT_MAXP","","",38,null],[13,"FT_SFNT_OS2","","",38,null],[13,"FT_SFNT_HHEA","","",38,null],[13,"FT_SFNT_VHEA","","",38,null],[13,"FT_SFNT_POST","","",38,null],[13,"FT_SFNT_PCLT","","",38,null],[13,"FT_SFNT_MAX","","",38,null],[4,"FT_TrueTypeEngineType_","","",null,null],[13,"FT_TRUETYPE_ENGINE_TYPE_NONE","","",39,null],[13,"FT_TRUETYPE_ENGINE_TYPE_UNPATENTED","","",39,null],[13,"FT_TRUETYPE_ENGINE_TYPE_PATENTED","","",39,null],[4,"FT_Orientation_","","",null,null],[13,"FT_ORIENTATION_TRUETYPE","","",40,null],[13,"FT_ORIENTATION_POSTSCRIPT","","",40,null],[13,"FT_ORIENTATION_NONE","","",40,null],[5,"FT_Init_FreeType","","",null,null],[5,"FT_Done_FreeType","","",null,null],[5,"FT_New_Face","","",null,null],[5,"FT_New_Memory_Face","","",null,null],[5,"FT_Open_Face","","",null,null],[5,"FT_Attach_File","","",null,null],[5,"FT_Attach_Stream","","",null,null],[5,"FT_Reference_Face","","",null,null],[5,"FT_Done_Face","","",null,null],[5,"FT_Select_Size","","",null,null],[5,"FT_Request_Size","","",null,null],[5,"FT_Set_Char_Size","","",null,null],[5,"FT_Set_Pixel_Sizes","","",null,null],[5,"FT_Load_Glyph","","",null,null],[5,"FT_Load_Char","","",null,null],[5,"FT_Set_Transform","","",null,null],[5,"FT_Render_Glyph","","",null,null],[5,"FT_Get_Kerning","","",null,null],[5,"FT_Get_Track_Kerning","","",null,null],[5,"FT_Get_Glyph_Name","","",null,null],[5,"FT_Get_Postscript_Name","","",null,null],[5,"FT_Select_Charmap","","",null,null],[5,"FT_Set_Charmap","","",null,null],[5,"FT_Get_Charmap_Index","","",null,null],[5,"FT_Get_Char_Index","","",null,null],[5,"FT_Get_First_Char","","",null,null],[5,"FT_Get_Next_Char","","",null,null],[5,"FT_Get_Name_Index","","",null,null],[5,"FT_Get_SubGlyph_Info","","",null,null],[5,"FT_Get_FSType_Flags","","",null,null],[5,"FT_Face_GetCharVariantIndex","","",null,null],[5,"FT_Face_GetCharVariantIsDefault","","",null,null],[5,"FT_Face_GetVariantSelectors","","",null,null],[5,"FT_Face_GetVariantsOfChar","","",null,null],[5,"FT_Face_GetCharsOfVariant","","",null,null],[5,"FT_MulDiv","","",null,null],[5,"FT_MulFix","","",null,null],[5,"FT_DivFix","","",null,null],[5,"FT_RoundFix","","",null,null],[5,"FT_CeilFix","","",null,null],[5,"FT_FloorFix","","",null,null],[5,"FT_Vector_Transform","","",null,null],[5,"FT_Library_Version","","",null,null],[5,"FT_Face_CheckTrueTypePatents","","",null,null],[5,"FT_Face_SetUnpatentedHinting","","",null,null],[5,"FT_Library_SetLcdFilter","","",null,null],[5,"FT_Library_SetLcdFilterWeights","","",null,null],[5,"FT_Get_Sfnt_Table","","",null,null],[5,"FT_Load_Sfnt_Table","","",null,null],[5,"FT_Sfnt_Table_Info","","",null,null],[5,"FT_Get_CMap_Language_ID","","",null,null],[5,"FT_Get_CMap_Format","","",null,null],[5,"FT_Add_Module","","",null,null],[5,"FT_Get_Module","","",null,null],[5,"FT_Remove_Module","","",null,null],[5,"FT_Property_Set","","",null,null],[5,"FT_Property_Get","","",null,null],[5,"FT_Reference_Library","","",null,null],[5,"FT_New_Library","","",null,null],[5,"FT_Done_Library","","",null,null],[5,"FT_Set_Debug_Hook","","",null,null],[5,"FT_Add_Default_Modules","","",null,null],[5,"FT_Get_TrueType_Engine_Type","","",null,null],[5,"FT_Outline_Decompose","","",null,null],[5,"FT_Outline_New","","",null,null],[5,"FT_Outline_New_Internal","","",null,null],[5,"FT_Outline_Done","","",null,null],[5,"FT_Outline_Done_Internal","","",null,null],[5,"FT_Outline_Check","","",null,null],[5,"FT_Outline_Get_CBox","","",null,null],[5,"FT_Outline_Translate","","",null,null],[5,"FT_Outline_Copy","","",null,null],[5,"FT_Outline_Transform","","",null,null],[5,"FT_Outline_Embolden","","",null,null],[5,"FT_Outline_EmboldenXY","","",null,null],[5,"FT_Outline_Reverse","","",null,null],[5,"FT_Outline_Get_Bitmap","","",null,null],[5,"FT_Outline_Render","","",null,null],[5,"FT_Outline_Get_Orientation","","",null,null],[6,"FT_Int16","","",null,null],[6,"FT_UInt16","","",null,null],[6,"FT_Int32","","",null,null],[6,"FT_UInt32","","",null,null],[6,"FT_Int64","","",null,null],[6,"FT_UInt64","","",null,null],[6,"FT_Fast","","",null,null],[6,"FT_UFast","","",null,null],[6,"FT_Memory","","",null,null],[6,"FT_Alloc_Func","","",null,null],[6,"FT_Free_Func","","",null,null],[6,"FT_Realloc_Func","","",null,null],[6,"FT_Stream","","",null,null],[6,"FT_StreamDesc","","",null,null],[6,"FT_Stream_IoFunc","","",null,null],[6,"FT_Stream_CloseFunc","","",null,null],[6,"FT_StreamRec","","",null,null],[6,"FT_Pos","","",null,null],[6,"FT_Vector","","",null,null],[6,"FT_BBox","","",null,null],[6,"FT_Bitmap","","",null,null],[6,"FT_Outline","","",null,null],[6,"FT_Outline_MoveToFunc","","",null,null],[6,"FT_Outline_LineToFunc","","",null,null],[6,"FT_Outline_ConicToFunc","","",null,null],[6,"FT_Outline_CubicToFunc","","",null,null],[6,"FT_Outline_Funcs","","",null,null],[6,"FT_Raster","","",null,null],[6,"FT_Span","","",null,null],[6,"FT_SpanFunc","","",null,null],[6,"FT_Raster_BitTest_Func","","",null,null],[6,"FT_Raster_BitSet_Func","","",null,null],[6,"FT_Raster_Params","","",null,null],[6,"FT_Raster_NewFunc","","",null,null],[6,"FT_Raster_DoneFunc","","",null,null],[6,"FT_Raster_ResetFunc","","",null,null],[6,"FT_Raster_SetModeFunc","","",null,null],[6,"FT_Raster_RenderFunc","","",null,null],[6,"FT_Raster_Funcs","","",null,null],[6,"FT_Bool","","",null,null],[6,"FT_FWord","","",null,null],[6,"FT_UFWord","","",null,null],[6,"FT_Char","","",null,null],[6,"FT_Byte","","",null,null],[6,"FT_Bytes","","",null,null],[6,"FT_Tag","","",null,null],[6,"FT_String","","",null,null],[6,"FT_Short","","",null,null],[6,"FT_UShort","","",null,null],[6,"FT_Int","","",null,null],[6,"FT_UInt","","",null,null],[6,"FT_Long","","",null,null],[6,"FT_ULong","","",null,null],[6,"FT_F2Dot14","","",null,null],[6,"FT_F26Dot6","","",null,null],[6,"FT_Fixed","","",null,null],[6,"FT_Pointer","","",null,null],[6,"FT_Offset","","",null,null],[6,"FT_PtrDist","","",null,null],[6,"FT_UnitVector","","",null,null],[6,"FT_Matrix","","",null,null],[6,"FT_Data","","",null,null],[6,"FT_Generic_Finalizer","","",null,null],[6,"FT_Generic","","",null,null],[6,"FT_ListNode","","",null,null],[6,"FT_List","","",null,null],[6,"FT_ListNodeRec","","",null,null],[6,"FT_ListRec","","",null,null],[6,"FT_Glyph_Metrics","","",null,null],[6,"FT_Bitmap_Size","","",null,null],[6,"FT_Library","","",null,null],[6,"FT_Module","","",null,null],[6,"FT_Driver","","",null,null],[6,"FT_Renderer","","",null,null],[6,"FT_Face","","",null,null],[6,"FT_Size","","",null,null],[6,"FT_GlyphSlot","","",null,null],[6,"FT_CharMap","","",null,null],[6,"FT_CharMapRec","","",null,null],[6,"FT_Face_Internal","","",null,null],[6,"FT_FaceRec","","",null,null],[6,"FT_Size_Internal","","",null,null],[6,"FT_Size_Metrics","","",null,null],[6,"FT_SizeRec","","",null,null],[6,"FT_SubGlyph","","",null,null],[6,"FT_Slot_Internal","","",null,null],[6,"FT_GlyphSlotRec","","",null,null],[6,"FT_Parameter","","",null,null],[6,"FT_Open_Args","","",null,null],[6,"FT_Size_RequestRec","","",null,null],[6,"FT_Size_Request","","",null,null],[6,"FT_Module_Interface","","",null,null],[6,"FT_Module_Constructor","","",null,null],[6,"FT_Module_Destructor","","",null,null],[6,"FT_Module_Requester","","",null,null],[6,"FT_Module_Class","","",null,null],[6,"FT_DebugHook_Func","","",null,null],[17,"FT_RENDER_POOL_SIZE","","",null,null],[17,"FT_MAX_MODULES","","",null,null],[17,"FT_OUTLINE_NONE","","",null,null],[17,"FT_OUTLINE_OWNER","","",null,null],[17,"FT_OUTLINE_EVEN_ODD_FILL","","",null,null],[17,"FT_OUTLINE_REVERSE_FILL","","",null,null],[17,"FT_OUTLINE_IGNORE_DROPOUTS","","",null,null],[17,"FT_OUTLINE_SMART_DROPOUTS","","",null,null],[17,"FT_OUTLINE_INCLUDE_STUBS","","",null,null],[17,"FT_OUTLINE_HIGH_PRECISION","","",null,null],[17,"FT_OUTLINE_SINGLE_PASS","","",null,null],[17,"FT_CURVE_TAG_ON","","",null,null],[17,"FT_CURVE_TAG_CONIC","","",null,null],[17,"FT_CURVE_TAG_CUBIC","","",null,null],[17,"FT_CURVE_TAG_HAS_SCANMODE","","",null,null],[17,"FT_CURVE_TAG_TOUCH_X","","",null,null],[17,"FT_CURVE_TAG_TOUCH_Y","","",null,null],[17,"FT_CURVE_TAG_TOUCH_BOTH","","",null,null],[17,"FT_Curve_Tag_On","","",null,null],[17,"FT_Curve_Tag_Conic","","",null,null],[17,"FT_Curve_Tag_Cubic","","",null,null],[17,"FT_Curve_Tag_Touch_X","","",null,null],[17,"FT_Curve_Tag_Touch_Y","","",null,null],[17,"FT_RASTER_FLAG_DEFAULT","","",null,null],[17,"FT_RASTER_FLAG_AA","","",null,null],[17,"FT_RASTER_FLAG_DIRECT","","",null,null],[17,"FT_RASTER_FLAG_CLIP","","",null,null],[17,"FT_ERR_BASE","","",null,null],[17,"FT_FACE_FLAG_SCALABLE","","",null,null],[17,"FT_FACE_FLAG_FIXED_SIZES","","",null,null],[17,"FT_FACE_FLAG_FIXED_WIDTH","","",null,null],[17,"FT_FACE_FLAG_SFNT","","",null,null],[17,"FT_FACE_FLAG_HORIZONTAL","","",null,null],[17,"FT_FACE_FLAG_VERTICAL","","",null,null],[17,"FT_FACE_FLAG_KERNING","","",null,null],[17,"FT_FACE_FLAG_FAST_GLYPHS","","",null,null],[17,"FT_FACE_FLAG_MULTIPLE_MASTERS","","",null,null],[17,"FT_FACE_FLAG_GLYPH_NAMES","","",null,null],[17,"FT_FACE_FLAG_EXTERNAL_STREAM","","",null,null],[17,"FT_FACE_FLAG_HINTER","","",null,null],[17,"FT_FACE_FLAG_CID_KEYED","","",null,null],[17,"FT_FACE_FLAG_TRICKY","","",null,null],[17,"FT_FACE_FLAG_COLOR","","",null,null],[17,"FT_STYLE_FLAG_ITALIC","","",null,null],[17,"FT_STYLE_FLAG_BOLD","","",null,null],[17,"FT_OPEN_MEMORY","","",null,null],[17,"FT_OPEN_STREAM","","",null,null],[17,"FT_OPEN_PATHNAME","","",null,null],[17,"FT_OPEN_DRIVER","","",null,null],[17,"FT_OPEN_PARAMS","","",null,null],[17,"FT_LOAD_DEFAULT","","",null,null],[17,"FT_LOAD_NO_SCALE","","",null,null],[17,"FT_LOAD_NO_HINTING","","",null,null],[17,"FT_LOAD_RENDER","","",null,null],[17,"FT_LOAD_NO_BITMAP","","",null,null],[17,"FT_LOAD_VERTICAL_LAYOUT","","",null,null],[17,"FT_LOAD_FORCE_AUTOHINT","","",null,null],[17,"FT_LOAD_CROP_BITMAP","","",null,null],[17,"FT_LOAD_PEDANTIC","","",null,null],[17,"FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH","","",null,null],[17,"FT_LOAD_NO_RECURSE","","",null,null],[17,"FT_LOAD_IGNORE_TRANSFORM","","",null,null],[17,"FT_LOAD_MONOCHROME","","",null,null],[17,"FT_LOAD_LINEAR_DESIGN","","",null,null],[17,"FT_LOAD_NO_AUTOHINT","","",null,null],[17,"FT_LOAD_COLOR","","",null,null],[17,"FT_LOAD_COMPUTE_METRICS","","",null,null],[17,"FT_LOAD_ADVANCE_ONLY","","",null,null],[17,"FT_LOAD_SBITS_ONLY","","",null,null],[17,"FT_SUBGLYPH_FLAG_ARGS_ARE_WORDS","","",null,null],[17,"FT_SUBGLYPH_FLAG_ARGS_ARE_XY_VALUES","","",null,null],[17,"FT_SUBGLYPH_FLAG_ROUND_XY_TO_GRID","","",null,null],[17,"FT_SUBGLYPH_FLAG_SCALE","","",null,null],[17,"FT_SUBGLYPH_FLAG_XY_SCALE","","",null,null],[17,"FT_SUBGLYPH_FLAG_2X2","","",null,null],[17,"FT_SUBGLYPH_FLAG_USE_MY_METRICS","","",null,null],[17,"FT_FSTYPE_INSTALLABLE_EMBEDDING","","",null,null],[17,"FT_FSTYPE_RESTRICTED_LICENSE_EMBEDDING","","",null,null],[17,"FT_FSTYPE_PREVIEW_AND_PRINT_EMBEDDING","","",null,null],[17,"FT_FSTYPE_EDITABLE_EMBEDDING","","",null,null],[17,"FT_FSTYPE_NO_SUBSETTING","","",null,null],[17,"FT_FSTYPE_BITMAP_EMBEDDING_ONLY","","",null,null],[17,"FT_MODULE_FONT_DRIVER","","",null,null],[17,"FT_MODULE_RENDERER","","",null,null],[17,"FT_MODULE_HINTER","","",null,null],[17,"FT_MODULE_STYLER","","",null,null],[17,"FT_MODULE_DRIVER_SCALABLE","","",null,null],[17,"FT_MODULE_DRIVER_NO_OUTLINES","","",null,null],[17,"FT_MODULE_DRIVER_HAS_HINTER","","",null,null],[17,"FT_MODULE_DRIVER_HINTS_LIGHTLY","","",null,null],[17,"FT_Mod_Err_Base","","",null,null],[17,"FT_Mod_Err_Autofit","","",null,null],[17,"FT_Mod_Err_BDF","","",null,null],[17,"FT_Mod_Err_Bzip2","","",null,null],[17,"FT_Mod_Err_Cache","","",null,null],[17,"FT_Mod_Err_CFF","","",null,null],[17,"FT_Mod_Err_CID","","",null,null],[17,"FT_Mod_Err_Gzip","","",null,null],[17,"FT_Mod_Err_LZW","","",null,null],[17,"FT_Mod_Err_OTvalid","","",null,null],[17,"FT_Mod_Err_PCF","","",null,null],[17,"FT_Mod_Err_PFR","","",null,null],[17,"FT_Mod_Err_PSaux","","",null,null],[17,"FT_Mod_Err_PShinter","","",null,null],[17,"FT_Mod_Err_PSnames","","",null,null],[17,"FT_Mod_Err_Raster","","",null,null],[17,"FT_Mod_Err_SFNT","","",null,null],[17,"FT_Mod_Err_Smooth","","",null,null],[17,"FT_Mod_Err_TrueType","","",null,null],[17,"FT_Mod_Err_Type1","","",null,null],[17,"FT_Mod_Err_Type42","","",null,null],[17,"FT_Mod_Err_Winfonts","","",null,null],[17,"FT_Mod_Err_GXvalid","","",null,null],[17,"FT_Mod_Err_Max","","",null,null],[17,"FT_Err_Ok","","",null,null],[17,"FT_Err_Cannot_Open_Resource","","",null,null],[17,"FT_Err_Unknown_File_Format","","",null,null],[17,"FT_Err_Invalid_File_Format","","",null,null],[17,"FT_Err_Invalid_Version","","",null,null],[17,"FT_Err_Lower_Module_Version","","",null,null],[17,"FT_Err_Invalid_Argument","","",null,null],[17,"FT_Err_Unimplemented_Feature","","",null,null],[17,"FT_Err_Invalid_Table","","",null,null],[17,"FT_Err_Invalid_Offset","","",null,null],[17,"FT_Err_Array_Too_Large","","",null,null],[17,"FT_Err_Missing_Module","","",null,null],[17,"FT_Err_Missing_Property","","",null,null],[17,"FT_Err_Invalid_Glyph_Index","","",null,null],[17,"FT_Err_Invalid_Character_Code","","",null,null],[17,"FT_Err_Invalid_Glyph_Format","","",null,null],[17,"FT_Err_Cannot_Render_Glyph","","",null,null],[17,"FT_Err_Invalid_Outline","","",null,null],[17,"FT_Err_Invalid_Composite","","",null,null],[17,"FT_Err_Too_Many_Hints","","",null,null],[17,"FT_Err_Invalid_Pixel_Size","","",null,null],[17,"FT_Err_Invalid_Handle","","",null,null],[17,"FT_Err_Invalid_Library_Handle","","",null,null],[17,"FT_Err_Invalid_Driver_Handle","","",null,null],[17,"FT_Err_Invalid_Face_Handle","","",null,null],[17,"FT_Err_Invalid_Size_Handle","","",null,null],[17,"FT_Err_Invalid_Slot_Handle","","",null,null],[17,"FT_Err_Invalid_CharMap_Handle","","",null,null],[17,"FT_Err_Invalid_Cache_Handle","","",null,null],[17,"FT_Err_Invalid_Stream_Handle","","",null,null],[17,"FT_Err_Too_Many_Drivers","","",null,null],[17,"FT_Err_Too_Many_Extensions","","",null,null],[17,"FT_Err_Out_Of_Memory","","",null,null],[17,"FT_Err_Unlisted_Object","","",null,null],[17,"FT_Err_Cannot_Open_Stream","","",null,null],[17,"FT_Err_Invalid_Stream_Seek","","",null,null],[17,"FT_Err_Invalid_Stream_Skip","","",null,null],[17,"FT_Err_Invalid_Stream_Read","","",null,null],[17,"FT_Err_Invalid_Stream_Operation","","",null,null],[17,"FT_Err_Invalid_Frame_Operation","","",null,null],[17,"FT_Err_Nested_Frame_Access","","",null,null],[17,"FT_Err_Invalid_Frame_Read","","",null,null],[17,"FT_Err_Raster_Uninitialized","","",null,null],[17,"FT_Err_Raster_Corrupted","","",null,null],[17,"FT_Err_Raster_Overflow","","",null,null],[17,"FT_Err_Raster_Negative_Height","","",null,null],[17,"FT_Err_Too_Many_Caches","","",null,null],[17,"FT_Err_Invalid_Opcode","","",null,null],[17,"FT_Err_Too_Few_Arguments","","",null,null],[17,"FT_Err_Stack_Overflow","","",null,null],[17,"FT_Err_Code_Overflow","","",null,null],[17,"FT_Err_Bad_Argument","","",null,null],[17,"FT_Err_Divide_By_Zero","","",null,null],[17,"FT_Err_Invalid_Reference","","",null,null],[17,"FT_Err_Debug_OpCode","","",null,null],[17,"FT_Err_ENDF_In_Exec_Stream","","",null,null],[17,"FT_Err_Nested_DEFS","","",null,null],[17,"FT_Err_Invalid_CodeRange","","",null,null],[17,"FT_Err_Execution_Too_Long","","",null,null],[17,"FT_Err_Too_Many_Function_Defs","","",null,null],[17,"FT_Err_Too_Many_Instruction_Defs","","",null,null],[17,"FT_Err_Table_Missing","","",null,null],[17,"FT_Err_Horiz_Header_Missing","","",null,null],[17,"FT_Err_Locations_Missing","","",null,null],[17,"FT_Err_Name_Table_Missing","","",null,null],[17,"FT_Err_CMap_Table_Missing","","",null,null],[17,"FT_Err_Hmtx_Table_Missing","","",null,null],[17,"FT_Err_Post_Table_Missing","","",null,null],[17,"FT_Err_Invalid_Horiz_Metrics","","",null,null],[17,"FT_Err_Invalid_CharMap_Format","","",null,null],[17,"FT_Err_Invalid_PPem","","",null,null],[17,"FT_Err_Invalid_Vert_Metrics","","",null,null],[17,"FT_Err_Could_Not_Find_Context","","",null,null],[17,"FT_Err_Invalid_Post_Table_Format","","",null,null],[17,"FT_Err_Invalid_Post_Table","","",null,null],[17,"FT_Err_Syntax_Error","","",null,null],[17,"FT_Err_Stack_Underflow","","",null,null],[17,"FT_Err_Ignore","","",null,null],[17,"FT_Err_No_Unicode_Glyph_Name","","",null,null],[17,"FT_Err_Glyph_Too_Big","","",null,null],[17,"FT_Err_Missing_Startfont_Field","","",null,null],[17,"FT_Err_Missing_Font_Field","","",null,null],[17,"FT_Err_Missing_Size_Field","","",null,null],[17,"FT_Err_Missing_Fontboundingbox_Field","","",null,null],[17,"FT_Err_Missing_Chars_Field","","",null,null],[17,"FT_Err_Missing_Startchar_Field","","",null,null],[17,"FT_Err_Missing_Encoding_Field","","",null,null],[17,"FT_Err_Missing_Bbx_Field","","",null,null],[17,"FT_Err_Bbx_Too_Big","","",null,null],[17,"FT_Err_Corrupted_Font_Header","","",null,null],[17,"FT_Err_Corrupted_Font_Glyphs","","",null,null],[17,"FT_Err_Max","","",null,null],[17,"FT_Encoding__FT_ENCODING_MS_SJIS","","",null,null],[17,"FT_Encoding__FT_ENCODING_MS_GB2312","","",null,null],[17,"FT_Encoding__FT_ENCODING_MS_BIG5","","",null,null],[17,"FT_Encoding__FT_ENCODING_MS_WANSUNG","","",null,null],[17,"FT_Encoding__FT_ENCODING_MS_JOHAB","","",null,null],[17,"FT_Orientation__FT_ORIENTATION_FILL_RIGHT","","",null,null],[17,"FT_Orientation__FT_ORIENTATION_FILL_LEFT","","",null,null],[11,"new","","",41,{"inputs":[],"output":{"name":"self"}}],[11,"as_ref","","",41,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut","","",41,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"default","","",41,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"ft_pixel_mode_"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"ft_pixel_mode_"}],"output":{"name":"bool"}}],[11,"hash","","",29,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"ft_glyph_format_"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"ft_glyph_format_"}],"output":{"name":"bool"}}],[11,"hash","","",30,null],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"ft_rasterrec_"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"_bindgen_ty_1"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"_bindgen_ty_1"}],"output":{"name":"bool"}}],[11,"hash","","",31,null],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"_bindgen_ty_2"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"_bindgen_ty_2"}],"output":{"name":"bool"}}],[11,"hash","","",32,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"ft_libraryrec_"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"ft_modulerec_"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"ft_driverrec_"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"ft_rendererrec_"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"ft_encoding_"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"ft_encoding_"}],"output":{"name":"bool"}}],[11,"hash","","",33,null],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"ft_face_internalrec_"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"ft_size_internalrec_"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"ft_subglyphrec_"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"ft_slot_internalrec_"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"ft_size_request_type_"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"ft_size_request_type_"}],"output":{"name":"bool"}}],[11,"hash","","",34,null],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"ft_render_mode_"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"ft_render_mode_"}],"output":{"name":"bool"}}],[11,"hash","","",35,null],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"ft_kerning_mode_"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"ft_kerning_mode_"}],"output":{"name":"bool"}}],[11,"hash","","",36,null],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"ft_lcdfilter_"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"ft_lcdfilter_"}],"output":{"name":"bool"}}],[11,"hash","","",37,null],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"ft_sfnt_tag_"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"ft_sfnt_tag_"}],"output":{"name":"bool"}}],[11,"hash","","",38,null],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"ft_truetypeenginetype_"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"ft_truetypeenginetype_"}],"output":{"name":"bool"}}],[11,"hash","","",39,null],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"ft_orientation_"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"ft_orientation_"}],"output":{"name":"bool"}}],[11,"hash","","",40,null],[0,"tt_os2","freetype","",null,null],[3,"TT_OS2","freetype::tt_os2","",null,null],[12,"version","","",51,null],[12,"xAvgCharWidth","","",51,null],[12,"usWeightClass","","",51,null],[12,"usWidthClass","","",51,null],[12,"fsType","","",51,null],[12,"ySubscriptXSize","","",51,null],[12,"ySubscriptYSize","","",51,null],[12,"ySubscriptXOffset","","",51,null],[12,"ySubscriptYOffset","","",51,null],[12,"ySuperscriptXSize","","",51,null],[12,"ySuperscriptYSize","","",51,null],[12,"ySuperscriptXOffset","","",51,null],[12,"ySuperscriptYOffset","","",51,null],[12,"yStrikeoutSize","","",51,null],[12,"yStrikeoutPosition","","",51,null],[12,"sFamilyClass","","",51,null],[12,"panose","","",51,null],[12,"ulUnicodeRange1","","",51,null],[12,"ulUnicodeRange2","","",51,null],[12,"ulUnicodeRange3","","",51,null],[12,"ulUnicodeRange4","","",51,null],[12,"ulCodePageRange1","","",51,null],[12,"ulCodePageRange2","","",51,null],[12,"sxHeight","","",51,null],[12,"sCapHeight","","",51,null],[12,"usDefaultChar","","",51,null],[12,"usBreakChar","","",51,null],[12,"usMaxContext","","",51,null],[11,"clone","freetype","",0,{"inputs":[{"name":"self"}],"output":{"name":"ft_error"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"ft_error"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"ft_error"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"succeeded","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[3,"FT_Error"],[3,"FT_MemoryRec_"],[3,"FT_StreamRec_"],[3,"FT_StreamDesc_"],[3,"FT_Vector_"],[3,"FT_BBox_"],[3,"FT_Bitmap_"],[3,"FT_Outline_"],[3,"FT_Outline_Funcs_"],[3,"FT_Span_"],[3,"FT_Raster_Params_"],[3,"FT_Raster_Funcs_"],[3,"FT_UnitVector_"],[3,"FT_Matrix_"],[3,"FT_Data_"],[3,"FT_Generic_"],[3,"FT_ListNodeRec_"],[3,"FT_ListRec_"],[3,"FT_Glyph_Metrics_"],[3,"FT_Bitmap_Size_"],[3,"FT_FaceRec_"],[3,"FT_SizeRec_"],[3,"FT_GlyphSlotRec_"],[3,"FT_CharMapRec_"],[3,"FT_Size_Metrics_"],[3,"FT_Parameter_"],[3,"FT_Open_Args_"],[3,"FT_Size_RequestRec_"],[3,"FT_Module_Class_"],[4,"FT_Pixel_Mode_"],[4,"FT_Glyph_Format_"],[4,"_bindgen_ty_1"],[4,"_bindgen_ty_2"],[4,"FT_Encoding_"],[4,"FT_Size_Request_Type_"],[4,"FT_Render_Mode_"],[4,"FT_Kerning_Mode_"],[4,"FT_LcdFilter_"],[4,"FT_Sfnt_Tag_"],[4,"FT_TrueTypeEngineType_"],[4,"FT_Orientation_"],[3,"__BindgenUnionField"],[3,"FT_RasterRec_"],[3,"FT_LibraryRec_"],[3,"FT_ModuleRec_"],[3,"FT_DriverRec_"],[3,"FT_RendererRec_"],[3,"FT_Face_InternalRec_"],[3,"FT_Size_InternalRec_"],[3,"FT_SubGlyphRec_"],[3,"FT_Slot_InternalRec_"],[3,"TT_OS2"]]};
searchIndex["freetype_sys"] = {"doc":"","items":[],"paths":[]};
searchIndex["fxhash"] = {"doc":"Fx Hash","items":[[3,"FxHasher","fxhash","This hashing algorithm was extracted from the Rustc compiler. This is the same hashing algoirthm used for some internal operations in FireFox. The strength of this algorithm is in hashing 8 bytes at a time on 64-bit platforms, where the FNV algorithm works on one byte at a time.",null,null],[3,"FxHasher64","","This hashing algorithm was extracted from the Rustc compiler. This is the same hashing algoirthm used for some internal operations in FireFox. The strength of this algorithm is in hashing 8 bytes at a time on any platform, where the FNV algorithm works on one byte at a time.",null,null],[3,"FxHasher32","","This hashing algorithm was extracted from the Rustc compiler. This is the same hashing algoirthm used for some internal operations in FireFox. The strength of this algorithm is in hashing 4 bytes at a time on any platform, where the FNV algorithm works on one byte at a time.",null,null],[5,"hash64","","A convenience function for when you need a quick 64-bit hash.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"hash32","","A convenience function for when you need a quick 32-bit hash.",null,{"inputs":[{"name":"t"}],"output":{"name":"u32"}}],[5,"hash","","A convenience function for when you need a quick usize hash.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[6,"FxBuildHasher","","A builder for default Fx hashers.",null,null],[6,"FxHashMap","","A `HashMap` using a default Fx hasher.",null,null],[6,"FxHashSet","","A `HashSet` using a default Fx hasher.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"fxhasher"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"fxhasher"}}],[11,"write","","",0,null],[11,"write_u8","","",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"write_u16","","",0,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"write_u32","","",0,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"write_u64","","",0,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"write_usize","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"finish","","",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"fxhasher64"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"fxhasher64"}}],[11,"write","","",1,null],[11,"write_u8","","",1,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"write_u16","","",1,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"write_u32","","",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"write_u64","","",1,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"write_usize","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"finish","","",1,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"fxhasher32"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"fxhasher32"}}],[11,"write","","",2,null],[11,"write_u8","","",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":null}],[11,"write_u16","","",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":null}],[11,"write_u32","","",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"write_u64","","",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"write_usize","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"finish","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}]],"paths":[[3,"FxHasher"],[3,"FxHasher64"],[3,"FxHasher32"]]};
searchIndex["gif"] = {"doc":"GIF en- and decoding library Build Status","items":[[3,"Frame","gif","A GIF frame",null,null],[12,"delay","","Frame delay in units of 10 ms.",0,null],[12,"dispose","","Disposal method.",0,null],[12,"transparent","","Transparent index (if available).",0,null],[12,"needs_user_input","","True if the frame needs user input do be displayed.",0,null],[12,"top","","Offset from the top border of the canvas.",0,null],[12,"left","","Offset from the left border of the canvas.",0,null],[12,"width","","Width of the frame.",0,null],[12,"height","","Height of the frame.",0,null],[12,"interlaced","","True if the image is interlaced.",0,null],[12,"palette","","Frame local color palette if available.",0,null],[12,"buffer","","Buffer containing the image data. Only indices unless configured differently.",0,null],[3,"StreamingDecoder","","GIF decoder which supports streaming",null,null],[3,"MemoryLimit","","Memory limit in bytes. `MemoryLimit::Some(0)` means that there is no memory limit set.",null,null],[12,"0","","",1,null],[3,"Reader","","GIF decoder",null,null],[3,"Decoder","","GIF decoder",null,null],[3,"Encoder","","GIF encoder.",null,null],[4,"Block","","Known GIF block types",null,null],[13,"Image","","Image block.",2,null],[13,"Extension","","Extension block.",2,null],[13,"Trailer","","Image trailer.",2,null],[4,"Extension","","Known GIF extensions",null,null],[13,"Text","","Text extension.",3,null],[13,"Control","","Control extension.",3,null],[13,"Comment","","Comment extension.",3,null],[13,"Application","","Application extension.",3,null],[4,"DisposalMethod","","Disposal method",null,null],[13,"Any","","StreamingDecoder is not required to take any action.",4,null],[13,"Keep","","Do not dispose.",4,null],[13,"Background","","Restore to background color.",4,null],[13,"Previous","","Restore to previous.",4,null],[4,"Decoded","","Indicates whether a certain object has been decoded",null,null],[13,"Nothing","","Decoded nothing.",5,null],[13,"GlobalPalette","","Global palette.",5,null],[13,"BackgroundColor","","Index of the background color in the global palette.",5,null],[13,"Trailer","","Decoded the image trailer.",5,null],[13,"BlockStart","","The start of a block.",5,null],[13,"SubBlockFinished","","Decoded a sub-block. More sub-block are available.",5,null],[13,"BlockFinished","","Decoded the last (or only) sub-block of a block.",5,null],[13,"Frame","","Decoded all information of the next frame. The returned frame does not any image data.",5,null],[13,"Data","","Decoded some data of the current frame.",5,null],[13,"DataEnd","","No more data available the current frame.",5,null],[4,"DecodingError","","Decoding error.",null,null],[13,"Format","","Returned if the image is found to be malformed.",6,null],[13,"Internal","","Internal (logic) error.",6,null],[13,"Io","","Wraps `std::io::Error`.",6,null],[4,"ColorOutput","","Output mode for the image data",null,null],[13,"RGBA","","The decoder expands the image data to 32bit RGBA. This affects:",7,null],[13,"Indexed","","The decoder returns the raw indexed data.",7,null],[4,"Extensions","","Configures how extensions should be handled",null,null],[13,"Save","","Saves all extention data",8,null],[13,"Skip","","Skips the data of unknown extensions and extracts the data from known ones",8,null],[4,"ExtensionData","","Extension data.",null,null],[13,"Control","","Control extension. Use `ExtensionData::new_control_ext` to construct.",9,null],[12,"flags","gif::ExtensionData","Flags.",9,null],[12,"delay","","Frame delay.",9,null],[12,"trns","","Transparent index.",9,null],[13,"Repetitions","gif","Sets the number of repetitions",9,null],[4,"Repeat","","Number of repetitions",null,null],[13,"Finite","","Finite number of repetitions",10,null],[13,"Infinite","","Infinite number of repetitions",10,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"disposalmethod"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"disposalmethod"}],"output":{"name":"bool"}}],[11,"from_u8","","Converts `u8` to `Option<Self>`",4,{"inputs":[{"name":"u8"}],"output":{"generics":["disposalmethod"],"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"block"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"block"}],"output":{"name":"bool"}}],[11,"from_u8","","Converts `u8` to `Option<Self>`",2,{"inputs":[{"name":"u8"}],"output":{"generics":["block"],"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"extension"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"extension"}],"output":{"name":"bool"}}],[11,"from_u8","","Converts `u8` to `Option<Self>`",3,{"inputs":[{"name":"u8"}],"output":{"generics":["extension"],"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"frame"}}],[11,"from_rgba","","Creates a frame from pixels in RGBA format.",0,null],[11,"from_rgb","","Creates a frame from pixels in RGB format.",0,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"from","","",6,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"extensions"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set_param","","",8,{"inputs":[{"name":"self"},{"name":"streamingdecoder"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new streaming decoder",11,{"inputs":[],"output":{"name":"streamingdecoder"}}],[11,"update","","Updates the internal state of the decoder. ",11,null],[11,"last_ext","","Returns the data of the last extension that has been decoded.",11,null],[11,"current_frame_mut","","Current frame info as a mutable ref.",11,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[11,"current_frame","","Current frame info as a ref.",11,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[11,"width","","Width of the image",11,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"height","","Height of the image",11,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"coloroutput"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set_param","","",7,{"inputs":[{"name":"self"},{"name":"decoder"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"set_param","","",1,{"inputs":[{"name":"self"},{"name":"decoder"}],"output":null}],[11,"new","","Creates a new decoder builder",12,{"inputs":[{"name":"r"}],"output":{"name":"decoder"}}],[11,"read_info","","Reads the logical screen descriptor including the global color palette",12,{"inputs":[{"name":"self"}],"output":{"generics":["reader","decodingerror"],"name":"result"}}],[11,"next_frame_info","","Returns the next frame info",13,{"inputs":[{"name":"self"}],"output":{"generics":["option","decodingerror"],"name":"result"}}],[11,"read_next_frame","","Reads the next frame from the image.",13,{"inputs":[{"name":"self"}],"output":{"generics":["option","decodingerror"],"name":"result"}}],[11,"read_into_buffer","","Reads the data of the current frame into a pre-allocated buffer.",13,null],[11,"fill_buffer","","Reads data of the current frame into a pre-allocated buffer until the buffer has been filled completely.",13,null],[11,"buffer_size","","Output buffer size",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"line_length","","Line length of the current frame",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"palette","","Returns the color palette relevant for the current (next) frame",13,{"inputs":[{"name":"self"}],"output":{"generics":["decodingerror"],"name":"result"}}],[11,"global_palette","","The global color palette",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"width","","Width of the image",13,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"height","","Height of the image",13,{"inputs":[{"name":"self"}],"output":{"name":"u16"}}],[11,"bg_color","","Index of the background color in the global palette",13,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"set_param","","",10,null],[11,"new_control_ext","","Constructor for control extension data.",9,{"inputs":[{"name":"u16"},{"name":"disposalmethod"},{"name":"bool"},{"generics":["u8"],"name":"option"}],"output":{"name":"extensiondata"}}],[11,"new","","Creates a new encoder.",14,null],[11,"write_global_palette","","Writes the global color palette.",14,null],[11,"write_frame","","Writes a frame to the image.",14,{"inputs":[{"name":"self"},{"name":"frame"}],"output":{"name":"result"}}],[11,"write_extension","","Writes an extension to the image.",14,{"inputs":[{"name":"self"},{"name":"extensiondata"}],"output":{"name":"result"}}],[11,"write_raw_extension","","Writes a raw extension to the image.",14,null],[11,"drop","","",14,{"inputs":[{"name":"self"}],"output":null}],[8,"SetParameter","","Implemented for objects that have parameters.",null,null],[11,"set","","Sets `value` as a parameter of `self`.",15,null],[8,"Parameter","","Configuration parameter trait.",null,null],[16,"Result","","Result type of `set_param`.",16,null],[10,"set_param","","Sets `self` as a parameter of `Object`.",16,null],[11,"set","","Sets `value` as a parameter of `self`.",15,null]],"paths":[[3,"Frame"],[3,"MemoryLimit"],[4,"Block"],[4,"Extension"],[4,"DisposalMethod"],[4,"Decoded"],[4,"DecodingError"],[4,"ColorOutput"],[4,"Extensions"],[4,"ExtensionData"],[4,"Repeat"],[3,"StreamingDecoder"],[3,"Decoder"],[3,"Reader"],[3,"Encoder"],[8,"SetParameter"],[8,"Parameter"]]};
searchIndex["gleam"] = {"doc":"","items":[[0,"gl","gleam","",null,null],[3,"FnPtr","gleam::gl","",null,null],[3,"GlFfi","","",null,null],[12,"ActiveTexture","","Fallbacks: ActiveTextureARB",0,null],[12,"AttachShader","","Fallbacks: AttachObjectARB",0,null],[12,"BeginConditionalRender","","Fallbacks: BeginConditionalRenderNV",0,null],[12,"BeginQuery","","Fallbacks: BeginQueryARB",0,null],[12,"BeginTransformFeedback","","Fallbacks: BeginTransformFeedbackEXT, BeginTransformFeedbackNV",0,null],[12,"BindAttribLocation","","Fallbacks: BindAttribLocationARB",0,null],[12,"BindBuffer","","Fallbacks: BindBufferARB",0,null],[12,"BindBufferBase","","Fallbacks: BindBufferBaseEXT, BindBufferBaseNV",0,null],[12,"BindBufferRange","","Fallbacks: BindBufferRangeEXT, BindBufferRangeNV",0,null],[12,"BindFragDataLocation","","Fallbacks: BindFragDataLocationEXT",0,null],[12,"BindFragDataLocationIndexed","","Fallbacks: BindFragDataLocationIndexedEXT",0,null],[12,"BindFramebuffer","","",0,null],[12,"BindRenderbuffer","","",0,null],[12,"BindSampler","","",0,null],[12,"BindTexture","","Fallbacks: BindTextureEXT",0,null],[12,"BindVertexArray","","Fallbacks: BindVertexArrayOES",0,null],[12,"BlendColor","","Fallbacks: BlendColorEXT",0,null],[12,"BlendEquation","","Fallbacks: BlendEquationEXT",0,null],[12,"BlendEquationSeparate","","Fallbacks: BlendEquationSeparateEXT",0,null],[12,"BlendFunc","","",0,null],[12,"BlendFuncSeparate","","Fallbacks: BlendFuncSeparateEXT, BlendFuncSeparateINGR",0,null],[12,"BlitFramebuffer","","Fallbacks: BlitFramebufferEXT, BlitFramebufferNV",0,null],[12,"BufferData","","Fallbacks: BufferDataARB",0,null],[12,"BufferSubData","","Fallbacks: BufferSubDataARB",0,null],[12,"CheckFramebufferStatus","","Fallbacks: CheckFramebufferStatusEXT",0,null],[12,"ClampColor","","Fallbacks: ClampColorARB",0,null],[12,"Clear","","",0,null],[12,"ClearBufferfi","","",0,null],[12,"ClearBufferfv","","",0,null],[12,"ClearBufferiv","","",0,null],[12,"ClearBufferuiv","","",0,null],[12,"ClearColor","","",0,null],[12,"ClearDepth","","",0,null],[12,"ClearStencil","","",0,null],[12,"ClientWaitSync","","Fallbacks: ClientWaitSyncAPPLE",0,null],[12,"ColorMask","","",0,null],[12,"ColorMaski","","Fallbacks: ColorMaskIndexedEXT, ColorMaskiEXT, ColorMaskiOES",0,null],[12,"ColorP3ui","","",0,null],[12,"ColorP3uiv","","",0,null],[12,"ColorP4ui","","",0,null],[12,"ColorP4uiv","","",0,null],[12,"CompileShader","","Fallbacks: CompileShaderARB",0,null],[12,"CompressedTexImage1D","","Fallbacks: CompressedTexImage1DARB",0,null],[12,"CompressedTexImage2D","","Fallbacks: CompressedTexImage2DARB",0,null],[12,"CompressedTexImage3D","","Fallbacks: CompressedTexImage3DARB",0,null],[12,"CompressedTexSubImage1D","","Fallbacks: CompressedTexSubImage1DARB",0,null],[12,"CompressedTexSubImage2D","","Fallbacks: CompressedTexSubImage2DARB",0,null],[12,"CompressedTexSubImage3D","","Fallbacks: CompressedTexSubImage3DARB",0,null],[12,"CopyBufferSubData","","Fallbacks: CopyBufferSubDataNV",0,null],[12,"CopyTexImage1D","","Fallbacks: CopyTexImage1DEXT",0,null],[12,"CopyTexImage2D","","Fallbacks: CopyTexImage2DEXT",0,null],[12,"CopyTexSubImage1D","","Fallbacks: CopyTexSubImage1DEXT",0,null],[12,"CopyTexSubImage2D","","Fallbacks: CopyTexSubImage2DEXT",0,null],[12,"CopyTexSubImage3D","","Fallbacks: CopyTexSubImage3DEXT",0,null],[12,"CreateProgram","","Fallbacks: CreateProgramObjectARB",0,null],[12,"CreateShader","","Fallbacks: CreateShaderObjectARB",0,null],[12,"CullFace","","",0,null],[12,"DebugMessageCallback","","Fallbacks: DebugMessageCallbackARB, DebugMessageCallbackKHR",0,null],[12,"DebugMessageCallbackKHR","","",0,null],[12,"DebugMessageControl","","Fallbacks: DebugMessageControlARB, DebugMessageControlKHR",0,null],[12,"DebugMessageControlKHR","","",0,null],[12,"DebugMessageInsert","","Fallbacks: DebugMessageInsertARB, DebugMessageInsertKHR",0,null],[12,"DebugMessageInsertKHR","","",0,null],[12,"DeleteBuffers","","Fallbacks: DeleteBuffersARB",0,null],[12,"DeleteFencesAPPLE","","",0,null],[12,"DeleteFramebuffers","","Fallbacks: DeleteFramebuffersEXT",0,null],[12,"DeleteProgram","","",0,null],[12,"DeleteQueries","","Fallbacks: DeleteQueriesARB",0,null],[12,"DeleteRenderbuffers","","Fallbacks: DeleteRenderbuffersEXT",0,null],[12,"DeleteSamplers","","",0,null],[12,"DeleteShader","","",0,null],[12,"DeleteSync","","Fallbacks: DeleteSyncAPPLE",0,null],[12,"DeleteTextures","","",0,null],[12,"DeleteVertexArrays","","Fallbacks: DeleteVertexArraysAPPLE, DeleteVertexArraysOES",0,null],[12,"DepthFunc","","",0,null],[12,"DepthMask","","",0,null],[12,"DepthRange","","",0,null],[12,"DetachShader","","Fallbacks: DetachObjectARB",0,null],[12,"Disable","","",0,null],[12,"DisableVertexAttribArray","","Fallbacks: DisableVertexAttribArrayARB",0,null],[12,"Disablei","","Fallbacks: DisableIndexedEXT, DisableiEXT, DisableiNV, DisableiOES",0,null],[12,"DrawArrays","","Fallbacks: DrawArraysEXT",0,null],[12,"DrawArraysInstanced","","Fallbacks: DrawArraysInstancedANGLE, DrawArraysInstancedARB, DrawArraysInstancedEXT, DrawArraysInstancedNV",0,null],[12,"DrawBuffer","","",0,null],[12,"DrawBuffers","","Fallbacks: DrawBuffersARB, DrawBuffersATI, DrawBuffersEXT",0,null],[12,"DrawElements","","",0,null],[12,"DrawElementsBaseVertex","","Fallbacks: DrawElementsBaseVertexEXT, DrawElementsBaseVertexOES",0,null],[12,"DrawElementsInstanced","","Fallbacks: DrawElementsInstancedANGLE, DrawElementsInstancedARB, DrawElementsInstancedEXT, DrawElementsInstancedNV",0,null],[12,"DrawElementsInstancedBaseVertex","","Fallbacks: DrawElementsInstancedBaseVertexEXT, DrawElementsInstancedBaseVertexOES",0,null],[12,"DrawRangeElements","","Fallbacks: DrawRangeElementsEXT",0,null],[12,"DrawRangeElementsBaseVertex","","Fallbacks: DrawRangeElementsBaseVertexEXT, DrawRangeElementsBaseVertexOES",0,null],[12,"Enable","","",0,null],[12,"EnableVertexAttribArray","","Fallbacks: EnableVertexAttribArrayARB",0,null],[12,"Enablei","","Fallbacks: EnableIndexedEXT, EnableiEXT, EnableiNV, EnableiOES",0,null],[12,"EndConditionalRender","","Fallbacks: EndConditionalRenderNV, EndConditionalRenderNVX",0,null],[12,"EndQuery","","Fallbacks: EndQueryARB",0,null],[12,"EndTransformFeedback","","Fallbacks: EndTransformFeedbackEXT, EndTransformFeedbackNV",0,null],[12,"FenceSync","","Fallbacks: FenceSyncAPPLE",0,null],[12,"Finish","","",0,null],[12,"FinishFenceAPPLE","","",0,null],[12,"FinishObjectAPPLE","","",0,null],[12,"Flush","","",0,null],[12,"FlushMappedBufferRange","","Fallbacks: FlushMappedBufferRangeAPPLE, FlushMappedBufferRangeEXT",0,null],[12,"FramebufferRenderbuffer","","Fallbacks: FramebufferRenderbufferEXT",0,null],[12,"FramebufferTexture","","Fallbacks: FramebufferTextureARB, FramebufferTextureEXT, FramebufferTextureOES",0,null],[12,"FramebufferTexture1D","","Fallbacks: FramebufferTexture1DEXT",0,null],[12,"FramebufferTexture2D","","Fallbacks: FramebufferTexture2DEXT",0,null],[12,"FramebufferTexture3D","","Fallbacks: FramebufferTexture3DEXT",0,null],[12,"FramebufferTextureLayer","","Fallbacks: FramebufferTextureLayerARB, FramebufferTextureLayerEXT",0,null],[12,"FrontFace","","",0,null],[12,"GenBuffers","","Fallbacks: GenBuffersARB",0,null],[12,"GenFencesAPPLE","","",0,null],[12,"GenFramebuffers","","Fallbacks: GenFramebuffersEXT",0,null],[12,"GenQueries","","Fallbacks: GenQueriesARB",0,null],[12,"GenRenderbuffers","","Fallbacks: GenRenderbuffersEXT",0,null],[12,"GenSamplers","","",0,null],[12,"GenTextures","","",0,null],[12,"GenVertexArrays","","Fallbacks: GenVertexArraysAPPLE, GenVertexArraysOES",0,null],[12,"GenerateMipmap","","Fallbacks: GenerateMipmapEXT",0,null],[12,"GetActiveAttrib","","Fallbacks: GetActiveAttribARB",0,null],[12,"GetActiveUniform","","Fallbacks: GetActiveUniformARB",0,null],[12,"GetActiveUniformBlockName","","",0,null],[12,"GetActiveUniformBlockiv","","",0,null],[12,"GetActiveUniformName","","",0,null],[12,"GetActiveUniformsiv","","",0,null],[12,"GetAttachedShaders","","",0,null],[12,"GetAttribLocation","","Fallbacks: GetAttribLocationARB",0,null],[12,"GetBooleani_v","","Fallbacks: GetBooleanIndexedvEXT",0,null],[12,"GetBooleanv","","",0,null],[12,"GetBufferParameteri64v","","",0,null],[12,"GetBufferParameteriv","","Fallbacks: GetBufferParameterivARB",0,null],[12,"GetBufferPointerv","","Fallbacks: GetBufferPointervARB, GetBufferPointervOES",0,null],[12,"GetBufferSubData","","Fallbacks: GetBufferSubDataARB",0,null],[12,"GetCompressedTexImage","","Fallbacks: GetCompressedTexImageARB",0,null],[12,"GetDebugMessageLog","","Fallbacks: GetDebugMessageLogARB, GetDebugMessageLogKHR",0,null],[12,"GetDebugMessageLogKHR","","",0,null],[12,"GetDoublev","","",0,null],[12,"GetError","","",0,null],[12,"GetFloatv","","",0,null],[12,"GetFragDataIndex","","Fallbacks: GetFragDataIndexEXT",0,null],[12,"GetFragDataLocation","","Fallbacks: GetFragDataLocationEXT",0,null],[12,"GetFramebufferAttachmentParameteriv","","Fallbacks: GetFramebufferAttachmentParameterivEXT",0,null],[12,"GetInteger64i_v","","",0,null],[12,"GetInteger64v","","Fallbacks: GetInteger64vAPPLE",0,null],[12,"GetIntegeri_v","","Fallbacks: GetIntegerIndexedvEXT",0,null],[12,"GetIntegerv","","",0,null],[12,"GetMultisamplefv","","Fallbacks: GetMultisamplefvNV",0,null],[12,"GetObjectLabel","","Fallbacks: GetObjectLabelKHR",0,null],[12,"GetObjectLabelKHR","","",0,null],[12,"GetObjectPtrLabel","","Fallbacks: GetObjectPtrLabelKHR",0,null],[12,"GetObjectPtrLabelKHR","","",0,null],[12,"GetPointerv","","Fallbacks: GetPointervEXT, GetPointervKHR",0,null],[12,"GetPointervKHR","","",0,null],[12,"GetProgramBinary","","Fallbacks: GetProgramBinaryOES",0,null],[12,"GetProgramInfoLog","","",0,null],[12,"GetProgramiv","","",0,null],[12,"GetQueryObjecti64v","","Fallbacks: GetQueryObjecti64vEXT",0,null],[12,"GetQueryObjectiv","","Fallbacks: GetQueryObjectivARB, GetQueryObjectivEXT",0,null],[12,"GetQueryObjectui64v","","Fallbacks: GetQueryObjectui64vEXT",0,null],[12,"GetQueryObjectuiv","","Fallbacks: GetQueryObjectuivARB",0,null],[12,"GetQueryiv","","Fallbacks: GetQueryivARB",0,null],[12,"GetRenderbufferParameteriv","","Fallbacks: GetRenderbufferParameterivEXT",0,null],[12,"GetSamplerParameterIiv","","Fallbacks: GetSamplerParameterIivEXT, GetSamplerParameterIivOES",0,null],[12,"GetSamplerParameterIuiv","","Fallbacks: GetSamplerParameterIuivEXT, GetSamplerParameterIuivOES",0,null],[12,"GetSamplerParameterfv","","",0,null],[12,"GetSamplerParameteriv","","",0,null],[12,"GetShaderInfoLog","","",0,null],[12,"GetShaderSource","","Fallbacks: GetShaderSourceARB",0,null],[12,"GetShaderiv","","",0,null],[12,"GetString","","",0,null],[12,"GetStringi","","",0,null],[12,"GetSynciv","","Fallbacks: GetSyncivAPPLE",0,null],[12,"GetTexImage","","",0,null],[12,"GetTexLevelParameterfv","","",0,null],[12,"GetTexLevelParameteriv","","",0,null],[12,"GetTexParameterIiv","","Fallbacks: GetTexParameterIivEXT, GetTexParameterIivOES",0,null],[12,"GetTexParameterIuiv","","Fallbacks: GetTexParameterIuivEXT, GetTexParameterIuivOES",0,null],[12,"GetTexParameterPointervAPPLE","","",0,null],[12,"GetTexParameterfv","","",0,null],[12,"GetTexParameteriv","","",0,null],[12,"GetTransformFeedbackVarying","","Fallbacks: GetTransformFeedbackVaryingEXT",0,null],[12,"GetUniformBlockIndex","","",0,null],[12,"GetUniformIndices","","",0,null],[12,"GetUniformLocation","","Fallbacks: GetUniformLocationARB",0,null],[12,"GetUniformfv","","Fallbacks: GetUniformfvARB",0,null],[12,"GetUniformiv","","Fallbacks: GetUniformivARB",0,null],[12,"GetUniformuiv","","Fallbacks: GetUniformuivEXT",0,null],[12,"GetVertexAttribIiv","","Fallbacks: GetVertexAttribIivEXT",0,null],[12,"GetVertexAttribIuiv","","Fallbacks: GetVertexAttribIuivEXT",0,null],[12,"GetVertexAttribPointerv","","Fallbacks: GetVertexAttribPointervARB, GetVertexAttribPointervNV",0,null],[12,"GetVertexAttribdv","","Fallbacks: GetVertexAttribdvARB, GetVertexAttribdvNV",0,null],[12,"GetVertexAttribfv","","Fallbacks: GetVertexAttribfvARB, GetVertexAttribfvNV",0,null],[12,"GetVertexAttribiv","","Fallbacks: GetVertexAttribivARB, GetVertexAttribivNV",0,null],[12,"Hint","","",0,null],[12,"InsertEventMarkerEXT","","",0,null],[12,"IsBuffer","","Fallbacks: IsBufferARB",0,null],[12,"IsEnabled","","",0,null],[12,"IsEnabledi","","Fallbacks: IsEnabledIndexedEXT, IsEnablediEXT, IsEnablediNV, IsEnablediOES",0,null],[12,"IsFenceAPPLE","","",0,null],[12,"IsFramebuffer","","Fallbacks: IsFramebufferEXT",0,null],[12,"IsProgram","","",0,null],[12,"IsQuery","","Fallbacks: IsQueryARB",0,null],[12,"IsRenderbuffer","","Fallbacks: IsRenderbufferEXT",0,null],[12,"IsSampler","","",0,null],[12,"IsShader","","",0,null],[12,"IsSync","","Fallbacks: IsSyncAPPLE",0,null],[12,"IsTexture","","",0,null],[12,"IsVertexArray","","Fallbacks: IsVertexArrayAPPLE, IsVertexArrayOES",0,null],[12,"LineWidth","","",0,null],[12,"LinkProgram","","Fallbacks: LinkProgramARB",0,null],[12,"LogicOp","","",0,null],[12,"MapBuffer","","Fallbacks: MapBufferARB, MapBufferOES",0,null],[12,"MapBufferRange","","Fallbacks: MapBufferRangeEXT",0,null],[12,"MultiDrawArrays","","Fallbacks: MultiDrawArraysEXT",0,null],[12,"MultiDrawElements","","Fallbacks: MultiDrawElementsEXT",0,null],[12,"MultiDrawElementsBaseVertex","","Fallbacks: MultiDrawElementsBaseVertexEXT",0,null],[12,"MultiTexCoordP1ui","","",0,null],[12,"MultiTexCoordP1uiv","","",0,null],[12,"MultiTexCoordP2ui","","",0,null],[12,"MultiTexCoordP2uiv","","",0,null],[12,"MultiTexCoordP3ui","","",0,null],[12,"MultiTexCoordP3uiv","","",0,null],[12,"MultiTexCoordP4ui","","",0,null],[12,"MultiTexCoordP4uiv","","",0,null],[12,"NormalP3ui","","",0,null],[12,"NormalP3uiv","","",0,null],[12,"ObjectLabel","","Fallbacks: ObjectLabelKHR",0,null],[12,"ObjectLabelKHR","","",0,null],[12,"ObjectPtrLabel","","Fallbacks: ObjectPtrLabelKHR",0,null],[12,"ObjectPtrLabelKHR","","",0,null],[12,"PixelStoref","","",0,null],[12,"PixelStorei","","",0,null],[12,"PointParameterf","","Fallbacks: PointParameterfARB, PointParameterfEXT, PointParameterfSGIS",0,null],[12,"PointParameterfv","","Fallbacks: PointParameterfvARB, PointParameterfvEXT, PointParameterfvSGIS",0,null],[12,"PointParameteri","","Fallbacks: PointParameteriNV",0,null],[12,"PointParameteriv","","Fallbacks: PointParameterivNV",0,null],[12,"PointSize","","",0,null],[12,"PolygonMode","","Fallbacks: PolygonModeNV",0,null],[12,"PolygonOffset","","",0,null],[12,"PopDebugGroup","","Fallbacks: PopDebugGroupKHR",0,null],[12,"PopDebugGroupKHR","","",0,null],[12,"PopGroupMarkerEXT","","",0,null],[12,"PrimitiveRestartIndex","","",0,null],[12,"ProgramBinary","","Fallbacks: ProgramBinaryOES",0,null],[12,"ProgramParameteri","","Fallbacks: ProgramParameteriARB, ProgramParameteriEXT",0,null],[12,"ProvokingVertex","","Fallbacks: ProvokingVertexEXT",0,null],[12,"PushDebugGroup","","Fallbacks: PushDebugGroupKHR",0,null],[12,"PushDebugGroupKHR","","",0,null],[12,"PushGroupMarkerEXT","","",0,null],[12,"QueryCounter","","Fallbacks: QueryCounterEXT",0,null],[12,"ReadBuffer","","",0,null],[12,"ReadPixels","","",0,null],[12,"RenderbufferStorage","","Fallbacks: RenderbufferStorageEXT",0,null],[12,"RenderbufferStorageMultisample","","Fallbacks: RenderbufferStorageMultisampleEXT, RenderbufferStorageMultisampleNV",0,null],[12,"SampleCoverage","","Fallbacks: SampleCoverageARB",0,null],[12,"SampleMaski","","",0,null],[12,"SamplerParameterIiv","","Fallbacks: SamplerParameterIivEXT, SamplerParameterIivOES",0,null],[12,"SamplerParameterIuiv","","Fallbacks: SamplerParameterIuivEXT, SamplerParameterIuivOES",0,null],[12,"SamplerParameterf","","",0,null],[12,"SamplerParameterfv","","",0,null],[12,"SamplerParameteri","","",0,null],[12,"SamplerParameteriv","","",0,null],[12,"Scissor","","",0,null],[12,"SecondaryColorP3ui","","",0,null],[12,"SecondaryColorP3uiv","","",0,null],[12,"SetFenceAPPLE","","",0,null],[12,"ShaderSource","","Fallbacks: ShaderSourceARB",0,null],[12,"StencilFunc","","",0,null],[12,"StencilFuncSeparate","","",0,null],[12,"StencilMask","","",0,null],[12,"StencilMaskSeparate","","",0,null],[12,"StencilOp","","",0,null],[12,"StencilOpSeparate","","Fallbacks: StencilOpSeparateATI",0,null],[12,"TestFenceAPPLE","","",0,null],[12,"TestObjectAPPLE","","",0,null],[12,"TexBuffer","","Fallbacks: TexBufferARB, TexBufferEXT, TexBufferOES",0,null],[12,"TexCoordP1ui","","",0,null],[12,"TexCoordP1uiv","","",0,null],[12,"TexCoordP2ui","","",0,null],[12,"TexCoordP2uiv","","",0,null],[12,"TexCoordP3ui","","",0,null],[12,"TexCoordP3uiv","","",0,null],[12,"TexCoordP4ui","","",0,null],[12,"TexCoordP4uiv","","",0,null],[12,"TexImage1D","","",0,null],[12,"TexImage2D","","",0,null],[12,"TexImage2DMultisample","","",0,null],[12,"TexImage3D","","Fallbacks: TexImage3DEXT",0,null],[12,"TexImage3DMultisample","","",0,null],[12,"TexParameterIiv","","Fallbacks: TexParameterIivEXT, TexParameterIivOES",0,null],[12,"TexParameterIuiv","","Fallbacks: TexParameterIuivEXT, TexParameterIuivOES",0,null],[12,"TexParameterf","","",0,null],[12,"TexParameterfv","","",0,null],[12,"TexParameteri","","",0,null],[12,"TexParameteriv","","",0,null],[12,"TexSubImage1D","","Fallbacks: TexSubImage1DEXT",0,null],[12,"TexSubImage2D","","Fallbacks: TexSubImage2DEXT",0,null],[12,"TexSubImage3D","","Fallbacks: TexSubImage3DEXT",0,null],[12,"TextureRangeAPPLE","","",0,null],[12,"TransformFeedbackVaryings","","Fallbacks: TransformFeedbackVaryingsEXT",0,null],[12,"Uniform1f","","Fallbacks: Uniform1fARB",0,null],[12,"Uniform1fv","","Fallbacks: Uniform1fvARB",0,null],[12,"Uniform1i","","Fallbacks: Uniform1iARB",0,null],[12,"Uniform1iv","","Fallbacks: Uniform1ivARB",0,null],[12,"Uniform1ui","","Fallbacks: Uniform1uiEXT",0,null],[12,"Uniform1uiv","","Fallbacks: Uniform1uivEXT",0,null],[12,"Uniform2f","","Fallbacks: Uniform2fARB",0,null],[12,"Uniform2fv","","Fallbacks: Uniform2fvARB",0,null],[12,"Uniform2i","","Fallbacks: Uniform2iARB",0,null],[12,"Uniform2iv","","Fallbacks: Uniform2ivARB",0,null],[12,"Uniform2ui","","Fallbacks: Uniform2uiEXT",0,null],[12,"Uniform2uiv","","Fallbacks: Uniform2uivEXT",0,null],[12,"Uniform3f","","Fallbacks: Uniform3fARB",0,null],[12,"Uniform3fv","","Fallbacks: Uniform3fvARB",0,null],[12,"Uniform3i","","Fallbacks: Uniform3iARB",0,null],[12,"Uniform3iv","","Fallbacks: Uniform3ivARB",0,null],[12,"Uniform3ui","","Fallbacks: Uniform3uiEXT",0,null],[12,"Uniform3uiv","","Fallbacks: Uniform3uivEXT",0,null],[12,"Uniform4f","","Fallbacks: Uniform4fARB",0,null],[12,"Uniform4fv","","Fallbacks: Uniform4fvARB",0,null],[12,"Uniform4i","","Fallbacks: Uniform4iARB",0,null],[12,"Uniform4iv","","Fallbacks: Uniform4ivARB",0,null],[12,"Uniform4ui","","Fallbacks: Uniform4uiEXT",0,null],[12,"Uniform4uiv","","Fallbacks: Uniform4uivEXT",0,null],[12,"UniformBlockBinding","","",0,null],[12,"UniformMatrix2fv","","Fallbacks: UniformMatrix2fvARB",0,null],[12,"UniformMatrix2x3fv","","Fallbacks: UniformMatrix2x3fvNV",0,null],[12,"UniformMatrix2x4fv","","Fallbacks: UniformMatrix2x4fvNV",0,null],[12,"UniformMatrix3fv","","Fallbacks: UniformMatrix3fvARB",0,null],[12,"UniformMatrix3x2fv","","Fallbacks: UniformMatrix3x2fvNV",0,null],[12,"UniformMatrix3x4fv","","Fallbacks: UniformMatrix3x4fvNV",0,null],[12,"UniformMatrix4fv","","Fallbacks: UniformMatrix4fvARB",0,null],[12,"UniformMatrix4x2fv","","Fallbacks: UniformMatrix4x2fvNV",0,null],[12,"UniformMatrix4x3fv","","Fallbacks: UniformMatrix4x3fvNV",0,null],[12,"UnmapBuffer","","Fallbacks: UnmapBufferARB, UnmapBufferOES",0,null],[12,"UseProgram","","Fallbacks: UseProgramObjectARB",0,null],[12,"ValidateProgram","","Fallbacks: ValidateProgramARB",0,null],[12,"VertexAttrib1d","","Fallbacks: VertexAttrib1dARB, VertexAttrib1dNV",0,null],[12,"VertexAttrib1dv","","Fallbacks: VertexAttrib1dvARB, VertexAttrib1dvNV",0,null],[12,"VertexAttrib1f","","Fallbacks: VertexAttrib1fARB, VertexAttrib1fNV",0,null],[12,"VertexAttrib1fv","","Fallbacks: VertexAttrib1fvARB, VertexAttrib1fvNV",0,null],[12,"VertexAttrib1s","","Fallbacks: VertexAttrib1sARB, VertexAttrib1sNV",0,null],[12,"VertexAttrib1sv","","Fallbacks: VertexAttrib1svARB, VertexAttrib1svNV",0,null],[12,"VertexAttrib2d","","Fallbacks: VertexAttrib2dARB, VertexAttrib2dNV",0,null],[12,"VertexAttrib2dv","","Fallbacks: VertexAttrib2dvARB, VertexAttrib2dvNV",0,null],[12,"VertexAttrib2f","","Fallbacks: VertexAttrib2fARB, VertexAttrib2fNV",0,null],[12,"VertexAttrib2fv","","Fallbacks: VertexAttrib2fvARB, VertexAttrib2fvNV",0,null],[12,"VertexAttrib2s","","Fallbacks: VertexAttrib2sARB, VertexAttrib2sNV",0,null],[12,"VertexAttrib2sv","","Fallbacks: VertexAttrib2svARB, VertexAttrib2svNV",0,null],[12,"VertexAttrib3d","","Fallbacks: VertexAttrib3dARB, VertexAttrib3dNV",0,null],[12,"VertexAttrib3dv","","Fallbacks: VertexAttrib3dvARB, VertexAttrib3dvNV",0,null],[12,"VertexAttrib3f","","Fallbacks: VertexAttrib3fARB, VertexAttrib3fNV",0,null],[12,"VertexAttrib3fv","","Fallbacks: VertexAttrib3fvARB, VertexAttrib3fvNV",0,null],[12,"VertexAttrib3s","","Fallbacks: VertexAttrib3sARB, VertexAttrib3sNV",0,null],[12,"VertexAttrib3sv","","Fallbacks: VertexAttrib3svARB, VertexAttrib3svNV",0,null],[12,"VertexAttrib4Nbv","","Fallbacks: VertexAttrib4NbvARB",0,null],[12,"VertexAttrib4Niv","","Fallbacks: VertexAttrib4NivARB",0,null],[12,"VertexAttrib4Nsv","","Fallbacks: VertexAttrib4NsvARB",0,null],[12,"VertexAttrib4Nub","","Fallbacks: VertexAttrib4NubARB, VertexAttrib4ubNV",0,null],[12,"VertexAttrib4Nubv","","Fallbacks: VertexAttrib4NubvARB, VertexAttrib4ubvNV",0,null],[12,"VertexAttrib4Nuiv","","Fallbacks: VertexAttrib4NuivARB",0,null],[12,"VertexAttrib4Nusv","","Fallbacks: VertexAttrib4NusvARB",0,null],[12,"VertexAttrib4bv","","Fallbacks: VertexAttrib4bvARB",0,null],[12,"VertexAttrib4d","","Fallbacks: VertexAttrib4dARB, VertexAttrib4dNV",0,null],[12,"VertexAttrib4dv","","Fallbacks: VertexAttrib4dvARB, VertexAttrib4dvNV",0,null],[12,"VertexAttrib4f","","Fallbacks: VertexAttrib4fARB, VertexAttrib4fNV",0,null],[12,"VertexAttrib4fv","","Fallbacks: VertexAttrib4fvARB, VertexAttrib4fvNV",0,null],[12,"VertexAttrib4iv","","Fallbacks: VertexAttrib4ivARB",0,null],[12,"VertexAttrib4s","","Fallbacks: VertexAttrib4sARB, VertexAttrib4sNV",0,null],[12,"VertexAttrib4sv","","Fallbacks: VertexAttrib4svARB, VertexAttrib4svNV",0,null],[12,"VertexAttrib4ubv","","Fallbacks: VertexAttrib4ubvARB",0,null],[12,"VertexAttrib4uiv","","Fallbacks: VertexAttrib4uivARB",0,null],[12,"VertexAttrib4usv","","Fallbacks: VertexAttrib4usvARB",0,null],[12,"VertexAttribDivisor","","Fallbacks: VertexAttribDivisorANGLE, VertexAttribDivisorARB, VertexAttribDivisorEXT, VertexAttribDivisorNV",0,null],[12,"VertexAttribI1i","","Fallbacks: VertexAttribI1iEXT",0,null],[12,"VertexAttribI1iv","","Fallbacks: VertexAttribI1ivEXT",0,null],[12,"VertexAttribI1ui","","Fallbacks: VertexAttribI1uiEXT",0,null],[12,"VertexAttribI1uiv","","Fallbacks: VertexAttribI1uivEXT",0,null],[12,"VertexAttribI2i","","Fallbacks: VertexAttribI2iEXT",0,null],[12,"VertexAttribI2iv","","Fallbacks: VertexAttribI2ivEXT",0,null],[12,"VertexAttribI2ui","","Fallbacks: VertexAttribI2uiEXT",0,null],[12,"VertexAttribI2uiv","","Fallbacks: VertexAttribI2uivEXT",0,null],[12,"VertexAttribI3i","","Fallbacks: VertexAttribI3iEXT",0,null],[12,"VertexAttribI3iv","","Fallbacks: VertexAttribI3ivEXT",0,null],[12,"VertexAttribI3ui","","Fallbacks: VertexAttribI3uiEXT",0,null],[12,"VertexAttribI3uiv","","Fallbacks: VertexAttribI3uivEXT",0,null],[12,"VertexAttribI4bv","","Fallbacks: VertexAttribI4bvEXT",0,null],[12,"VertexAttribI4i","","Fallbacks: VertexAttribI4iEXT",0,null],[12,"VertexAttribI4iv","","Fallbacks: VertexAttribI4ivEXT",0,null],[12,"VertexAttribI4sv","","Fallbacks: VertexAttribI4svEXT",0,null],[12,"VertexAttribI4ubv","","Fallbacks: VertexAttribI4ubvEXT",0,null],[12,"VertexAttribI4ui","","Fallbacks: VertexAttribI4uiEXT",0,null],[12,"VertexAttribI4uiv","","Fallbacks: VertexAttribI4uivEXT",0,null],[12,"VertexAttribI4usv","","Fallbacks: VertexAttribI4usvEXT",0,null],[12,"VertexAttribIPointer","","Fallbacks: VertexAttribIPointerEXT",0,null],[12,"VertexAttribP1ui","","",0,null],[12,"VertexAttribP1uiv","","",0,null],[12,"VertexAttribP2ui","","",0,null],[12,"VertexAttribP2uiv","","",0,null],[12,"VertexAttribP3ui","","",0,null],[12,"VertexAttribP3uiv","","",0,null],[12,"VertexAttribP4ui","","",0,null],[12,"VertexAttribP4uiv","","",0,null],[12,"VertexAttribPointer","","Fallbacks: VertexAttribPointerARB",0,null],[12,"VertexP2ui","","",0,null],[12,"VertexP2uiv","","",0,null],[12,"VertexP3ui","","",0,null],[12,"VertexP3uiv","","",0,null],[12,"VertexP4ui","","",0,null],[12,"VertexP4uiv","","",0,null],[12,"Viewport","","",0,null],[12,"WaitSync","","Fallbacks: WaitSyncAPPLE",0,null],[3,"GlesFfi","","",null,null],[12,"ActiveTexture","","Fallbacks: ActiveTextureARB",1,null],[12,"AttachShader","","Fallbacks: AttachObjectARB",1,null],[12,"BeginQuery","","Fallbacks: BeginQueryARB",1,null],[12,"BeginQueryEXT","","",1,null],[12,"BeginTransformFeedback","","Fallbacks: BeginTransformFeedbackEXT, BeginTransformFeedbackNV",1,null],[12,"BindAttribLocation","","Fallbacks: BindAttribLocationARB",1,null],[12,"BindBuffer","","Fallbacks: BindBufferARB",1,null],[12,"BindBufferBase","","Fallbacks: BindBufferBaseEXT, BindBufferBaseNV",1,null],[12,"BindBufferRange","","Fallbacks: BindBufferRangeEXT, BindBufferRangeNV",1,null],[12,"BindFramebuffer","","",1,null],[12,"BindRenderbuffer","","",1,null],[12,"BindSampler","","",1,null],[12,"BindTexture","","Fallbacks: BindTextureEXT",1,null],[12,"BindTransformFeedback","","",1,null],[12,"BindVertexArray","","Fallbacks: BindVertexArrayOES",1,null],[12,"BlendColor","","Fallbacks: BlendColorEXT",1,null],[12,"BlendEquation","","Fallbacks: BlendEquationEXT",1,null],[12,"BlendEquationSeparate","","Fallbacks: BlendEquationSeparateEXT",1,null],[12,"BlendFunc","","",1,null],[12,"BlendFuncSeparate","","Fallbacks: BlendFuncSeparateEXT, BlendFuncSeparateINGR",1,null],[12,"BlitFramebuffer","","Fallbacks: BlitFramebufferEXT, BlitFramebufferNV",1,null],[12,"BufferData","","Fallbacks: BufferDataARB",1,null],[12,"BufferSubData","","Fallbacks: BufferSubDataARB",1,null],[12,"CheckFramebufferStatus","","Fallbacks: CheckFramebufferStatusEXT",1,null],[12,"Clear","","",1,null],[12,"ClearBufferfi","","",1,null],[12,"ClearBufferfv","","",1,null],[12,"ClearBufferiv","","",1,null],[12,"ClearBufferuiv","","",1,null],[12,"ClearColor","","",1,null],[12,"ClearDepthf","","Fallbacks: ClearDepthfOES",1,null],[12,"ClearStencil","","",1,null],[12,"ClientWaitSync","","Fallbacks: ClientWaitSyncAPPLE",1,null],[12,"ColorMask","","",1,null],[12,"CompileShader","","Fallbacks: CompileShaderARB",1,null],[12,"CompressedTexImage2D","","Fallbacks: CompressedTexImage2DARB",1,null],[12,"CompressedTexImage3D","","Fallbacks: CompressedTexImage3DARB",1,null],[12,"CompressedTexSubImage2D","","Fallbacks: CompressedTexSubImage2DARB",1,null],[12,"CompressedTexSubImage3D","","Fallbacks: CompressedTexSubImage3DARB",1,null],[12,"CopyBufferSubData","","Fallbacks: CopyBufferSubDataNV",1,null],[12,"CopyTexImage2D","","Fallbacks: CopyTexImage2DEXT",1,null],[12,"CopyTexSubImage2D","","Fallbacks: CopyTexSubImage2DEXT",1,null],[12,"CopyTexSubImage3D","","Fallbacks: CopyTexSubImage3DEXT",1,null],[12,"CreateProgram","","Fallbacks: CreateProgramObjectARB",1,null],[12,"CreateShader","","Fallbacks: CreateShaderObjectARB",1,null],[12,"CullFace","","",1,null],[12,"DebugMessageCallback","","Fallbacks: DebugMessageCallbackARB, DebugMessageCallbackKHR",1,null],[12,"DebugMessageCallbackKHR","","",1,null],[12,"DebugMessageControl","","Fallbacks: DebugMessageControlARB, DebugMessageControlKHR",1,null],[12,"DebugMessageControlKHR","","",1,null],[12,"DebugMessageInsert","","Fallbacks: DebugMessageInsertARB, DebugMessageInsertKHR",1,null],[12,"DebugMessageInsertKHR","","",1,null],[12,"DeleteBuffers","","Fallbacks: DeleteBuffersARB",1,null],[12,"DeleteFramebuffers","","Fallbacks: DeleteFramebuffersEXT",1,null],[12,"DeleteProgram","","",1,null],[12,"DeleteQueries","","Fallbacks: DeleteQueriesARB",1,null],[12,"DeleteQueriesEXT","","",1,null],[12,"DeleteRenderbuffers","","Fallbacks: DeleteRenderbuffersEXT",1,null],[12,"DeleteSamplers","","",1,null],[12,"DeleteShader","","",1,null],[12,"DeleteSync","","Fallbacks: DeleteSyncAPPLE",1,null],[12,"DeleteTextures","","",1,null],[12,"DeleteTransformFeedbacks","","Fallbacks: DeleteTransformFeedbacksNV",1,null],[12,"DeleteVertexArrays","","Fallbacks: DeleteVertexArraysAPPLE, DeleteVertexArraysOES",1,null],[12,"DepthFunc","","",1,null],[12,"DepthMask","","",1,null],[12,"DepthRangef","","Fallbacks: DepthRangefOES",1,null],[12,"DetachShader","","Fallbacks: DetachObjectARB",1,null],[12,"Disable","","",1,null],[12,"DisableVertexAttribArray","","Fallbacks: DisableVertexAttribArrayARB",1,null],[12,"DrawArrays","","Fallbacks: DrawArraysEXT",1,null],[12,"DrawArraysInstanced","","Fallbacks: DrawArraysInstancedANGLE, DrawArraysInstancedARB, DrawArraysInstancedEXT, DrawArraysInstancedNV",1,null],[12,"DrawBuffers","","Fallbacks: DrawBuffersARB, DrawBuffersATI, DrawBuffersEXT",1,null],[12,"DrawElements","","",1,null],[12,"DrawElementsInstanced","","Fallbacks: DrawElementsInstancedANGLE, DrawElementsInstancedARB, DrawElementsInstancedEXT, DrawElementsInstancedNV",1,null],[12,"DrawRangeElements","","Fallbacks: DrawRangeElementsEXT",1,null],[12,"EGLImageTargetRenderbufferStorageOES","","",1,null],[12,"EGLImageTargetTexture2DOES","","",1,null],[12,"Enable","","",1,null],[12,"EnableVertexAttribArray","","Fallbacks: EnableVertexAttribArrayARB",1,null],[12,"EndQuery","","Fallbacks: EndQueryARB",1,null],[12,"EndQueryEXT","","",1,null],[12,"EndTransformFeedback","","Fallbacks: EndTransformFeedbackEXT, EndTransformFeedbackNV",1,null],[12,"FenceSync","","Fallbacks: FenceSyncAPPLE",1,null],[12,"Finish","","",1,null],[12,"Flush","","",1,null],[12,"FlushMappedBufferRange","","Fallbacks: FlushMappedBufferRangeAPPLE, FlushMappedBufferRangeEXT",1,null],[12,"FramebufferRenderbuffer","","Fallbacks: FramebufferRenderbufferEXT",1,null],[12,"FramebufferTexture2D","","Fallbacks: FramebufferTexture2DEXT",1,null],[12,"FramebufferTextureLayer","","Fallbacks: FramebufferTextureLayerARB, FramebufferTextureLayerEXT",1,null],[12,"FrontFace","","",1,null],[12,"GenBuffers","","Fallbacks: GenBuffersARB",1,null],[12,"GenFramebuffers","","Fallbacks: GenFramebuffersEXT",1,null],[12,"GenQueries","","Fallbacks: GenQueriesARB",1,null],[12,"GenQueriesEXT","","",1,null],[12,"GenRenderbuffers","","Fallbacks: GenRenderbuffersEXT",1,null],[12,"GenSamplers","","",1,null],[12,"GenTextures","","",1,null],[12,"GenTransformFeedbacks","","Fallbacks: GenTransformFeedbacksNV",1,null],[12,"GenVertexArrays","","Fallbacks: GenVertexArraysAPPLE, GenVertexArraysOES",1,null],[12,"GenerateMipmap","","Fallbacks: GenerateMipmapEXT",1,null],[12,"GetActiveAttrib","","Fallbacks: GetActiveAttribARB",1,null],[12,"GetActiveUniform","","Fallbacks: GetActiveUniformARB",1,null],[12,"GetActiveUniformBlockName","","",1,null],[12,"GetActiveUniformBlockiv","","",1,null],[12,"GetActiveUniformsiv","","",1,null],[12,"GetAttachedShaders","","",1,null],[12,"GetAttribLocation","","Fallbacks: GetAttribLocationARB",1,null],[12,"GetBooleanv","","",1,null],[12,"GetBufferParameteri64v","","",1,null],[12,"GetBufferParameteriv","","Fallbacks: GetBufferParameterivARB",1,null],[12,"GetBufferPointerv","","Fallbacks: GetBufferPointervARB, GetBufferPointervOES",1,null],[12,"GetDebugMessageLog","","Fallbacks: GetDebugMessageLogARB, GetDebugMessageLogKHR",1,null],[12,"GetDebugMessageLogKHR","","",1,null],[12,"GetError","","",1,null],[12,"GetFloatv","","",1,null],[12,"GetFragDataLocation","","Fallbacks: GetFragDataLocationEXT",1,null],[12,"GetFramebufferAttachmentParameteriv","","Fallbacks: GetFramebufferAttachmentParameterivEXT",1,null],[12,"GetInteger64i_v","","",1,null],[12,"GetInteger64v","","Fallbacks: GetInteger64vAPPLE",1,null],[12,"GetIntegeri_v","","Fallbacks: GetIntegerIndexedvEXT",1,null],[12,"GetIntegerv","","",1,null],[12,"GetInternalformativ","","",1,null],[12,"GetObjectLabel","","Fallbacks: GetObjectLabelKHR",1,null],[12,"GetObjectLabelKHR","","",1,null],[12,"GetObjectPtrLabel","","Fallbacks: GetObjectPtrLabelKHR",1,null],[12,"GetObjectPtrLabelKHR","","",1,null],[12,"GetPointerv","","Fallbacks: GetPointervEXT, GetPointervKHR",1,null],[12,"GetPointervKHR","","",1,null],[12,"GetProgramBinary","","Fallbacks: GetProgramBinaryOES",1,null],[12,"GetProgramInfoLog","","",1,null],[12,"GetProgramiv","","",1,null],[12,"GetQueryObjecti64vEXT","","",1,null],[12,"GetQueryObjectivEXT","","",1,null],[12,"GetQueryObjectui64vEXT","","",1,null],[12,"GetQueryObjectuiv","","Fallbacks: GetQueryObjectuivARB",1,null],[12,"GetQueryObjectuivEXT","","",1,null],[12,"GetQueryiv","","Fallbacks: GetQueryivARB",1,null],[12,"GetQueryivEXT","","",1,null],[12,"GetRenderbufferParameteriv","","Fallbacks: GetRenderbufferParameterivEXT",1,null],[12,"GetSamplerParameterfv","","",1,null],[12,"GetSamplerParameteriv","","",1,null],[12,"GetShaderInfoLog","","",1,null],[12,"GetShaderPrecisionFormat","","",1,null],[12,"GetShaderSource","","Fallbacks: GetShaderSourceARB",1,null],[12,"GetShaderiv","","",1,null],[12,"GetString","","",1,null],[12,"GetStringi","","",1,null],[12,"GetSynciv","","Fallbacks: GetSyncivAPPLE",1,null],[12,"GetTexParameterfv","","",1,null],[12,"GetTexParameteriv","","",1,null],[12,"GetTransformFeedbackVarying","","Fallbacks: GetTransformFeedbackVaryingEXT",1,null],[12,"GetUniformBlockIndex","","",1,null],[12,"GetUniformIndices","","",1,null],[12,"GetUniformLocation","","Fallbacks: GetUniformLocationARB",1,null],[12,"GetUniformfv","","Fallbacks: GetUniformfvARB",1,null],[12,"GetUniformiv","","Fallbacks: GetUniformivARB",1,null],[12,"GetUniformuiv","","Fallbacks: GetUniformuivEXT",1,null],[12,"GetVertexAttribIiv","","Fallbacks: GetVertexAttribIivEXT",1,null],[12,"GetVertexAttribIuiv","","Fallbacks: GetVertexAttribIuivEXT",1,null],[12,"GetVertexAttribPointerv","","Fallbacks: GetVertexAttribPointervARB, GetVertexAttribPointervNV",1,null],[12,"GetVertexAttribfv","","Fallbacks: GetVertexAttribfvARB, GetVertexAttribfvNV",1,null],[12,"GetVertexAttribiv","","Fallbacks: GetVertexAttribivARB, GetVertexAttribivNV",1,null],[12,"Hint","","",1,null],[12,"InsertEventMarkerEXT","","",1,null],[12,"InvalidateFramebuffer","","",1,null],[12,"InvalidateSubFramebuffer","","",1,null],[12,"IsBuffer","","Fallbacks: IsBufferARB",1,null],[12,"IsEnabled","","",1,null],[12,"IsFramebuffer","","Fallbacks: IsFramebufferEXT",1,null],[12,"IsProgram","","",1,null],[12,"IsQuery","","Fallbacks: IsQueryARB",1,null],[12,"IsQueryEXT","","",1,null],[12,"IsRenderbuffer","","Fallbacks: IsRenderbufferEXT",1,null],[12,"IsSampler","","",1,null],[12,"IsShader","","",1,null],[12,"IsSync","","Fallbacks: IsSyncAPPLE",1,null],[12,"IsTexture","","",1,null],[12,"IsTransformFeedback","","Fallbacks: IsTransformFeedbackNV",1,null],[12,"IsVertexArray","","Fallbacks: IsVertexArrayAPPLE, IsVertexArrayOES",1,null],[12,"LineWidth","","",1,null],[12,"LinkProgram","","Fallbacks: LinkProgramARB",1,null],[12,"MapBufferRange","","Fallbacks: MapBufferRangeEXT",1,null],[12,"ObjectLabel","","Fallbacks: ObjectLabelKHR",1,null],[12,"ObjectLabelKHR","","",1,null],[12,"ObjectPtrLabel","","Fallbacks: ObjectPtrLabelKHR",1,null],[12,"ObjectPtrLabelKHR","","",1,null],[12,"PauseTransformFeedback","","Fallbacks: PauseTransformFeedbackNV",1,null],[12,"PixelStorei","","",1,null],[12,"PolygonOffset","","",1,null],[12,"PopDebugGroup","","Fallbacks: PopDebugGroupKHR",1,null],[12,"PopDebugGroupKHR","","",1,null],[12,"PopGroupMarkerEXT","","",1,null],[12,"ProgramBinary","","Fallbacks: ProgramBinaryOES",1,null],[12,"ProgramParameteri","","Fallbacks: ProgramParameteriARB, ProgramParameteriEXT",1,null],[12,"PushDebugGroup","","Fallbacks: PushDebugGroupKHR",1,null],[12,"PushDebugGroupKHR","","",1,null],[12,"PushGroupMarkerEXT","","",1,null],[12,"QueryCounterEXT","","",1,null],[12,"ReadBuffer","","",1,null],[12,"ReadPixels","","",1,null],[12,"ReleaseShaderCompiler","","",1,null],[12,"RenderbufferStorage","","Fallbacks: RenderbufferStorageEXT",1,null],[12,"RenderbufferStorageMultisample","","Fallbacks: RenderbufferStorageMultisampleEXT, RenderbufferStorageMultisampleNV",1,null],[12,"ResumeTransformFeedback","","Fallbacks: ResumeTransformFeedbackNV",1,null],[12,"SampleCoverage","","Fallbacks: SampleCoverageARB",1,null],[12,"SamplerParameterf","","",1,null],[12,"SamplerParameterfv","","",1,null],[12,"SamplerParameteri","","",1,null],[12,"SamplerParameteriv","","",1,null],[12,"Scissor","","",1,null],[12,"ShaderBinary","","",1,null],[12,"ShaderSource","","Fallbacks: ShaderSourceARB",1,null],[12,"StencilFunc","","",1,null],[12,"StencilFuncSeparate","","",1,null],[12,"StencilMask","","",1,null],[12,"StencilMaskSeparate","","",1,null],[12,"StencilOp","","",1,null],[12,"StencilOpSeparate","","Fallbacks: StencilOpSeparateATI",1,null],[12,"TexImage2D","","",1,null],[12,"TexImage3D","","Fallbacks: TexImage3DEXT",1,null],[12,"TexParameterf","","",1,null],[12,"TexParameterfv","","",1,null],[12,"TexParameteri","","",1,null],[12,"TexParameteriv","","",1,null],[12,"TexStorage2D","","Fallbacks: TexStorage2DEXT",1,null],[12,"TexStorage3D","","Fallbacks: TexStorage3DEXT",1,null],[12,"TexSubImage2D","","Fallbacks: TexSubImage2DEXT",1,null],[12,"TexSubImage3D","","Fallbacks: TexSubImage3DEXT",1,null],[12,"TransformFeedbackVaryings","","Fallbacks: TransformFeedbackVaryingsEXT",1,null],[12,"Uniform1f","","Fallbacks: Uniform1fARB",1,null],[12,"Uniform1fv","","Fallbacks: Uniform1fvARB",1,null],[12,"Uniform1i","","Fallbacks: Uniform1iARB",1,null],[12,"Uniform1iv","","Fallbacks: Uniform1ivARB",1,null],[12,"Uniform1ui","","Fallbacks: Uniform1uiEXT",1,null],[12,"Uniform1uiv","","Fallbacks: Uniform1uivEXT",1,null],[12,"Uniform2f","","Fallbacks: Uniform2fARB",1,null],[12,"Uniform2fv","","Fallbacks: Uniform2fvARB",1,null],[12,"Uniform2i","","Fallbacks: Uniform2iARB",1,null],[12,"Uniform2iv","","Fallbacks: Uniform2ivARB",1,null],[12,"Uniform2ui","","Fallbacks: Uniform2uiEXT",1,null],[12,"Uniform2uiv","","Fallbacks: Uniform2uivEXT",1,null],[12,"Uniform3f","","Fallbacks: Uniform3fARB",1,null],[12,"Uniform3fv","","Fallbacks: Uniform3fvARB",1,null],[12,"Uniform3i","","Fallbacks: Uniform3iARB",1,null],[12,"Uniform3iv","","Fallbacks: Uniform3ivARB",1,null],[12,"Uniform3ui","","Fallbacks: Uniform3uiEXT",1,null],[12,"Uniform3uiv","","Fallbacks: Uniform3uivEXT",1,null],[12,"Uniform4f","","Fallbacks: Uniform4fARB",1,null],[12,"Uniform4fv","","Fallbacks: Uniform4fvARB",1,null],[12,"Uniform4i","","Fallbacks: Uniform4iARB",1,null],[12,"Uniform4iv","","Fallbacks: Uniform4ivARB",1,null],[12,"Uniform4ui","","Fallbacks: Uniform4uiEXT",1,null],[12,"Uniform4uiv","","Fallbacks: Uniform4uivEXT",1,null],[12,"UniformBlockBinding","","",1,null],[12,"UniformMatrix2fv","","Fallbacks: UniformMatrix2fvARB",1,null],[12,"UniformMatrix2x3fv","","Fallbacks: UniformMatrix2x3fvNV",1,null],[12,"UniformMatrix2x4fv","","Fallbacks: UniformMatrix2x4fvNV",1,null],[12,"UniformMatrix3fv","","Fallbacks: UniformMatrix3fvARB",1,null],[12,"UniformMatrix3x2fv","","Fallbacks: UniformMatrix3x2fvNV",1,null],[12,"UniformMatrix3x4fv","","Fallbacks: UniformMatrix3x4fvNV",1,null],[12,"UniformMatrix4fv","","Fallbacks: UniformMatrix4fvARB",1,null],[12,"UniformMatrix4x2fv","","Fallbacks: UniformMatrix4x2fvNV",1,null],[12,"UniformMatrix4x3fv","","Fallbacks: UniformMatrix4x3fvNV",1,null],[12,"UnmapBuffer","","Fallbacks: UnmapBufferARB, UnmapBufferOES",1,null],[12,"UseProgram","","Fallbacks: UseProgramObjectARB",1,null],[12,"ValidateProgram","","Fallbacks: ValidateProgramARB",1,null],[12,"VertexAttrib1f","","Fallbacks: VertexAttrib1fARB, VertexAttrib1fNV",1,null],[12,"VertexAttrib1fv","","Fallbacks: VertexAttrib1fvARB, VertexAttrib1fvNV",1,null],[12,"VertexAttrib2f","","Fallbacks: VertexAttrib2fARB, VertexAttrib2fNV",1,null],[12,"VertexAttrib2fv","","Fallbacks: VertexAttrib2fvARB, VertexAttrib2fvNV",1,null],[12,"VertexAttrib3f","","Fallbacks: VertexAttrib3fARB, VertexAttrib3fNV",1,null],[12,"VertexAttrib3fv","","Fallbacks: VertexAttrib3fvARB, VertexAttrib3fvNV",1,null],[12,"VertexAttrib4f","","Fallbacks: VertexAttrib4fARB, VertexAttrib4fNV",1,null],[12,"VertexAttrib4fv","","Fallbacks: VertexAttrib4fvARB, VertexAttrib4fvNV",1,null],[12,"VertexAttribDivisor","","Fallbacks: VertexAttribDivisorANGLE, VertexAttribDivisorARB, VertexAttribDivisorEXT, VertexAttribDivisorNV",1,null],[12,"VertexAttribI4i","","Fallbacks: VertexAttribI4iEXT",1,null],[12,"VertexAttribI4iv","","Fallbacks: VertexAttribI4ivEXT",1,null],[12,"VertexAttribI4ui","","Fallbacks: VertexAttribI4uiEXT",1,null],[12,"VertexAttribI4uiv","","Fallbacks: VertexAttribI4uivEXT",1,null],[12,"VertexAttribIPointer","","Fallbacks: VertexAttribIPointerEXT",1,null],[12,"VertexAttribPointer","","Fallbacks: VertexAttribPointerARB",1,null],[12,"Viewport","","",1,null],[12,"WaitSync","","Fallbacks: WaitSyncAPPLE",1,null],[3,"DebugMessage","","",null,null],[12,"message","","",2,null],[12,"source","","",2,null],[12,"ty","","",2,null],[12,"id","","",2,null],[12,"severity","","",2,null],[3,"GlFns","","",null,null],[3,"GlesFns","","",null,null],[4,"__GLsync","","",null,null],[4,"_cl_context","","",null,null],[4,"_cl_event","","",null,null],[4,"GlType","","",null,null],[13,"Gl","","",3,null],[13,"Gles","","",3,null],[5,"buffer_data","","",null,null],[5,"buffer_data_raw","","",null,{"inputs":[{"name":"gl"},{"name":"glenum"},{"name":"t"},{"name":"glenum"}],"output":null}],[5,"buffer_sub_data","","",null,null],[0,"types","","",null,null],[4,"__GLsync","gleam::gl::types","",null,null],[4,"_cl_context","","",null,null],[4,"_cl_event","","",null,null],[6,"GLenum","","",null,null],[6,"GLboolean","","",null,null],[6,"GLbitfield","","",null,null],[6,"GLvoid","","",null,null],[6,"GLbyte","","",null,null],[6,"GLshort","","",null,null],[6,"GLint","","",null,null],[6,"GLclampx","","",null,null],[6,"GLubyte","","",null,null],[6,"GLushort","","",null,null],[6,"GLuint","","",null,null],[6,"GLsizei","","",null,null],[6,"GLfloat","","",null,null],[6,"GLclampf","","",null,null],[6,"GLdouble","","",null,null],[6,"GLclampd","","",null,null],[6,"GLeglImageOES","","",null,null],[6,"GLchar","","",null,null],[6,"GLcharARB","","",null,null],[6,"GLhandleARB","","",null,null],[6,"GLhalfARB","","",null,null],[6,"GLhalf","","",null,null],[6,"GLfixed","","",null,null],[6,"GLintptr","","",null,null],[6,"GLsizeiptr","","",null,null],[6,"GLint64","","",null,null],[6,"GLuint64","","",null,null],[6,"GLintptrARB","","",null,null],[6,"GLsizeiptrARB","","",null,null],[6,"GLint64EXT","","",null,null],[6,"GLuint64EXT","","",null,null],[6,"GLsync","","",null,null],[6,"GLDEBUGPROC","","",null,null],[6,"GLDEBUGPROCARB","","",null,null],[6,"GLDEBUGPROCKHR","","",null,null],[6,"GLDEBUGPROCAMD","","",null,null],[6,"GLhalfNV","","",null,null],[6,"GLvdpauSurfaceNV","","",null,null],[6,"GLenum","gleam::gl","",null,null],[6,"GLboolean","","",null,null],[6,"GLbitfield","","",null,null],[6,"GLvoid","","",null,null],[6,"GLbyte","","",null,null],[6,"GLshort","","",null,null],[6,"GLint","","",null,null],[6,"GLclampx","","",null,null],[6,"GLubyte","","",null,null],[6,"GLushort","","",null,null],[6,"GLuint","","",null,null],[6,"GLsizei","","",null,null],[6,"GLfloat","","",null,null],[6,"GLclampf","","",null,null],[6,"GLdouble","","",null,null],[6,"GLclampd","","",null,null],[6,"GLeglImageOES","","",null,null],[6,"GLchar","","",null,null],[6,"GLcharARB","","",null,null],[6,"GLhandleARB","","",null,null],[6,"GLhalfARB","","",null,null],[6,"GLhalf","","",null,null],[6,"GLfixed","","",null,null],[6,"GLintptr","","",null,null],[6,"GLsizeiptr","","",null,null],[6,"GLint64","","",null,null],[6,"GLuint64","","",null,null],[6,"GLintptrARB","","",null,null],[6,"GLsizeiptrARB","","",null,null],[6,"GLint64EXT","","",null,null],[6,"GLuint64EXT","","",null,null],[6,"GLsync","","",null,null],[6,"GLDEBUGPROC","","",null,null],[6,"GLDEBUGPROCARB","","",null,null],[6,"GLDEBUGPROCKHR","","",null,null],[6,"GLDEBUGPROCAMD","","",null,null],[6,"GLhalfNV","","",null,null],[6,"GLvdpauSurfaceNV","","",null,null],[17,"ACTIVE_ATTRIBUTES","","",null,null],[17,"ACTIVE_ATTRIBUTE_MAX_LENGTH","","",null,null],[17,"ACTIVE_TEXTURE","","",null,null],[17,"ACTIVE_UNIFORMS","","",null,null],[17,"ACTIVE_UNIFORM_BLOCKS","","",null,null],[17,"ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH","","",null,null],[17,"ACTIVE_UNIFORM_MAX_LENGTH","","",null,null],[17,"ALIASED_LINE_WIDTH_RANGE","","",null,null],[17,"ALIASED_POINT_SIZE_RANGE","","",null,null],[17,"ALPHA","","",null,null],[17,"ALPHA_BITS","","",null,null],[17,"ALREADY_SIGNALED","","",null,null],[17,"ALWAYS","","",null,null],[17,"AND","","",null,null],[17,"AND_INVERTED","","",null,null],[17,"AND_REVERSE","","",null,null],[17,"ANY_SAMPLES_PASSED","","",null,null],[17,"ANY_SAMPLES_PASSED_CONSERVATIVE","","",null,null],[17,"ARRAY_BUFFER","","",null,null],[17,"ARRAY_BUFFER_BINDING","","",null,null],[17,"ATTACHED_SHADERS","","",null,null],[17,"BACK","","",null,null],[17,"BACK_LEFT","","",null,null],[17,"BACK_RIGHT","","",null,null],[17,"BGR","","",null,null],[17,"BGRA","","",null,null],[17,"BGRA_EXT","","",null,null],[17,"BGRA_INTEGER","","",null,null],[17,"BGR_INTEGER","","",null,null],[17,"BLEND","","",null,null],[17,"BLEND_COLOR","","",null,null],[17,"BLEND_DST","","",null,null],[17,"BLEND_DST_ALPHA","","",null,null],[17,"BLEND_DST_RGB","","",null,null],[17,"BLEND_EQUATION","","",null,null],[17,"BLEND_EQUATION_ALPHA","","",null,null],[17,"BLEND_EQUATION_RGB","","",null,null],[17,"BLEND_SRC","","",null,null],[17,"BLEND_SRC_ALPHA","","",null,null],[17,"BLEND_SRC_RGB","","",null,null],[17,"BLUE","","",null,null],[17,"BLUE_BITS","","",null,null],[17,"BLUE_INTEGER","","",null,null],[17,"BOOL","","",null,null],[17,"BOOL_VEC2","","",null,null],[17,"BOOL_VEC3","","",null,null],[17,"BOOL_VEC4","","",null,null],[17,"BUFFER","","",null,null],[17,"BUFFER_ACCESS","","",null,null],[17,"BUFFER_ACCESS_FLAGS","","",null,null],[17,"BUFFER_KHR","","",null,null],[17,"BUFFER_MAPPED","","",null,null],[17,"BUFFER_MAP_LENGTH","","",null,null],[17,"BUFFER_MAP_OFFSET","","",null,null],[17,"BUFFER_MAP_POINTER","","",null,null],[17,"BUFFER_SIZE","","",null,null],[17,"BUFFER_USAGE","","",null,null],[17,"BYTE","","",null,null],[17,"CCW","","",null,null],[17,"CLAMP_READ_COLOR","","",null,null],[17,"CLAMP_TO_BORDER","","",null,null],[17,"CLAMP_TO_EDGE","","",null,null],[17,"CLEAR","","",null,null],[17,"CLIP_DISTANCE0","","",null,null],[17,"CLIP_DISTANCE1","","",null,null],[17,"CLIP_DISTANCE2","","",null,null],[17,"CLIP_DISTANCE3","","",null,null],[17,"CLIP_DISTANCE4","","",null,null],[17,"CLIP_DISTANCE5","","",null,null],[17,"CLIP_DISTANCE6","","",null,null],[17,"CLIP_DISTANCE7","","",null,null],[17,"COLOR","","",null,null],[17,"COLOR_ATTACHMENT0","","",null,null],[17,"COLOR_ATTACHMENT1","","",null,null],[17,"COLOR_ATTACHMENT10","","",null,null],[17,"COLOR_ATTACHMENT11","","",null,null],[17,"COLOR_ATTACHMENT12","","",null,null],[17,"COLOR_ATTACHMENT13","","",null,null],[17,"COLOR_ATTACHMENT14","","",null,null],[17,"COLOR_ATTACHMENT15","","",null,null],[17,"COLOR_ATTACHMENT16","","",null,null],[17,"COLOR_ATTACHMENT17","","",null,null],[17,"COLOR_ATTACHMENT18","","",null,null],[17,"COLOR_ATTACHMENT19","","",null,null],[17,"COLOR_ATTACHMENT2","","",null,null],[17,"COLOR_ATTACHMENT20","","",null,null],[17,"COLOR_ATTACHMENT21","","",null,null],[17,"COLOR_ATTACHMENT22","","",null,null],[17,"COLOR_ATTACHMENT23","","",null,null],[17,"COLOR_ATTACHMENT24","","",null,null],[17,"COLOR_ATTACHMENT25","","",null,null],[17,"COLOR_ATTACHMENT26","","",null,null],[17,"COLOR_ATTACHMENT27","","",null,null],[17,"COLOR_ATTACHMENT28","","",null,null],[17,"COLOR_ATTACHMENT29","","",null,null],[17,"COLOR_ATTACHMENT3","","",null,null],[17,"COLOR_ATTACHMENT30","","",null,null],[17,"COLOR_ATTACHMENT31","","",null,null],[17,"COLOR_ATTACHMENT4","","",null,null],[17,"COLOR_ATTACHMENT5","","",null,null],[17,"COLOR_ATTACHMENT6","","",null,null],[17,"COLOR_ATTACHMENT7","","",null,null],[17,"COLOR_ATTACHMENT8","","",null,null],[17,"COLOR_ATTACHMENT9","","",null,null],[17,"COLOR_BUFFER_BIT","","",null,null],[17,"COLOR_CLEAR_VALUE","","",null,null],[17,"COLOR_LOGIC_OP","","",null,null],[17,"COLOR_WRITEMASK","","",null,null],[17,"COMPARE_REF_TO_TEXTURE","","",null,null],[17,"COMPILE_STATUS","","",null,null],[17,"COMPRESSED_R11_EAC","","",null,null],[17,"COMPRESSED_RED","","",null,null],[17,"COMPRESSED_RED_RGTC1","","",null,null],[17,"COMPRESSED_RG","","",null,null],[17,"COMPRESSED_RG11_EAC","","",null,null],[17,"COMPRESSED_RGB","","",null,null],[17,"COMPRESSED_RGB8_ETC2","","",null,null],[17,"COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2","","",null,null],[17,"COMPRESSED_RGBA","","",null,null],[17,"COMPRESSED_RGBA8_ETC2_EAC","","",null,null],[17,"COMPRESSED_RG_RGTC2","","",null,null],[17,"COMPRESSED_SIGNED_R11_EAC","","",null,null],[17,"COMPRESSED_SIGNED_RED_RGTC1","","",null,null],[17,"COMPRESSED_SIGNED_RG11_EAC","","",null,null],[17,"COMPRESSED_SIGNED_RG_RGTC2","","",null,null],[17,"COMPRESSED_SRGB","","",null,null],[17,"COMPRESSED_SRGB8_ALPHA8_ETC2_EAC","","",null,null],[17,"COMPRESSED_SRGB8_ETC2","","",null,null],[17,"COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2","","",null,null],[17,"COMPRESSED_SRGB_ALPHA","","",null,null],[17,"COMPRESSED_TEXTURE_FORMATS","","",null,null],[17,"CONDITION_SATISFIED","","",null,null],[17,"CONSTANT_ALPHA","","",null,null],[17,"CONSTANT_COLOR","","",null,null],[17,"CONTEXT_COMPATIBILITY_PROFILE_BIT","","",null,null],[17,"CONTEXT_CORE_PROFILE_BIT","","",null,null],[17,"CONTEXT_FLAGS","","",null,null],[17,"CONTEXT_FLAG_DEBUG_BIT","","",null,null],[17,"CONTEXT_FLAG_DEBUG_BIT_KHR","","",null,null],[17,"CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT","","",null,null],[17,"CONTEXT_PROFILE_MASK","","",null,null],[17,"COPY","","",null,null],[17,"COPY_INVERTED","","",null,null],[17,"COPY_READ_BUFFER","","",null,null],[17,"COPY_READ_BUFFER_BINDING","","",null,null],[17,"COPY_WRITE_BUFFER","","",null,null],[17,"COPY_WRITE_BUFFER_BINDING","","",null,null],[17,"CULL_FACE","","",null,null],[17,"CULL_FACE_MODE","","",null,null],[17,"CURRENT_PROGRAM","","",null,null],[17,"CURRENT_QUERY","","",null,null],[17,"CURRENT_QUERY_EXT","","",null,null],[17,"CURRENT_VERTEX_ATTRIB","","",null,null],[17,"CW","","",null,null],[17,"DEBUG_CALLBACK_FUNCTION","","",null,null],[17,"DEBUG_CALLBACK_FUNCTION_KHR","","",null,null],[17,"DEBUG_CALLBACK_USER_PARAM","","",null,null],[17,"DEBUG_CALLBACK_USER_PARAM_KHR","","",null,null],[17,"DEBUG_GROUP_STACK_DEPTH","","",null,null],[17,"DEBUG_GROUP_STACK_DEPTH_KHR","","",null,null],[17,"DEBUG_LOGGED_MESSAGES","","",null,null],[17,"DEBUG_LOGGED_MESSAGES_KHR","","",null,null],[17,"DEBUG_NEXT_LOGGED_MESSAGE_LENGTH","","",null,null],[17,"DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR","","",null,null],[17,"DEBUG_OUTPUT","","",null,null],[17,"DEBUG_OUTPUT_KHR","","",null,null],[17,"DEBUG_OUTPUT_SYNCHRONOUS","","",null,null],[17,"DEBUG_OUTPUT_SYNCHRONOUS_KHR","","",null,null],[17,"DEBUG_SEVERITY_HIGH","","",null,null],[17,"DEBUG_SEVERITY_HIGH_KHR","","",null,null],[17,"DEBUG_SEVERITY_LOW","","",null,null],[17,"DEBUG_SEVERITY_LOW_KHR","","",null,null],[17,"DEBUG_SEVERITY_MEDIUM","","",null,null],[17,"DEBUG_SEVERITY_MEDIUM_KHR","","",null,null],[17,"DEBUG_SEVERITY_NOTIFICATION","","",null,null],[17,"DEBUG_SEVERITY_NOTIFICATION_KHR","","",null,null],[17,"DEBUG_SOURCE_API","","",null,null],[17,"DEBUG_SOURCE_API_KHR","","",null,null],[17,"DEBUG_SOURCE_APPLICATION","","",null,null],[17,"DEBUG_SOURCE_APPLICATION_KHR","","",null,null],[17,"DEBUG_SOURCE_OTHER","","",null,null],[17,"DEBUG_SOURCE_OTHER_KHR","","",null,null],[17,"DEBUG_SOURCE_SHADER_COMPILER","","",null,null],[17,"DEBUG_SOURCE_SHADER_COMPILER_KHR","","",null,null],[17,"DEBUG_SOURCE_THIRD_PARTY","","",null,null],[17,"DEBUG_SOURCE_THIRD_PARTY_KHR","","",null,null],[17,"DEBUG_SOURCE_WINDOW_SYSTEM","","",null,null],[17,"DEBUG_SOURCE_WINDOW_SYSTEM_KHR","","",null,null],[17,"DEBUG_TYPE_DEPRECATED_BEHAVIOR","","",null,null],[17,"DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR","","",null,null],[17,"DEBUG_TYPE_ERROR","","",null,null],[17,"DEBUG_TYPE_ERROR_KHR","","",null,null],[17,"DEBUG_TYPE_MARKER","","",null,null],[17,"DEBUG_TYPE_MARKER_KHR","","",null,null],[17,"DEBUG_TYPE_OTHER","","",null,null],[17,"DEBUG_TYPE_OTHER_KHR","","",null,null],[17,"DEBUG_TYPE_PERFORMANCE","","",null,null],[17,"DEBUG_TYPE_PERFORMANCE_KHR","","",null,null],[17,"DEBUG_TYPE_POP_GROUP","","",null,null],[17,"DEBUG_TYPE_POP_GROUP_KHR","","",null,null],[17,"DEBUG_TYPE_PORTABILITY","","",null,null],[17,"DEBUG_TYPE_PORTABILITY_KHR","","",null,null],[17,"DEBUG_TYPE_PUSH_GROUP","","",null,null],[17,"DEBUG_TYPE_PUSH_GROUP_KHR","","",null,null],[17,"DEBUG_TYPE_UNDEFINED_BEHAVIOR","","",null,null],[17,"DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR","","",null,null],[17,"DECR","","",null,null],[17,"DECR_WRAP","","",null,null],[17,"DELETE_STATUS","","",null,null],[17,"DEPTH","","",null,null],[17,"DEPTH24_STENCIL8","","",null,null],[17,"DEPTH32F_STENCIL8","","",null,null],[17,"DEPTH_ATTACHMENT","","",null,null],[17,"DEPTH_BITS","","",null,null],[17,"DEPTH_BUFFER_BIT","","",null,null],[17,"DEPTH_CLAMP","","",null,null],[17,"DEPTH_CLEAR_VALUE","","",null,null],[17,"DEPTH_COMPONENT","","",null,null],[17,"DEPTH_COMPONENT16","","",null,null],[17,"DEPTH_COMPONENT24","","",null,null],[17,"DEPTH_COMPONENT32","","",null,null],[17,"DEPTH_COMPONENT32F","","",null,null],[17,"DEPTH_FUNC","","",null,null],[17,"DEPTH_RANGE","","",null,null],[17,"DEPTH_STENCIL","","",null,null],[17,"DEPTH_STENCIL_ATTACHMENT","","",null,null],[17,"DEPTH_TEST","","",null,null],[17,"DEPTH_WRITEMASK","","",null,null],[17,"DISPLAY_LIST","","",null,null],[17,"DITHER","","",null,null],[17,"DONT_CARE","","",null,null],[17,"DOUBLE","","",null,null],[17,"DOUBLEBUFFER","","",null,null],[17,"DRAW_BUFFER","","",null,null],[17,"DRAW_BUFFER0","","",null,null],[17,"DRAW_BUFFER1","","",null,null],[17,"DRAW_BUFFER10","","",null,null],[17,"DRAW_BUFFER11","","",null,null],[17,"DRAW_BUFFER12","","",null,null],[17,"DRAW_BUFFER13","","",null,null],[17,"DRAW_BUFFER14","","",null,null],[17,"DRAW_BUFFER15","","",null,null],[17,"DRAW_BUFFER2","","",null,null],[17,"DRAW_BUFFER3","","",null,null],[17,"DRAW_BUFFER4","","",null,null],[17,"DRAW_BUFFER5","","",null,null],[17,"DRAW_BUFFER6","","",null,null],[17,"DRAW_BUFFER7","","",null,null],[17,"DRAW_BUFFER8","","",null,null],[17,"DRAW_BUFFER9","","",null,null],[17,"DRAW_FRAMEBUFFER","","",null,null],[17,"DRAW_FRAMEBUFFER_BINDING","","",null,null],[17,"DRAW_PIXELS_APPLE","","",null,null],[17,"DST_ALPHA","","",null,null],[17,"DST_COLOR","","",null,null],[17,"DYNAMIC_COPY","","",null,null],[17,"DYNAMIC_DRAW","","",null,null],[17,"DYNAMIC_READ","","",null,null],[17,"ELEMENT_ARRAY_BUFFER","","",null,null],[17,"ELEMENT_ARRAY_BUFFER_BINDING","","",null,null],[17,"EQUAL","","",null,null],[17,"EQUIV","","",null,null],[17,"EXTENSIONS","","",null,null],[17,"FALSE","","",null,null],[17,"FASTEST","","",null,null],[17,"FENCE_APPLE","","",null,null],[17,"FILL","","",null,null],[17,"FIRST_VERTEX_CONVENTION","","",null,null],[17,"FIXED","","",null,null],[17,"FIXED_ONLY","","",null,null],[17,"FLOAT","","",null,null],[17,"FLOAT_32_UNSIGNED_INT_24_8_REV","","",null,null],[17,"FLOAT_MAT2","","",null,null],[17,"FLOAT_MAT2x3","","",null,null],[17,"FLOAT_MAT2x4","","",null,null],[17,"FLOAT_MAT3","","",null,null],[17,"FLOAT_MAT3x2","","",null,null],[17,"FLOAT_MAT3x4","","",null,null],[17,"FLOAT_MAT4","","",null,null],[17,"FLOAT_MAT4x2","","",null,null],[17,"FLOAT_MAT4x3","","",null,null],[17,"FLOAT_VEC2","","",null,null],[17,"FLOAT_VEC3","","",null,null],[17,"FLOAT_VEC4","","",null,null],[17,"FRAGMENT_SHADER","","",null,null],[17,"FRAGMENT_SHADER_DERIVATIVE_HINT","","",null,null],[17,"FRAMEBUFFER","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_BLUE_SIZE","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_GREEN_SIZE","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_LAYERED","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_OBJECT_NAME","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_RED_SIZE","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER","","",null,null],[17,"FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL","","",null,null],[17,"FRAMEBUFFER_BINDING","","",null,null],[17,"FRAMEBUFFER_COMPLETE","","",null,null],[17,"FRAMEBUFFER_DEFAULT","","",null,null],[17,"FRAMEBUFFER_INCOMPLETE_ATTACHMENT","","",null,null],[17,"FRAMEBUFFER_INCOMPLETE_DIMENSIONS","","",null,null],[17,"FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER","","",null,null],[17,"FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS","","",null,null],[17,"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","","",null,null],[17,"FRAMEBUFFER_INCOMPLETE_MULTISAMPLE","","",null,null],[17,"FRAMEBUFFER_INCOMPLETE_READ_BUFFER","","",null,null],[17,"FRAMEBUFFER_SRGB","","",null,null],[17,"FRAMEBUFFER_UNDEFINED","","",null,null],[17,"FRAMEBUFFER_UNSUPPORTED","","",null,null],[17,"FRONT","","",null,null],[17,"FRONT_AND_BACK","","",null,null],[17,"FRONT_FACE","","",null,null],[17,"FRONT_LEFT","","",null,null],[17,"FRONT_RIGHT","","",null,null],[17,"FUNC_ADD","","",null,null],[17,"FUNC_REVERSE_SUBTRACT","","",null,null],[17,"FUNC_SUBTRACT","","",null,null],[17,"GENERATE_MIPMAP_HINT","","",null,null],[17,"GEOMETRY_INPUT_TYPE","","",null,null],[17,"GEOMETRY_OUTPUT_TYPE","","",null,null],[17,"GEOMETRY_SHADER","","",null,null],[17,"GEOMETRY_VERTICES_OUT","","",null,null],[17,"GEQUAL","","",null,null],[17,"GPU_DISJOINT_EXT","","",null,null],[17,"GREATER","","",null,null],[17,"GREEN","","",null,null],[17,"GREEN_BITS","","",null,null],[17,"GREEN_INTEGER","","",null,null],[17,"HALF_FLOAT","","",null,null],[17,"HIGH_FLOAT","","",null,null],[17,"HIGH_INT","","",null,null],[17,"IMPLEMENTATION_COLOR_READ_FORMAT","","",null,null],[17,"IMPLEMENTATION_COLOR_READ_TYPE","","",null,null],[17,"INCR","","",null,null],[17,"INCR_WRAP","","",null,null],[17,"INDEX","","",null,null],[17,"INFO_LOG_LENGTH","","",null,null],[17,"INT","","",null,null],[17,"INTERLEAVED_ATTRIBS","","",null,null],[17,"INT_2_10_10_10_REV","","",null,null],[17,"INT_SAMPLER_1D","","",null,null],[17,"INT_SAMPLER_1D_ARRAY","","",null,null],[17,"INT_SAMPLER_2D","","",null,null],[17,"INT_SAMPLER_2D_ARRAY","","",null,null],[17,"INT_SAMPLER_2D_MULTISAMPLE","","",null,null],[17,"INT_SAMPLER_2D_MULTISAMPLE_ARRAY","","",null,null],[17,"INT_SAMPLER_2D_RECT","","",null,null],[17,"INT_SAMPLER_3D","","",null,null],[17,"INT_SAMPLER_BUFFER","","",null,null],[17,"INT_SAMPLER_CUBE","","",null,null],[17,"INT_VEC2","","",null,null],[17,"INT_VEC3","","",null,null],[17,"INT_VEC4","","",null,null],[17,"INVALID_ENUM","","",null,null],[17,"INVALID_FRAMEBUFFER_OPERATION","","",null,null],[17,"INVALID_INDEX","","",null,null],[17,"INVALID_OPERATION","","",null,null],[17,"INVALID_VALUE","","",null,null],[17,"INVERT","","",null,null],[17,"KEEP","","",null,null],[17,"LAST_VERTEX_CONVENTION","","",null,null],[17,"LEFT","","",null,null],[17,"LEQUAL","","",null,null],[17,"LESS","","",null,null],[17,"LINE","","",null,null],[17,"LINEAR","","",null,null],[17,"LINEAR_MIPMAP_LINEAR","","",null,null],[17,"LINEAR_MIPMAP_NEAREST","","",null,null],[17,"LINES","","",null,null],[17,"LINES_ADJACENCY","","",null,null],[17,"LINE_LOOP","","",null,null],[17,"LINE_SMOOTH","","",null,null],[17,"LINE_SMOOTH_HINT","","",null,null],[17,"LINE_STRIP","","",null,null],[17,"LINE_STRIP_ADJACENCY","","",null,null],[17,"LINE_WIDTH","","",null,null],[17,"LINE_WIDTH_GRANULARITY","","",null,null],[17,"LINE_WIDTH_RANGE","","",null,null],[17,"LINK_STATUS","","",null,null],[17,"LOGIC_OP_MODE","","",null,null],[17,"LOWER_LEFT","","",null,null],[17,"LOW_FLOAT","","",null,null],[17,"LOW_INT","","",null,null],[17,"LUMINANCE","","",null,null],[17,"LUMINANCE_ALPHA","","",null,null],[17,"MAJOR_VERSION","","",null,null],[17,"MAP_FLUSH_EXPLICIT_BIT","","",null,null],[17,"MAP_INVALIDATE_BUFFER_BIT","","",null,null],[17,"MAP_INVALIDATE_RANGE_BIT","","",null,null],[17,"MAP_READ_BIT","","",null,null],[17,"MAP_UNSYNCHRONIZED_BIT","","",null,null],[17,"MAP_WRITE_BIT","","",null,null],[17,"MAX","","",null,null],[17,"MAX_3D_TEXTURE_SIZE","","",null,null],[17,"MAX_ARRAY_TEXTURE_LAYERS","","",null,null],[17,"MAX_CLIP_DISTANCES","","",null,null],[17,"MAX_COLOR_ATTACHMENTS","","",null,null],[17,"MAX_COLOR_TEXTURE_SAMPLES","","",null,null],[17,"MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS","","",null,null],[17,"MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS","","",null,null],[17,"MAX_COMBINED_TEXTURE_IMAGE_UNITS","","",null,null],[17,"MAX_COMBINED_UNIFORM_BLOCKS","","",null,null],[17,"MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS","","",null,null],[17,"MAX_CUBE_MAP_TEXTURE_SIZE","","",null,null],[17,"MAX_DEBUG_GROUP_STACK_DEPTH","","",null,null],[17,"MAX_DEBUG_GROUP_STACK_DEPTH_KHR","","",null,null],[17,"MAX_DEBUG_LOGGED_MESSAGES","","",null,null],[17,"MAX_DEBUG_LOGGED_MESSAGES_KHR","","",null,null],[17,"MAX_DEBUG_MESSAGE_LENGTH","","",null,null],[17,"MAX_DEBUG_MESSAGE_LENGTH_KHR","","",null,null],[17,"MAX_DEPTH_TEXTURE_SAMPLES","","",null,null],[17,"MAX_DRAW_BUFFERS","","",null,null],[17,"MAX_DUAL_SOURCE_DRAW_BUFFERS","","",null,null],[17,"MAX_ELEMENTS_INDICES","","",null,null],[17,"MAX_ELEMENTS_VERTICES","","",null,null],[17,"MAX_ELEMENT_INDEX","","",null,null],[17,"MAX_FRAGMENT_INPUT_COMPONENTS","","",null,null],[17,"MAX_FRAGMENT_UNIFORM_BLOCKS","","",null,null],[17,"MAX_FRAGMENT_UNIFORM_COMPONENTS","","",null,null],[17,"MAX_FRAGMENT_UNIFORM_VECTORS","","",null,null],[17,"MAX_GEOMETRY_INPUT_COMPONENTS","","",null,null],[17,"MAX_GEOMETRY_OUTPUT_COMPONENTS","","",null,null],[17,"MAX_GEOMETRY_OUTPUT_VERTICES","","",null,null],[17,"MAX_GEOMETRY_TEXTURE_IMAGE_UNITS","","",null,null],[17,"MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS","","",null,null],[17,"MAX_GEOMETRY_UNIFORM_BLOCKS","","",null,null],[17,"MAX_GEOMETRY_UNIFORM_COMPONENTS","","",null,null],[17,"MAX_INTEGER_SAMPLES","","",null,null],[17,"MAX_LABEL_LENGTH","","",null,null],[17,"MAX_LABEL_LENGTH_KHR","","",null,null],[17,"MAX_PROGRAM_TEXEL_OFFSET","","",null,null],[17,"MAX_RECTANGLE_TEXTURE_SIZE","","",null,null],[17,"MAX_RECTANGLE_TEXTURE_SIZE_ARB","","",null,null],[17,"MAX_RENDERBUFFER_SIZE","","",null,null],[17,"MAX_SAMPLES","","",null,null],[17,"MAX_SAMPLE_MASK_WORDS","","",null,null],[17,"MAX_SERVER_WAIT_TIMEOUT","","",null,null],[17,"MAX_TEXTURE_BUFFER_SIZE","","",null,null],[17,"MAX_TEXTURE_IMAGE_UNITS","","",null,null],[17,"MAX_TEXTURE_LOD_BIAS","","",null,null],[17,"MAX_TEXTURE_SIZE","","",null,null],[17,"MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS","","",null,null],[17,"MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS","","",null,null],[17,"MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS","","",null,null],[17,"MAX_UNIFORM_BLOCK_SIZE","","",null,null],[17,"MAX_UNIFORM_BUFFER_BINDINGS","","",null,null],[17,"MAX_VARYING_COMPONENTS","","",null,null],[17,"MAX_VARYING_FLOATS","","",null,null],[17,"MAX_VARYING_VECTORS","","",null,null],[17,"MAX_VERTEX_ATTRIBS","","",null,null],[17,"MAX_VERTEX_OUTPUT_COMPONENTS","","",null,null],[17,"MAX_VERTEX_TEXTURE_IMAGE_UNITS","","",null,null],[17,"MAX_VERTEX_UNIFORM_BLOCKS","","",null,null],[17,"MAX_VERTEX_UNIFORM_COMPONENTS","","",null,null],[17,"MAX_VERTEX_UNIFORM_VECTORS","","",null,null],[17,"MAX_VIEWPORT_DIMS","","",null,null],[17,"MEDIUM_FLOAT","","",null,null],[17,"MEDIUM_INT","","",null,null],[17,"MIN","","",null,null],[17,"MINOR_VERSION","","",null,null],[17,"MIN_PROGRAM_TEXEL_OFFSET","","",null,null],[17,"MIRRORED_REPEAT","","",null,null],[17,"MULTISAMPLE","","",null,null],[17,"NAND","","",null,null],[17,"NEAREST","","",null,null],[17,"NEAREST_MIPMAP_LINEAR","","",null,null],[17,"NEAREST_MIPMAP_NEAREST","","",null,null],[17,"NEVER","","",null,null],[17,"NICEST","","",null,null],[17,"NONE","","",null,null],[17,"NOOP","","",null,null],[17,"NOR","","",null,null],[17,"NOTEQUAL","","",null,null],[17,"NO_ERROR","","",null,null],[17,"NUM_COMPRESSED_TEXTURE_FORMATS","","",null,null],[17,"NUM_EXTENSIONS","","",null,null],[17,"NUM_PROGRAM_BINARY_FORMATS","","",null,null],[17,"NUM_SAMPLE_COUNTS","","",null,null],[17,"NUM_SHADER_BINARY_FORMATS","","",null,null],[17,"OBJECT_TYPE","","",null,null],[17,"ONE","","",null,null],[17,"ONE_MINUS_CONSTANT_ALPHA","","",null,null],[17,"ONE_MINUS_CONSTANT_COLOR","","",null,null],[17,"ONE_MINUS_DST_ALPHA","","",null,null],[17,"ONE_MINUS_DST_COLOR","","",null,null],[17,"ONE_MINUS_SRC1_ALPHA","","",null,null],[17,"ONE_MINUS_SRC1_COLOR","","",null,null],[17,"ONE_MINUS_SRC_ALPHA","","",null,null],[17,"ONE_MINUS_SRC_COLOR","","",null,null],[17,"OR","","",null,null],[17,"OR_INVERTED","","",null,null],[17,"OR_REVERSE","","",null,null],[17,"OUT_OF_MEMORY","","",null,null],[17,"PACK_ALIGNMENT","","",null,null],[17,"PACK_IMAGE_HEIGHT","","",null,null],[17,"PACK_LSB_FIRST","","",null,null],[17,"PACK_ROW_LENGTH","","",null,null],[17,"PACK_SKIP_IMAGES","","",null,null],[17,"PACK_SKIP_PIXELS","","",null,null],[17,"PACK_SKIP_ROWS","","",null,null],[17,"PACK_SWAP_BYTES","","",null,null],[17,"PIXEL_PACK_BUFFER","","",null,null],[17,"PIXEL_PACK_BUFFER_BINDING","","",null,null],[17,"PIXEL_UNPACK_BUFFER","","",null,null],[17,"PIXEL_UNPACK_BUFFER_BINDING","","",null,null],[17,"POINT","","",null,null],[17,"POINTS","","",null,null],[17,"POINT_FADE_THRESHOLD_SIZE","","",null,null],[17,"POINT_SIZE","","",null,null],[17,"POINT_SIZE_GRANULARITY","","",null,null],[17,"POINT_SIZE_RANGE","","",null,null],[17,"POINT_SPRITE_COORD_ORIGIN","","",null,null],[17,"POLYGON_MODE","","",null,null],[17,"POLYGON_OFFSET_FACTOR","","",null,null],[17,"POLYGON_OFFSET_FILL","","",null,null],[17,"POLYGON_OFFSET_LINE","","",null,null],[17,"POLYGON_OFFSET_POINT","","",null,null],[17,"POLYGON_OFFSET_UNITS","","",null,null],[17,"POLYGON_SMOOTH","","",null,null],[17,"POLYGON_SMOOTH_HINT","","",null,null],[17,"PRIMITIVES_GENERATED","","",null,null],[17,"PRIMITIVE_RESTART","","",null,null],[17,"PRIMITIVE_RESTART_FIXED_INDEX","","",null,null],[17,"PRIMITIVE_RESTART_INDEX","","",null,null],[17,"PROGRAM","","",null,null],[17,"PROGRAM_BINARY_FORMATS","","",null,null],[17,"PROGRAM_BINARY_LENGTH","","",null,null],[17,"PROGRAM_BINARY_RETRIEVABLE_HINT","","",null,null],[17,"PROGRAM_KHR","","",null,null],[17,"PROGRAM_PIPELINE","","",null,null],[17,"PROGRAM_PIPELINE_KHR","","",null,null],[17,"PROGRAM_POINT_SIZE","","",null,null],[17,"PROVOKING_VERTEX","","",null,null],[17,"PROXY_TEXTURE_1D","","",null,null],[17,"PROXY_TEXTURE_1D_ARRAY","","",null,null],[17,"PROXY_TEXTURE_2D","","",null,null],[17,"PROXY_TEXTURE_2D_ARRAY","","",null,null],[17,"PROXY_TEXTURE_2D_MULTISAMPLE","","",null,null],[17,"PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY","","",null,null],[17,"PROXY_TEXTURE_3D","","",null,null],[17,"PROXY_TEXTURE_CUBE_MAP","","",null,null],[17,"PROXY_TEXTURE_RECTANGLE","","",null,null],[17,"PROXY_TEXTURE_RECTANGLE_ARB","","",null,null],[17,"QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION","","",null,null],[17,"QUERY","","",null,null],[17,"QUERY_BY_REGION_NO_WAIT","","",null,null],[17,"QUERY_BY_REGION_WAIT","","",null,null],[17,"QUERY_COUNTER_BITS","","",null,null],[17,"QUERY_COUNTER_BITS_EXT","","",null,null],[17,"QUERY_KHR","","",null,null],[17,"QUERY_NO_WAIT","","",null,null],[17,"QUERY_RESULT","","",null,null],[17,"QUERY_RESULT_AVAILABLE","","",null,null],[17,"QUERY_RESULT_AVAILABLE_EXT","","",null,null],[17,"QUERY_RESULT_EXT","","",null,null],[17,"QUERY_WAIT","","",null,null],[17,"R11F_G11F_B10F","","",null,null],[17,"R16","","",null,null],[17,"R16F","","",null,null],[17,"R16I","","",null,null],[17,"R16UI","","",null,null],[17,"R16_SNORM","","",null,null],[17,"R32F","","",null,null],[17,"R32I","","",null,null],[17,"R32UI","","",null,null],[17,"R3_G3_B2","","",null,null],[17,"R8","","",null,null],[17,"R8I","","",null,null],[17,"R8UI","","",null,null],[17,"R8_SNORM","","",null,null],[17,"RASTERIZER_DISCARD","","",null,null],[17,"READ_BUFFER","","",null,null],[17,"READ_FRAMEBUFFER","","",null,null],[17,"READ_FRAMEBUFFER_BINDING","","",null,null],[17,"READ_ONLY","","",null,null],[17,"READ_WRITE","","",null,null],[17,"RED","","",null,null],[17,"RED_BITS","","",null,null],[17,"RED_INTEGER","","",null,null],[17,"RENDERBUFFER","","",null,null],[17,"RENDERBUFFER_ALPHA_SIZE","","",null,null],[17,"RENDERBUFFER_BINDING","","",null,null],[17,"RENDERBUFFER_BLUE_SIZE","","",null,null],[17,"RENDERBUFFER_DEPTH_SIZE","","",null,null],[17,"RENDERBUFFER_GREEN_SIZE","","",null,null],[17,"RENDERBUFFER_HEIGHT","","",null,null],[17,"RENDERBUFFER_INTERNAL_FORMAT","","",null,null],[17,"RENDERBUFFER_RED_SIZE","","",null,null],[17,"RENDERBUFFER_SAMPLES","","",null,null],[17,"RENDERBUFFER_STENCIL_SIZE","","",null,null],[17,"RENDERBUFFER_WIDTH","","",null,null],[17,"RENDERER","","",null,null],[17,"REPEAT","","",null,null],[17,"REPLACE","","",null,null],[17,"REQUIRED_TEXTURE_IMAGE_UNITS_OES","","",null,null],[17,"RG","","",null,null],[17,"RG16","","",null,null],[17,"RG16F","","",null,null],[17,"RG16I","","",null,null],[17,"RG16UI","","",null,null],[17,"RG16_SNORM","","",null,null],[17,"RG32F","","",null,null],[17,"RG32I","","",null,null],[17,"RG32UI","","",null,null],[17,"RG8","","",null,null],[17,"RG8I","","",null,null],[17,"RG8UI","","",null,null],[17,"RG8_SNORM","","",null,null],[17,"RGB","","",null,null],[17,"RGB10","","",null,null],[17,"RGB10_A2","","",null,null],[17,"RGB10_A2UI","","",null,null],[17,"RGB12","","",null,null],[17,"RGB16","","",null,null],[17,"RGB16F","","",null,null],[17,"RGB16I","","",null,null],[17,"RGB16UI","","",null,null],[17,"RGB16_SNORM","","",null,null],[17,"RGB32F","","",null,null],[17,"RGB32I","","",null,null],[17,"RGB32UI","","",null,null],[17,"RGB4","","",null,null],[17,"RGB5","","",null,null],[17,"RGB565","","",null,null],[17,"RGB5_A1","","",null,null],[17,"RGB8","","",null,null],[17,"RGB8I","","",null,null],[17,"RGB8UI","","",null,null],[17,"RGB8_SNORM","","",null,null],[17,"RGB9_E5","","",null,null],[17,"RGBA","","",null,null],[17,"RGBA12","","",null,null],[17,"RGBA16","","",null,null],[17,"RGBA16F","","",null,null],[17,"RGBA16I","","",null,null],[17,"RGBA16UI","","",null,null],[17,"RGBA16_SNORM","","",null,null],[17,"RGBA2","","",null,null],[17,"RGBA32F","","",null,null],[17,"RGBA32I","","",null,null],[17,"RGBA32UI","","",null,null],[17,"RGBA4","","",null,null],[17,"RGBA8","","",null,null],[17,"RGBA8I","","",null,null],[17,"RGBA8UI","","",null,null],[17,"RGBA8_SNORM","","",null,null],[17,"RGBA_INTEGER","","",null,null],[17,"RGB_INTEGER","","",null,null],[17,"RG_INTEGER","","",null,null],[17,"RIGHT","","",null,null],[17,"SAMPLER","","",null,null],[17,"SAMPLER_1D","","",null,null],[17,"SAMPLER_1D_ARRAY","","",null,null],[17,"SAMPLER_1D_ARRAY_SHADOW","","",null,null],[17,"SAMPLER_1D_SHADOW","","",null,null],[17,"SAMPLER_2D","","",null,null],[17,"SAMPLER_2D_ARRAY","","",null,null],[17,"SAMPLER_2D_ARRAY_SHADOW","","",null,null],[17,"SAMPLER_2D_MULTISAMPLE","","",null,null],[17,"SAMPLER_2D_MULTISAMPLE_ARRAY","","",null,null],[17,"SAMPLER_2D_RECT","","",null,null],[17,"SAMPLER_2D_RECT_SHADOW","","",null,null],[17,"SAMPLER_2D_SHADOW","","",null,null],[17,"SAMPLER_3D","","",null,null],[17,"SAMPLER_BINDING","","",null,null],[17,"SAMPLER_BUFFER","","",null,null],[17,"SAMPLER_CUBE","","",null,null],[17,"SAMPLER_CUBE_SHADOW","","",null,null],[17,"SAMPLER_EXTERNAL_OES","","",null,null],[17,"SAMPLER_KHR","","",null,null],[17,"SAMPLES","","",null,null],[17,"SAMPLES_PASSED","","",null,null],[17,"SAMPLE_ALPHA_TO_COVERAGE","","",null,null],[17,"SAMPLE_ALPHA_TO_ONE","","",null,null],[17,"SAMPLE_BUFFERS","","",null,null],[17,"SAMPLE_COVERAGE","","",null,null],[17,"SAMPLE_COVERAGE_INVERT","","",null,null],[17,"SAMPLE_COVERAGE_VALUE","","",null,null],[17,"SAMPLE_MASK","","",null,null],[17,"SAMPLE_MASK_VALUE","","",null,null],[17,"SAMPLE_POSITION","","",null,null],[17,"SCISSOR_BOX","","",null,null],[17,"SCISSOR_TEST","","",null,null],[17,"SEPARATE_ATTRIBS","","",null,null],[17,"SET","","",null,null],[17,"SHADER","","",null,null],[17,"SHADER_BINARY_FORMATS","","",null,null],[17,"SHADER_COMPILER","","",null,null],[17,"SHADER_KHR","","",null,null],[17,"SHADER_SOURCE_LENGTH","","",null,null],[17,"SHADER_TYPE","","",null,null],[17,"SHADING_LANGUAGE_VERSION","","",null,null],[17,"SHORT","","",null,null],[17,"SIGNALED","","",null,null],[17,"SIGNED_NORMALIZED","","",null,null],[17,"SMOOTH_LINE_WIDTH_GRANULARITY","","",null,null],[17,"SMOOTH_LINE_WIDTH_RANGE","","",null,null],[17,"SMOOTH_POINT_SIZE_GRANULARITY","","",null,null],[17,"SMOOTH_POINT_SIZE_RANGE","","",null,null],[17,"SRC1_ALPHA","","",null,null],[17,"SRC1_COLOR","","",null,null],[17,"SRC_ALPHA","","",null,null],[17,"SRC_ALPHA_SATURATE","","",null,null],[17,"SRC_COLOR","","",null,null],[17,"SRGB","","",null,null],[17,"SRGB8","","",null,null],[17,"SRGB8_ALPHA8","","",null,null],[17,"SRGB_ALPHA","","",null,null],[17,"STACK_OVERFLOW","","",null,null],[17,"STACK_OVERFLOW_KHR","","",null,null],[17,"STACK_UNDERFLOW","","",null,null],[17,"STACK_UNDERFLOW_KHR","","",null,null],[17,"STATIC_COPY","","",null,null],[17,"STATIC_DRAW","","",null,null],[17,"STATIC_READ","","",null,null],[17,"STENCIL","","",null,null],[17,"STENCIL_ATTACHMENT","","",null,null],[17,"STENCIL_BACK_FAIL","","",null,null],[17,"STENCIL_BACK_FUNC","","",null,null],[17,"STENCIL_BACK_PASS_DEPTH_FAIL","","",null,null],[17,"STENCIL_BACK_PASS_DEPTH_PASS","","",null,null],[17,"STENCIL_BACK_REF","","",null,null],[17,"STENCIL_BACK_VALUE_MASK","","",null,null],[17,"STENCIL_BACK_WRITEMASK","","",null,null],[17,"STENCIL_BITS","","",null,null],[17,"STENCIL_BUFFER_BIT","","",null,null],[17,"STENCIL_CLEAR_VALUE","","",null,null],[17,"STENCIL_FAIL","","",null,null],[17,"STENCIL_FUNC","","",null,null],[17,"STENCIL_INDEX","","",null,null],[17,"STENCIL_INDEX1","","",null,null],[17,"STENCIL_INDEX16","","",null,null],[17,"STENCIL_INDEX4","","",null,null],[17,"STENCIL_INDEX8","","",null,null],[17,"STENCIL_PASS_DEPTH_FAIL","","",null,null],[17,"STENCIL_PASS_DEPTH_PASS","","",null,null],[17,"STENCIL_REF","","",null,null],[17,"STENCIL_TEST","","",null,null],[17,"STENCIL_VALUE_MASK","","",null,null],[17,"STENCIL_WRITEMASK","","",null,null],[17,"STEREO","","",null,null],[17,"STORAGE_CACHED_APPLE","","",null,null],[17,"STORAGE_PRIVATE_APPLE","","",null,null],[17,"STORAGE_SHARED_APPLE","","",null,null],[17,"STREAM_COPY","","",null,null],[17,"STREAM_DRAW","","",null,null],[17,"STREAM_READ","","",null,null],[17,"SUBPIXEL_BITS","","",null,null],[17,"SYNC_CONDITION","","",null,null],[17,"SYNC_FENCE","","",null,null],[17,"SYNC_FLAGS","","",null,null],[17,"SYNC_FLUSH_COMMANDS_BIT","","",null,null],[17,"SYNC_GPU_COMMANDS_COMPLETE","","",null,null],[17,"SYNC_STATUS","","",null,null],[17,"TEXTURE","","",null,null],[17,"TEXTURE0","","",null,null],[17,"TEXTURE1","","",null,null],[17,"TEXTURE10","","",null,null],[17,"TEXTURE11","","",null,null],[17,"TEXTURE12","","",null,null],[17,"TEXTURE13","","",null,null],[17,"TEXTURE14","","",null,null],[17,"TEXTURE15","","",null,null],[17,"TEXTURE16","","",null,null],[17,"TEXTURE17","","",null,null],[17,"TEXTURE18","","",null,null],[17,"TEXTURE19","","",null,null],[17,"TEXTURE2","","",null,null],[17,"TEXTURE20","","",null,null],[17,"TEXTURE21","","",null,null],[17,"TEXTURE22","","",null,null],[17,"TEXTURE23","","",null,null],[17,"TEXTURE24","","",null,null],[17,"TEXTURE25","","",null,null],[17,"TEXTURE26","","",null,null],[17,"TEXTURE27","","",null,null],[17,"TEXTURE28","","",null,null],[17,"TEXTURE29","","",null,null],[17,"TEXTURE3","","",null,null],[17,"TEXTURE30","","",null,null],[17,"TEXTURE31","","",null,null],[17,"TEXTURE4","","",null,null],[17,"TEXTURE5","","",null,null],[17,"TEXTURE6","","",null,null],[17,"TEXTURE7","","",null,null],[17,"TEXTURE8","","",null,null],[17,"TEXTURE9","","",null,null],[17,"TEXTURE_1D","","",null,null],[17,"TEXTURE_1D_ARRAY","","",null,null],[17,"TEXTURE_2D","","",null,null],[17,"TEXTURE_2D_ARRAY","","",null,null],[17,"TEXTURE_2D_MULTISAMPLE","","",null,null],[17,"TEXTURE_2D_MULTISAMPLE_ARRAY","","",null,null],[17,"TEXTURE_3D","","",null,null],[17,"TEXTURE_ALPHA_SIZE","","",null,null],[17,"TEXTURE_ALPHA_TYPE","","",null,null],[17,"TEXTURE_BASE_LEVEL","","",null,null],[17,"TEXTURE_BINDING_1D","","",null,null],[17,"TEXTURE_BINDING_1D_ARRAY","","",null,null],[17,"TEXTURE_BINDING_2D","","",null,null],[17,"TEXTURE_BINDING_2D_ARRAY","","",null,null],[17,"TEXTURE_BINDING_2D_MULTISAMPLE","","",null,null],[17,"TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY","","",null,null],[17,"TEXTURE_BINDING_3D","","",null,null],[17,"TEXTURE_BINDING_BUFFER","","",null,null],[17,"TEXTURE_BINDING_CUBE_MAP","","",null,null],[17,"TEXTURE_BINDING_EXTERNAL_OES","","",null,null],[17,"TEXTURE_BINDING_RECTANGLE","","",null,null],[17,"TEXTURE_BINDING_RECTANGLE_ARB","","",null,null],[17,"TEXTURE_BLUE_SIZE","","",null,null],[17,"TEXTURE_BLUE_TYPE","","",null,null],[17,"TEXTURE_BORDER_COLOR","","",null,null],[17,"TEXTURE_BUFFER","","",null,null],[17,"TEXTURE_BUFFER_DATA_STORE_BINDING","","",null,null],[17,"TEXTURE_COMPARE_FUNC","","",null,null],[17,"TEXTURE_COMPARE_MODE","","",null,null],[17,"TEXTURE_COMPRESSED","","",null,null],[17,"TEXTURE_COMPRESSED_IMAGE_SIZE","","",null,null],[17,"TEXTURE_COMPRESSION_HINT","","",null,null],[17,"TEXTURE_CUBE_MAP","","",null,null],[17,"TEXTURE_CUBE_MAP_NEGATIVE_X","","",null,null],[17,"TEXTURE_CUBE_MAP_NEGATIVE_Y","","",null,null],[17,"TEXTURE_CUBE_MAP_NEGATIVE_Z","","",null,null],[17,"TEXTURE_CUBE_MAP_POSITIVE_X","","",null,null],[17,"TEXTURE_CUBE_MAP_POSITIVE_Y","","",null,null],[17,"TEXTURE_CUBE_MAP_POSITIVE_Z","","",null,null],[17,"TEXTURE_CUBE_MAP_SEAMLESS","","",null,null],[17,"TEXTURE_DEPTH","","",null,null],[17,"TEXTURE_DEPTH_SIZE","","",null,null],[17,"TEXTURE_DEPTH_TYPE","","",null,null],[17,"TEXTURE_EXTERNAL_OES","","",null,null],[17,"TEXTURE_FIXED_SAMPLE_LOCATIONS","","",null,null],[17,"TEXTURE_GREEN_SIZE","","",null,null],[17,"TEXTURE_GREEN_TYPE","","",null,null],[17,"TEXTURE_HEIGHT","","",null,null],[17,"TEXTURE_IMMUTABLE_FORMAT","","",null,null],[17,"TEXTURE_IMMUTABLE_LEVELS","","",null,null],[17,"TEXTURE_INTERNAL_FORMAT","","",null,null],[17,"TEXTURE_LOD_BIAS","","",null,null],[17,"TEXTURE_MAG_FILTER","","",null,null],[17,"TEXTURE_MAX_LEVEL","","",null,null],[17,"TEXTURE_MAX_LOD","","",null,null],[17,"TEXTURE_MIN_FILTER","","",null,null],[17,"TEXTURE_MIN_LOD","","",null,null],[17,"TEXTURE_RANGE_LENGTH_APPLE","","",null,null],[17,"TEXTURE_RANGE_POINTER_APPLE","","",null,null],[17,"TEXTURE_RECTANGLE","","",null,null],[17,"TEXTURE_RECTANGLE_ARB","","",null,null],[17,"TEXTURE_RED_SIZE","","",null,null],[17,"TEXTURE_RED_TYPE","","",null,null],[17,"TEXTURE_SAMPLES","","",null,null],[17,"TEXTURE_SHARED_SIZE","","",null,null],[17,"TEXTURE_STENCIL_SIZE","","",null,null],[17,"TEXTURE_STORAGE_HINT_APPLE","","",null,null],[17,"TEXTURE_SWIZZLE_A","","",null,null],[17,"TEXTURE_SWIZZLE_B","","",null,null],[17,"TEXTURE_SWIZZLE_G","","",null,null],[17,"TEXTURE_SWIZZLE_R","","",null,null],[17,"TEXTURE_SWIZZLE_RGBA","","",null,null],[17,"TEXTURE_WIDTH","","",null,null],[17,"TEXTURE_WRAP_R","","",null,null],[17,"TEXTURE_WRAP_S","","",null,null],[17,"TEXTURE_WRAP_T","","",null,null],[17,"TIMEOUT_EXPIRED","","",null,null],[17,"TIMEOUT_IGNORED","","",null,null],[17,"TIMESTAMP","","",null,null],[17,"TIMESTAMP_EXT","","",null,null],[17,"TIME_ELAPSED","","",null,null],[17,"TIME_ELAPSED_EXT","","",null,null],[17,"TRANSFORM_FEEDBACK","","",null,null],[17,"TRANSFORM_FEEDBACK_ACTIVE","","",null,null],[17,"TRANSFORM_FEEDBACK_BINDING","","",null,null],[17,"TRANSFORM_FEEDBACK_BUFFER","","",null,null],[17,"TRANSFORM_FEEDBACK_BUFFER_BINDING","","",null,null],[17,"TRANSFORM_FEEDBACK_BUFFER_MODE","","",null,null],[17,"TRANSFORM_FEEDBACK_BUFFER_SIZE","","",null,null],[17,"TRANSFORM_FEEDBACK_BUFFER_START","","",null,null],[17,"TRANSFORM_FEEDBACK_PAUSED","","",null,null],[17,"TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN","","",null,null],[17,"TRANSFORM_FEEDBACK_VARYINGS","","",null,null],[17,"TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH","","",null,null],[17,"TRIANGLES","","",null,null],[17,"TRIANGLES_ADJACENCY","","",null,null],[17,"TRIANGLE_FAN","","",null,null],[17,"TRIANGLE_STRIP","","",null,null],[17,"TRIANGLE_STRIP_ADJACENCY","","",null,null],[17,"TRUE","","",null,null],[17,"UNIFORM_ARRAY_STRIDE","","",null,null],[17,"UNIFORM_BLOCK_ACTIVE_UNIFORMS","","",null,null],[17,"UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES","","",null,null],[17,"UNIFORM_BLOCK_BINDING","","",null,null],[17,"UNIFORM_BLOCK_DATA_SIZE","","",null,null],[17,"UNIFORM_BLOCK_INDEX","","",null,null],[17,"UNIFORM_BLOCK_NAME_LENGTH","","",null,null],[17,"UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER","","",null,null],[17,"UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER","","",null,null],[17,"UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER","","",null,null],[17,"UNIFORM_BUFFER","","",null,null],[17,"UNIFORM_BUFFER_BINDING","","",null,null],[17,"UNIFORM_BUFFER_OFFSET_ALIGNMENT","","",null,null],[17,"UNIFORM_BUFFER_SIZE","","",null,null],[17,"UNIFORM_BUFFER_START","","",null,null],[17,"UNIFORM_IS_ROW_MAJOR","","",null,null],[17,"UNIFORM_MATRIX_STRIDE","","",null,null],[17,"UNIFORM_NAME_LENGTH","","",null,null],[17,"UNIFORM_OFFSET","","",null,null],[17,"UNIFORM_SIZE","","",null,null],[17,"UNIFORM_TYPE","","",null,null],[17,"UNPACK_ALIGNMENT","","",null,null],[17,"UNPACK_CLIENT_STORAGE_APPLE","","",null,null],[17,"UNPACK_IMAGE_HEIGHT","","",null,null],[17,"UNPACK_LSB_FIRST","","",null,null],[17,"UNPACK_ROW_LENGTH","","",null,null],[17,"UNPACK_SKIP_IMAGES","","",null,null],[17,"UNPACK_SKIP_PIXELS","","",null,null],[17,"UNPACK_SKIP_ROWS","","",null,null],[17,"UNPACK_SWAP_BYTES","","",null,null],[17,"UNSIGNALED","","",null,null],[17,"UNSIGNED_BYTE","","",null,null],[17,"UNSIGNED_BYTE_2_3_3_REV","","",null,null],[17,"UNSIGNED_BYTE_3_3_2","","",null,null],[17,"UNSIGNED_INT","","",null,null],[17,"UNSIGNED_INT_10F_11F_11F_REV","","",null,null],[17,"UNSIGNED_INT_10_10_10_2","","",null,null],[17,"UNSIGNED_INT_24_8","","",null,null],[17,"UNSIGNED_INT_2_10_10_10_REV","","",null,null],[17,"UNSIGNED_INT_5_9_9_9_REV","","",null,null],[17,"UNSIGNED_INT_8_8_8_8","","",null,null],[17,"UNSIGNED_INT_8_8_8_8_REV","","",null,null],[17,"UNSIGNED_INT_SAMPLER_1D","","",null,null],[17,"UNSIGNED_INT_SAMPLER_1D_ARRAY","","",null,null],[17,"UNSIGNED_INT_SAMPLER_2D","","",null,null],[17,"UNSIGNED_INT_SAMPLER_2D_ARRAY","","",null,null],[17,"UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE","","",null,null],[17,"UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY","","",null,null],[17,"UNSIGNED_INT_SAMPLER_2D_RECT","","",null,null],[17,"UNSIGNED_INT_SAMPLER_3D","","",null,null],[17,"UNSIGNED_INT_SAMPLER_BUFFER","","",null,null],[17,"UNSIGNED_INT_SAMPLER_CUBE","","",null,null],[17,"UNSIGNED_INT_VEC2","","",null,null],[17,"UNSIGNED_INT_VEC3","","",null,null],[17,"UNSIGNED_INT_VEC4","","",null,null],[17,"UNSIGNED_NORMALIZED","","",null,null],[17,"UNSIGNED_SHORT","","",null,null],[17,"UNSIGNED_SHORT_1_5_5_5_REV","","",null,null],[17,"UNSIGNED_SHORT_4_4_4_4","","",null,null],[17,"UNSIGNED_SHORT_4_4_4_4_REV","","",null,null],[17,"UNSIGNED_SHORT_5_5_5_1","","",null,null],[17,"UNSIGNED_SHORT_5_6_5","","",null,null],[17,"UNSIGNED_SHORT_5_6_5_REV","","",null,null],[17,"UPPER_LEFT","","",null,null],[17,"VALIDATE_STATUS","","",null,null],[17,"VENDOR","","",null,null],[17,"VERSION","","",null,null],[17,"VERTEX_ARRAY","","",null,null],[17,"VERTEX_ARRAY_BINDING","","",null,null],[17,"VERTEX_ARRAY_KHR","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_BUFFER_BINDING","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_DIVISOR","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_ENABLED","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_INTEGER","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_NORMALIZED","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_POINTER","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_SIZE","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_STRIDE","","",null,null],[17,"VERTEX_ATTRIB_ARRAY_TYPE","","",null,null],[17,"VERTEX_PROGRAM_POINT_SIZE","","",null,null],[17,"VERTEX_SHADER","","",null,null],[17,"VIEWPORT","","",null,null],[17,"WAIT_FAILED","","",null,null],[17,"WRITE_ONLY","","",null,null],[17,"XOR","","",null,null],[17,"ZERO","","",null,null],[8,"Gl","","",null,null],[10,"get_type","","",4,{"inputs":[{"name":"self"}],"output":{"name":"gltype"}}],[10,"buffer_data_untyped","","",4,null],[10,"buffer_sub_data_untyped","","",4,null],[10,"tex_buffer","","",4,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"},{"name":"gluint"}],"output":null}],[10,"shader_source","","",4,null],[10,"read_buffer","","",4,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":null}],[10,"read_pixels_into_buffer","","",4,null],[10,"read_pixels","","",4,{"inputs":[{"name":"self"},{"name":"glint"},{"name":"glint"},{"name":"glsizei"},{"name":"glsizei"},{"name":"glenum"},{"name":"glenum"}],"output":{"generics":["u8"],"name":"vec"}}],[10,"sample_coverage","","",4,{"inputs":[{"name":"self"},{"name":"glclampf"},{"name":"bool"}],"output":null}],[10,"polygon_offset","","",4,{"inputs":[{"name":"self"},{"name":"glfloat"},{"name":"glfloat"}],"output":null}],[10,"pixel_store_i","","",4,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glint"}],"output":null}],[10,"gen_buffers","","",4,{"inputs":[{"name":"self"},{"name":"glsizei"}],"output":{"generics":["gluint"],"name":"vec"}}],[10,"gen_renderbuffers","","",4,{"inputs":[{"name":"self"},{"name":"glsizei"}],"output":{"generics":["gluint"],"name":"vec"}}],[10,"gen_framebuffers","","",4,{"inputs":[{"name":"self"},{"name":"glsizei"}],"output":{"generics":["gluint"],"name":"vec"}}],[10,"gen_textures","","",4,{"inputs":[{"name":"self"},{"name":"glsizei"}],"output":{"generics":["gluint"],"name":"vec"}}],[10,"gen_vertex_arrays","","",4,{"inputs":[{"name":"self"},{"name":"glsizei"}],"output":{"generics":["gluint"],"name":"vec"}}],[10,"gen_queries","","",4,{"inputs":[{"name":"self"},{"name":"glsizei"}],"output":{"generics":["gluint"],"name":"vec"}}],[10,"begin_query","","",4,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"gluint"}],"output":null}],[10,"end_query","","",4,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":null}],[10,"query_counter","","",4,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glenum"}],"output":null}],[10,"get_query_object_iv","","",4,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glenum"}],"output":{"name":"i32"}}],[10,"get_query_object_uiv","","",4,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glenum"}],"output":{"name":"u32"}}],[10,"get_query_object_i64v","","",4,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glenum"}],"output":{"name":"i64"}}],[10,"get_query_object_ui64v","","",4,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glenum"}],"output":{"name":"u64"}}],[10,"delete_queries","","",4,null],[10,"delete_vertex_arrays","","",4,null],[10,"delete_buffers","","",4,null],[10,"delete_renderbuffers","","",4,null],[10,"delete_framebuffers","","",4,null],[10,"delete_textures","","",4,null],[10,"framebuffer_renderbuffer","","",4,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"},{"name":"glenum"},{"name":"gluint"}],"output":null}],[10,"renderbuffer_storage","","",4,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"},{"name":"glsizei"},{"name":"glsizei"}],"output":null}],[10,"depth_func","","",4,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":null}],[10,"active_texture","","",4,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":null}],[10,"attach_shader","","",4,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"gluint"}],"output":null}],[10,"bind_attrib_location","","",4,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"gluint"},{"name":"str"}],"output":null}],[10,"get_uniform_iv","","",4,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glint"}],"output":{"generics":["glint"],"name":"vec"}}],[10,"get_uniform_fv","","",4,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glint"}],"output":{"generics":["glfloat"],"name":"vec"}}],[10,"get_uniform_block_index","","",4,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"str"}],"output":{"name":"gluint"}}],[10,"get_uniform_indices","","",4,null],[10,"bind_buffer_base","","",4,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"gluint"},{"name":"gluint"}],"output":null}],[10,"bind_buffer_range","","",4,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"gluint"},{"name":"gluint"},{"name":"glintptr"},{"name":"glsizeiptr"}],"output":null}],[10,"uniform_block_binding","","",4,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"gluint"},{"name":"gluint"}],"output":null}],[10,"bind_buffer","","",4,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"gluint"}],"output":null}],[10,"bind_vertex_array","","",4,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":null}],[10,"bind_renderbuffer","","",4,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"gluint"}],"output":null}],[10,"bind_framebuffer","","",4,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"gluint"}],"output":null}],[10,"bind_texture","","",4,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"gluint"}],"output":null}],[10,"draw_buffers","","",4,null],[10,"tex_image_2d","","",4,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glint"},{"name":"glint"},{"name":"glsizei"},{"name":"glsizei"},{"name":"glint"},{"name":"glenum"},{"name":"glenum"},{"name":"option"}],"output":null}],[10,"compressed_tex_image_2d","","",4,null],[10,"compressed_tex_sub_image_2d","","",4,null],[10,"tex_image_3d","","",4,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glint"},{"name":"glint"},{"name":"glsizei"},{"name":"glsizei"},{"name":"glsizei"},{"name":"glint"},{"name":"glenum"},{"name":"glenum"},{"name":"option"}],"output":null}],[10,"copy_tex_image_2d","","",4,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glint"},{"name":"glenum"},{"name":"glint"},{"name":"glint"},{"name":"glsizei"},{"name":"glsizei"},{"name":"glint"}],"output":null}],[10,"copy_tex_sub_image_2d","","",4,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glsizei"},{"name":"glsizei"}],"output":null}],[10,"copy_tex_sub_image_3d","","",4,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glsizei"},{"name":"glsizei"}],"output":null}],[10,"tex_sub_image_2d","","",4,null],[10,"tex_sub_image_2d_pbo","","",4,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glsizei"},{"name":"glsizei"},{"name":"glenum"},{"name":"glenum"},{"name":"usize"}],"output":null}],[10,"tex_sub_image_3d","","",4,null],[10,"tex_sub_image_3d_pbo","","",4,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glsizei"},{"name":"glsizei"},{"name":"glsizei"},{"name":"glenum"},{"name":"glenum"},{"name":"usize"}],"output":null}],[10,"get_tex_image_into_buffer","","",4,null],[10,"get_integer_v","","",4,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":{"name":"glint"}}],[10,"get_integer_64v","","",4,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":{"name":"glint64"}}],[10,"get_integer_iv","","",4,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"gluint"}],"output":{"name":"glint"}}],[10,"get_integer_64iv","","",4,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"gluint"}],"output":{"name":"glint64"}}],[10,"get_boolean_v","","",4,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":{"name":"glboolean"}}],[10,"get_float_v","","",4,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":{"name":"glfloat"}}],[10,"get_framebuffer_attachment_parameter_iv","","",4,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"},{"name":"glenum"}],"output":{"name":"glint"}}],[10,"get_renderbuffer_parameter_iv","","",4,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"}],"output":{"name":"glint"}}],[10,"get_tex_parameter_iv","","",4,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"}],"output":{"name":"glint"}}],[10,"get_tex_parameter_fv","","",4,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"}],"output":{"name":"glfloat"}}],[10,"tex_parameter_i","","",4,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"},{"name":"glint"}],"output":null}],[10,"tex_parameter_f","","",4,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"},{"name":"glfloat"}],"output":null}],[10,"framebuffer_texture_2d","","",4,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"},{"name":"glenum"},{"name":"gluint"},{"name":"glint"}],"output":null}],[10,"framebuffer_texture_layer","","",4,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"},{"name":"gluint"},{"name":"glint"},{"name":"glint"}],"output":null}],[10,"blit_framebuffer","","",4,{"inputs":[{"name":"self"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glbitfield"},{"name":"glenum"}],"output":null}],[10,"vertex_attrib_4f","","",4,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glfloat"},{"name":"glfloat"},{"name":"glfloat"},{"name":"glfloat"}],"output":null}],[10,"vertex_attrib_pointer_f32","","",4,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glint"},{"name":"bool"},{"name":"glsizei"},{"name":"gluint"}],"output":null}],[10,"vertex_attrib_pointer","","",4,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glint"},{"name":"glenum"},{"name":"bool"},{"name":"glsizei"},{"name":"gluint"}],"output":null}],[10,"vertex_attrib_i_pointer","","",4,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glint"},{"name":"glenum"},{"name":"glsizei"},{"name":"gluint"}],"output":null}],[10,"vertex_attrib_divisor","","",4,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"gluint"}],"output":null}],[10,"viewport","","",4,{"inputs":[{"name":"self"},{"name":"glint"},{"name":"glint"},{"name":"glsizei"},{"name":"glsizei"}],"output":null}],[10,"get_viewport","","",4,null],[10,"scissor","","",4,{"inputs":[{"name":"self"},{"name":"glint"},{"name":"glint"},{"name":"glsizei"},{"name":"glsizei"}],"output":null}],[10,"line_width","","",4,{"inputs":[{"name":"self"},{"name":"glfloat"}],"output":null}],[10,"use_program","","",4,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":null}],[10,"validate_program","","",4,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":null}],[10,"draw_arrays","","",4,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glint"},{"name":"glsizei"}],"output":null}],[10,"draw_arrays_instanced","","",4,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glint"},{"name":"glsizei"},{"name":"glsizei"}],"output":null}],[10,"draw_elements","","",4,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glsizei"},{"name":"glenum"},{"name":"gluint"}],"output":null}],[10,"draw_elements_instanced","","",4,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glsizei"},{"name":"glenum"},{"name":"gluint"},{"name":"glsizei"}],"output":null}],[10,"blend_color","","",4,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":null}],[10,"blend_func","","",4,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"}],"output":null}],[10,"blend_func_separate","","",4,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"},{"name":"glenum"},{"name":"glenum"}],"output":null}],[10,"blend_equation","","",4,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":null}],[10,"blend_equation_separate","","",4,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"}],"output":null}],[10,"color_mask","","",4,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"}],"output":null}],[10,"cull_face","","",4,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":null}],[10,"front_face","","",4,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":null}],[10,"enable","","",4,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":null}],[10,"disable","","",4,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":null}],[10,"hint","","",4,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"}],"output":null}],[10,"is_enabled","","",4,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":{"name":"glboolean"}}],[10,"is_shader","","",4,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":{"name":"glboolean"}}],[10,"is_texture","","",4,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":{"name":"glboolean"}}],[10,"is_framebuffer","","",4,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":{"name":"glboolean"}}],[10,"is_renderbuffer","","",4,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":{"name":"glboolean"}}],[10,"check_frame_buffer_status","","",4,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":{"name":"glenum"}}],[10,"enable_vertex_attrib_array","","",4,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":null}],[10,"disable_vertex_attrib_array","","",4,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":null}],[10,"uniform_1f","","",4,{"inputs":[{"name":"self"},{"name":"glint"},{"name":"glfloat"}],"output":null}],[10,"uniform_1fv","","",4,null],[10,"uniform_1i","","",4,{"inputs":[{"name":"self"},{"name":"glint"},{"name":"glint"}],"output":null}],[10,"uniform_1iv","","",4,null],[10,"uniform_1ui","","",4,{"inputs":[{"name":"self"},{"name":"glint"},{"name":"gluint"}],"output":null}],[10,"uniform_2f","","",4,{"inputs":[{"name":"self"},{"name":"glint"},{"name":"glfloat"},{"name":"glfloat"}],"output":null}],[10,"uniform_2fv","","",4,null],[10,"uniform_2i","","",4,{"inputs":[{"name":"self"},{"name":"glint"},{"name":"glint"},{"name":"glint"}],"output":null}],[10,"uniform_2iv","","",4,null],[10,"uniform_2ui","","",4,{"inputs":[{"name":"self"},{"name":"glint"},{"name":"gluint"},{"name":"gluint"}],"output":null}],[10,"uniform_3f","","",4,{"inputs":[{"name":"self"},{"name":"glint"},{"name":"glfloat"},{"name":"glfloat"},{"name":"glfloat"}],"output":null}],[10,"uniform_3fv","","",4,null],[10,"uniform_3i","","",4,{"inputs":[{"name":"self"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"}],"output":null}],[10,"uniform_3iv","","",4,null],[10,"uniform_3ui","","",4,{"inputs":[{"name":"self"},{"name":"glint"},{"name":"gluint"},{"name":"gluint"},{"name":"gluint"}],"output":null}],[10,"uniform_4f","","",4,{"inputs":[{"name":"self"},{"name":"glint"},{"name":"glfloat"},{"name":"glfloat"},{"name":"glfloat"},{"name":"glfloat"}],"output":null}],[10,"uniform_4i","","",4,{"inputs":[{"name":"self"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"}],"output":null}],[10,"uniform_4iv","","",4,null],[10,"uniform_4ui","","",4,{"inputs":[{"name":"self"},{"name":"glint"},{"name":"gluint"},{"name":"gluint"},{"name":"gluint"},{"name":"gluint"}],"output":null}],[10,"uniform_4fv","","",4,null],[10,"uniform_matrix_2fv","","",4,null],[10,"uniform_matrix_3fv","","",4,null],[10,"uniform_matrix_4fv","","",4,null],[10,"depth_mask","","",4,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[10,"depth_range","","",4,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":null}],[10,"get_active_attrib","","",4,null],[10,"get_active_uniform","","",4,null],[10,"get_active_uniforms_iv","","",4,{"inputs":[{"name":"self"},{"name":"gluint"},{"generics":["gluint"],"name":"vec"},{"name":"glenum"}],"output":{"generics":["glint"],"name":"vec"}}],[10,"get_active_uniform_block_i","","",4,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"gluint"},{"name":"glenum"}],"output":{"name":"glint"}}],[10,"get_active_uniform_block_iv","","",4,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"gluint"},{"name":"glenum"}],"output":{"generics":["glint"],"name":"vec"}}],[10,"get_active_uniform_block_name","","",4,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"gluint"}],"output":{"name":"string"}}],[10,"get_attrib_location","","",4,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"str"}],"output":{"name":"c_int"}}],[10,"get_frag_data_location","","",4,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"str"}],"output":{"name":"c_int"}}],[10,"get_uniform_location","","",4,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"str"}],"output":{"name":"c_int"}}],[10,"get_program_info_log","","",4,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":{"name":"string"}}],[10,"get_program_iv","","",4,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glenum"}],"output":{"name":"glint"}}],[10,"get_program_binary","","",4,null],[10,"program_binary","","",4,null],[10,"program_parameter_i","","",4,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glenum"},{"name":"glint"}],"output":null}],[10,"get_vertex_attrib_iv","","",4,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glenum"}],"output":{"name":"glint"}}],[10,"get_vertex_attrib_fv","","",4,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glenum"}],"output":{"generics":["glfloat"],"name":"vec"}}],[10,"get_vertex_attrib_pointer_v","","",4,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glenum"}],"output":{"name":"glsizeiptr"}}],[10,"get_buffer_parameter_iv","","",4,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glenum"}],"output":{"name":"glint"}}],[10,"get_shader_info_log","","",4,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":{"name":"string"}}],[10,"get_string","","",4,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":{"name":"string"}}],[10,"get_string_i","","",4,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"gluint"}],"output":{"name":"string"}}],[10,"get_shader_iv","","",4,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glenum"}],"output":{"name":"glint"}}],[10,"get_shader_precision_format","","",4,null],[10,"compile_shader","","",4,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":null}],[10,"create_program","","",4,{"inputs":[{"name":"self"}],"output":{"name":"gluint"}}],[10,"delete_program","","",4,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":null}],[10,"create_shader","","",4,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":{"name":"gluint"}}],[10,"delete_shader","","",4,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":null}],[10,"detach_shader","","",4,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"gluint"}],"output":null}],[10,"link_program","","",4,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":null}],[10,"clear_color","","",4,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":null}],[10,"clear","","",4,{"inputs":[{"name":"self"},{"name":"glbitfield"}],"output":null}],[10,"clear_depth","","",4,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[10,"clear_stencil","","",4,{"inputs":[{"name":"self"},{"name":"glint"}],"output":null}],[10,"flush","","",4,{"inputs":[{"name":"self"}],"output":null}],[10,"finish","","",4,{"inputs":[{"name":"self"}],"output":null}],[10,"get_error","","",4,{"inputs":[{"name":"self"}],"output":{"name":"glenum"}}],[10,"stencil_mask","","",4,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":null}],[10,"stencil_mask_separate","","",4,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"gluint"}],"output":null}],[10,"stencil_func","","",4,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glint"},{"name":"gluint"}],"output":null}],[10,"stencil_func_separate","","",4,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"},{"name":"glint"},{"name":"gluint"}],"output":null}],[10,"stencil_op","","",4,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"},{"name":"glenum"}],"output":null}],[10,"stencil_op_separate","","",4,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"},{"name":"glenum"},{"name":"glenum"}],"output":null}],[10,"egl_image_target_texture2d_oes","","",4,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"gleglimageoes"}],"output":null}],[10,"generate_mipmap","","",4,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":null}],[10,"insert_event_marker_ext","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"push_group_marker_ext","","",4,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"pop_group_marker_ext","","",4,{"inputs":[{"name":"self"}],"output":null}],[10,"fence_sync","","",4,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glbitfield"}],"output":{"name":"glsync"}}],[10,"client_wait_sync","","",4,{"inputs":[{"name":"self"},{"name":"glsync"},{"name":"glbitfield"},{"name":"gluint64"}],"output":null}],[10,"wait_sync","","",4,{"inputs":[{"name":"self"},{"name":"glsync"},{"name":"glbitfield"},{"name":"gluint64"}],"output":null}],[10,"delete_sync","","",4,{"inputs":[{"name":"self"},{"name":"glsync"}],"output":null}],[10,"texture_range_apple","","",4,null],[10,"gen_fences_apple","","",4,{"inputs":[{"name":"self"},{"name":"glsizei"}],"output":{"generics":["gluint"],"name":"vec"}}],[10,"delete_fences_apple","","",4,null],[10,"set_fence_apple","","",4,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":null}],[10,"finish_fence_apple","","",4,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":null}],[10,"test_fence_apple","","",4,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":null}],[10,"bind_frag_data_location_indexed","","",4,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"gluint"},{"name":"gluint"},{"name":"str"}],"output":null}],[10,"get_frag_data_index","","",4,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"str"}],"output":{"name":"glint"}}],[10,"alias_point_size_range","","",4,null],[10,"max_viewport_dims","","Returns the the maximum supported width and height of the viewport.",4,null],[10,"get_debug_messages","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["debugmessage"],"name":"vec"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"gltype"}],"output":{"name":"bool"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"gltype"}}],[11,"load_with","","",5,{"inputs":[{"name":"f"}],"output":{"generics":["gl"],"name":"rc"}}],[11,"get_type","","",5,{"inputs":[{"name":"self"}],"output":{"name":"gltype"}}],[11,"buffer_data_untyped","","",5,null],[11,"buffer_sub_data_untyped","","",5,null],[11,"shader_source","","",5,null],[11,"tex_buffer","","",5,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"},{"name":"gluint"}],"output":null}],[11,"read_buffer","","",5,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":null}],[11,"read_pixels_into_buffer","","",5,null],[11,"read_pixels","","",5,{"inputs":[{"name":"self"},{"name":"glint"},{"name":"glint"},{"name":"glsizei"},{"name":"glsizei"},{"name":"glenum"},{"name":"glenum"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"sample_coverage","","",5,{"inputs":[{"name":"self"},{"name":"glclampf"},{"name":"bool"}],"output":null}],[11,"polygon_offset","","",5,{"inputs":[{"name":"self"},{"name":"glfloat"},{"name":"glfloat"}],"output":null}],[11,"pixel_store_i","","",5,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glint"}],"output":null}],[11,"gen_buffers","","",5,{"inputs":[{"name":"self"},{"name":"glsizei"}],"output":{"generics":["gluint"],"name":"vec"}}],[11,"gen_renderbuffers","","",5,{"inputs":[{"name":"self"},{"name":"glsizei"}],"output":{"generics":["gluint"],"name":"vec"}}],[11,"gen_framebuffers","","",5,{"inputs":[{"name":"self"},{"name":"glsizei"}],"output":{"generics":["gluint"],"name":"vec"}}],[11,"gen_textures","","",5,{"inputs":[{"name":"self"},{"name":"glsizei"}],"output":{"generics":["gluint"],"name":"vec"}}],[11,"gen_vertex_arrays","","",5,{"inputs":[{"name":"self"},{"name":"glsizei"}],"output":{"generics":["gluint"],"name":"vec"}}],[11,"gen_queries","","",5,{"inputs":[{"name":"self"},{"name":"glsizei"}],"output":{"generics":["gluint"],"name":"vec"}}],[11,"begin_query","","",5,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"gluint"}],"output":null}],[11,"end_query","","",5,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":null}],[11,"query_counter","","",5,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glenum"}],"output":null}],[11,"get_query_object_iv","","",5,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glenum"}],"output":{"name":"i32"}}],[11,"get_query_object_uiv","","",5,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glenum"}],"output":{"name":"u32"}}],[11,"get_query_object_i64v","","",5,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glenum"}],"output":{"name":"i64"}}],[11,"get_query_object_ui64v","","",5,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glenum"}],"output":{"name":"u64"}}],[11,"delete_queries","","",5,null],[11,"delete_vertex_arrays","","",5,null],[11,"delete_buffers","","",5,null],[11,"delete_renderbuffers","","",5,null],[11,"delete_framebuffers","","",5,null],[11,"delete_textures","","",5,null],[11,"framebuffer_renderbuffer","","",5,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"},{"name":"glenum"},{"name":"gluint"}],"output":null}],[11,"renderbuffer_storage","","",5,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"},{"name":"glsizei"},{"name":"glsizei"}],"output":null}],[11,"depth_func","","",5,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":null}],[11,"active_texture","","",5,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":null}],[11,"attach_shader","","",5,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"gluint"}],"output":null}],[11,"bind_attrib_location","","",5,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"gluint"},{"name":"str"}],"output":null}],[11,"get_uniform_iv","","",5,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glint"}],"output":{"generics":["glint"],"name":"vec"}}],[11,"get_uniform_fv","","",5,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glint"}],"output":{"generics":["glfloat"],"name":"vec"}}],[11,"get_uniform_block_index","","",5,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"str"}],"output":{"name":"gluint"}}],[11,"get_uniform_indices","","",5,null],[11,"bind_buffer_base","","",5,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"gluint"},{"name":"gluint"}],"output":null}],[11,"bind_buffer_range","","",5,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"gluint"},{"name":"gluint"},{"name":"glintptr"},{"name":"glsizeiptr"}],"output":null}],[11,"uniform_block_binding","","",5,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"gluint"},{"name":"gluint"}],"output":null}],[11,"bind_buffer","","",5,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"gluint"}],"output":null}],[11,"bind_vertex_array","","",5,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":null}],[11,"bind_renderbuffer","","",5,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"gluint"}],"output":null}],[11,"bind_framebuffer","","",5,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"gluint"}],"output":null}],[11,"bind_texture","","",5,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"gluint"}],"output":null}],[11,"draw_buffers","","",5,null],[11,"tex_image_2d","","",5,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glint"},{"name":"glint"},{"name":"glsizei"},{"name":"glsizei"},{"name":"glint"},{"name":"glenum"},{"name":"glenum"},{"name":"option"}],"output":null}],[11,"compressed_tex_image_2d","","",5,null],[11,"compressed_tex_sub_image_2d","","",5,null],[11,"tex_image_3d","","",5,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glint"},{"name":"glint"},{"name":"glsizei"},{"name":"glsizei"},{"name":"glsizei"},{"name":"glint"},{"name":"glenum"},{"name":"glenum"},{"name":"option"}],"output":null}],[11,"copy_tex_image_2d","","",5,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glint"},{"name":"glenum"},{"name":"glint"},{"name":"glint"},{"name":"glsizei"},{"name":"glsizei"},{"name":"glint"}],"output":null}],[11,"copy_tex_sub_image_2d","","",5,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glsizei"},{"name":"glsizei"}],"output":null}],[11,"copy_tex_sub_image_3d","","",5,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glsizei"},{"name":"glsizei"}],"output":null}],[11,"tex_sub_image_2d","","",5,null],[11,"tex_sub_image_2d_pbo","","",5,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glsizei"},{"name":"glsizei"},{"name":"glenum"},{"name":"glenum"},{"name":"usize"}],"output":null}],[11,"tex_sub_image_3d","","",5,null],[11,"tex_sub_image_3d_pbo","","",5,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glsizei"},{"name":"glsizei"},{"name":"glsizei"},{"name":"glenum"},{"name":"glenum"},{"name":"usize"}],"output":null}],[11,"get_tex_image_into_buffer","","",5,null],[11,"get_integer_v","","",5,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":{"name":"glint"}}],[11,"get_integer_64v","","",5,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":{"name":"glint64"}}],[11,"get_integer_iv","","",5,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"gluint"}],"output":{"name":"glint"}}],[11,"get_integer_64iv","","",5,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"gluint"}],"output":{"name":"glint64"}}],[11,"get_boolean_v","","",5,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":{"name":"glboolean"}}],[11,"get_float_v","","",5,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":{"name":"glfloat"}}],[11,"get_framebuffer_attachment_parameter_iv","","",5,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"},{"name":"glenum"}],"output":{"name":"glint"}}],[11,"get_renderbuffer_parameter_iv","","",5,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"}],"output":{"name":"glint"}}],[11,"get_tex_parameter_iv","","",5,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"}],"output":{"name":"glint"}}],[11,"get_tex_parameter_fv","","",5,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"}],"output":{"name":"glfloat"}}],[11,"tex_parameter_i","","",5,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"},{"name":"glint"}],"output":null}],[11,"tex_parameter_f","","",5,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"},{"name":"glfloat"}],"output":null}],[11,"framebuffer_texture_2d","","",5,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"},{"name":"glenum"},{"name":"gluint"},{"name":"glint"}],"output":null}],[11,"framebuffer_texture_layer","","",5,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"},{"name":"gluint"},{"name":"glint"},{"name":"glint"}],"output":null}],[11,"blit_framebuffer","","",5,{"inputs":[{"name":"self"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glbitfield"},{"name":"glenum"}],"output":null}],[11,"vertex_attrib_4f","","",5,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glfloat"},{"name":"glfloat"},{"name":"glfloat"},{"name":"glfloat"}],"output":null}],[11,"vertex_attrib_pointer_f32","","",5,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glint"},{"name":"bool"},{"name":"glsizei"},{"name":"gluint"}],"output":null}],[11,"vertex_attrib_pointer","","",5,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glint"},{"name":"glenum"},{"name":"bool"},{"name":"glsizei"},{"name":"gluint"}],"output":null}],[11,"vertex_attrib_i_pointer","","",5,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glint"},{"name":"glenum"},{"name":"glsizei"},{"name":"gluint"}],"output":null}],[11,"vertex_attrib_divisor","","",5,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"gluint"}],"output":null}],[11,"viewport","","",5,{"inputs":[{"name":"self"},{"name":"glint"},{"name":"glint"},{"name":"glsizei"},{"name":"glsizei"}],"output":null}],[11,"get_viewport","","",5,null],[11,"scissor","","",5,{"inputs":[{"name":"self"},{"name":"glint"},{"name":"glint"},{"name":"glsizei"},{"name":"glsizei"}],"output":null}],[11,"line_width","","",5,{"inputs":[{"name":"self"},{"name":"glfloat"}],"output":null}],[11,"use_program","","",5,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":null}],[11,"validate_program","","",5,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":null}],[11,"draw_arrays","","",5,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glint"},{"name":"glsizei"}],"output":null}],[11,"draw_arrays_instanced","","",5,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glint"},{"name":"glsizei"},{"name":"glsizei"}],"output":null}],[11,"draw_elements","","",5,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glsizei"},{"name":"glenum"},{"name":"gluint"}],"output":null}],[11,"draw_elements_instanced","","",5,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glsizei"},{"name":"glenum"},{"name":"gluint"},{"name":"glsizei"}],"output":null}],[11,"blend_color","","",5,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":null}],[11,"blend_func","","",5,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"}],"output":null}],[11,"blend_func_separate","","",5,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"},{"name":"glenum"},{"name":"glenum"}],"output":null}],[11,"blend_equation","","",5,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":null}],[11,"blend_equation_separate","","",5,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"}],"output":null}],[11,"color_mask","","",5,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"}],"output":null}],[11,"cull_face","","",5,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":null}],[11,"front_face","","",5,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":null}],[11,"enable","","",5,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":null}],[11,"disable","","",5,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":null}],[11,"hint","","",5,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"}],"output":null}],[11,"is_enabled","","",5,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":{"name":"glboolean"}}],[11,"is_shader","","",5,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":{"name":"glboolean"}}],[11,"is_texture","","",5,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":{"name":"glboolean"}}],[11,"is_framebuffer","","",5,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":{"name":"glboolean"}}],[11,"is_renderbuffer","","",5,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":{"name":"glboolean"}}],[11,"check_frame_buffer_status","","",5,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":{"name":"glenum"}}],[11,"enable_vertex_attrib_array","","",5,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":null}],[11,"disable_vertex_attrib_array","","",5,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":null}],[11,"uniform_1f","","",5,{"inputs":[{"name":"self"},{"name":"glint"},{"name":"glfloat"}],"output":null}],[11,"uniform_1fv","","",5,null],[11,"uniform_1i","","",5,{"inputs":[{"name":"self"},{"name":"glint"},{"name":"glint"}],"output":null}],[11,"uniform_1iv","","",5,null],[11,"uniform_1ui","","",5,{"inputs":[{"name":"self"},{"name":"glint"},{"name":"gluint"}],"output":null}],[11,"uniform_2f","","",5,{"inputs":[{"name":"self"},{"name":"glint"},{"name":"glfloat"},{"name":"glfloat"}],"output":null}],[11,"uniform_2fv","","",5,null],[11,"uniform_2i","","",5,{"inputs":[{"name":"self"},{"name":"glint"},{"name":"glint"},{"name":"glint"}],"output":null}],[11,"uniform_2iv","","",5,null],[11,"uniform_2ui","","",5,{"inputs":[{"name":"self"},{"name":"glint"},{"name":"gluint"},{"name":"gluint"}],"output":null}],[11,"uniform_3f","","",5,{"inputs":[{"name":"self"},{"name":"glint"},{"name":"glfloat"},{"name":"glfloat"},{"name":"glfloat"}],"output":null}],[11,"uniform_3fv","","",5,null],[11,"uniform_3i","","",5,{"inputs":[{"name":"self"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"}],"output":null}],[11,"uniform_3iv","","",5,null],[11,"uniform_3ui","","",5,{"inputs":[{"name":"self"},{"name":"glint"},{"name":"gluint"},{"name":"gluint"},{"name":"gluint"}],"output":null}],[11,"uniform_4f","","",5,{"inputs":[{"name":"self"},{"name":"glint"},{"name":"glfloat"},{"name":"glfloat"},{"name":"glfloat"},{"name":"glfloat"}],"output":null}],[11,"uniform_4i","","",5,{"inputs":[{"name":"self"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"}],"output":null}],[11,"uniform_4iv","","",5,null],[11,"uniform_4ui","","",5,{"inputs":[{"name":"self"},{"name":"glint"},{"name":"gluint"},{"name":"gluint"},{"name":"gluint"},{"name":"gluint"}],"output":null}],[11,"uniform_4fv","","",5,null],[11,"uniform_matrix_2fv","","",5,null],[11,"uniform_matrix_3fv","","",5,null],[11,"uniform_matrix_4fv","","",5,null],[11,"depth_mask","","",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"depth_range","","",5,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":null}],[11,"get_active_attrib","","",5,null],[11,"get_active_uniform","","",5,null],[11,"get_active_uniforms_iv","","",5,{"inputs":[{"name":"self"},{"name":"gluint"},{"generics":["gluint"],"name":"vec"},{"name":"glenum"}],"output":{"generics":["glint"],"name":"vec"}}],[11,"get_active_uniform_block_i","","",5,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"gluint"},{"name":"glenum"}],"output":{"name":"glint"}}],[11,"get_active_uniform_block_iv","","",5,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"gluint"},{"name":"glenum"}],"output":{"generics":["glint"],"name":"vec"}}],[11,"get_active_uniform_block_name","","",5,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"gluint"}],"output":{"name":"string"}}],[11,"get_attrib_location","","",5,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"str"}],"output":{"name":"c_int"}}],[11,"get_frag_data_location","","",5,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"str"}],"output":{"name":"c_int"}}],[11,"get_uniform_location","","",5,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"str"}],"output":{"name":"c_int"}}],[11,"get_program_info_log","","",5,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":{"name":"string"}}],[11,"get_program_iv","","",5,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glenum"}],"output":{"name":"glint"}}],[11,"get_program_binary","","",5,null],[11,"program_binary","","",5,null],[11,"program_parameter_i","","",5,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glenum"},{"name":"glint"}],"output":null}],[11,"get_vertex_attrib_iv","","",5,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glenum"}],"output":{"name":"glint"}}],[11,"get_vertex_attrib_fv","","",5,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glenum"}],"output":{"generics":["glfloat"],"name":"vec"}}],[11,"get_vertex_attrib_pointer_v","","",5,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glenum"}],"output":{"name":"glsizeiptr"}}],[11,"get_buffer_parameter_iv","","",5,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glenum"}],"output":{"name":"glint"}}],[11,"get_shader_info_log","","",5,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":{"name":"string"}}],[11,"get_string","","",5,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":{"name":"string"}}],[11,"get_string_i","","",5,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"gluint"}],"output":{"name":"string"}}],[11,"get_shader_iv","","",5,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glenum"}],"output":{"name":"glint"}}],[11,"get_shader_precision_format","","",5,null],[11,"compile_shader","","",5,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":null}],[11,"create_program","","",5,{"inputs":[{"name":"self"}],"output":{"name":"gluint"}}],[11,"delete_program","","",5,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":null}],[11,"create_shader","","",5,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":{"name":"gluint"}}],[11,"delete_shader","","",5,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":null}],[11,"detach_shader","","",5,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"gluint"}],"output":null}],[11,"link_program","","",5,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":null}],[11,"clear_color","","",5,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":null}],[11,"clear","","",5,{"inputs":[{"name":"self"},{"name":"glbitfield"}],"output":null}],[11,"clear_depth","","",5,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"clear_stencil","","",5,{"inputs":[{"name":"self"},{"name":"glint"}],"output":null}],[11,"flush","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"finish","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"get_error","","",5,{"inputs":[{"name":"self"}],"output":{"name":"glenum"}}],[11,"stencil_mask","","",5,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":null}],[11,"stencil_mask_separate","","",5,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"gluint"}],"output":null}],[11,"stencil_func","","",5,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glint"},{"name":"gluint"}],"output":null}],[11,"stencil_func_separate","","",5,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"},{"name":"glint"},{"name":"gluint"}],"output":null}],[11,"stencil_op","","",5,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"},{"name":"glenum"}],"output":null}],[11,"stencil_op_separate","","",5,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"},{"name":"glenum"},{"name":"glenum"}],"output":null}],[11,"egl_image_target_texture2d_oes","","",5,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"gleglimageoes"}],"output":null}],[11,"generate_mipmap","","",5,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":null}],[11,"insert_event_marker_ext","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"push_group_marker_ext","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"pop_group_marker_ext","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"fence_sync","","",5,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glbitfield"}],"output":{"name":"glsync"}}],[11,"client_wait_sync","","",5,{"inputs":[{"name":"self"},{"name":"glsync"},{"name":"glbitfield"},{"name":"gluint64"}],"output":null}],[11,"wait_sync","","",5,{"inputs":[{"name":"self"},{"name":"glsync"},{"name":"glbitfield"},{"name":"gluint64"}],"output":null}],[11,"texture_range_apple","","",5,null],[11,"delete_sync","","",5,{"inputs":[{"name":"self"},{"name":"glsync"}],"output":null}],[11,"gen_fences_apple","","",5,{"inputs":[{"name":"self"},{"name":"glsizei"}],"output":{"generics":["gluint"],"name":"vec"}}],[11,"delete_fences_apple","","",5,null],[11,"set_fence_apple","","",5,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":null}],[11,"finish_fence_apple","","",5,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":null}],[11,"test_fence_apple","","",5,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":null}],[11,"bind_frag_data_location_indexed","","",5,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"gluint"},{"name":"gluint"},{"name":"str"}],"output":null}],[11,"get_frag_data_index","","",5,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"str"}],"output":{"name":"glint"}}],[11,"alias_point_size_range","","",5,null],[11,"max_viewport_dims","","",5,null],[11,"get_debug_messages","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["debugmessage"],"name":"vec"}}],[11,"load_with","","",6,{"inputs":[{"name":"f"}],"output":{"generics":["gl"],"name":"rc"}}],[11,"get_type","","",6,{"inputs":[{"name":"self"}],"output":{"name":"gltype"}}],[11,"buffer_data_untyped","","",6,null],[11,"tex_buffer","","",6,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"},{"name":"gluint"}],"output":null}],[11,"buffer_sub_data_untyped","","",6,null],[11,"shader_source","","",6,null],[11,"read_buffer","","",6,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":null}],[11,"read_pixels_into_buffer","","",6,null],[11,"read_pixels","","",6,{"inputs":[{"name":"self"},{"name":"glint"},{"name":"glint"},{"name":"glsizei"},{"name":"glsizei"},{"name":"glenum"},{"name":"glenum"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"sample_coverage","","",6,{"inputs":[{"name":"self"},{"name":"glclampf"},{"name":"bool"}],"output":null}],[11,"polygon_offset","","",6,{"inputs":[{"name":"self"},{"name":"glfloat"},{"name":"glfloat"}],"output":null}],[11,"pixel_store_i","","",6,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glint"}],"output":null}],[11,"gen_buffers","","",6,{"inputs":[{"name":"self"},{"name":"glsizei"}],"output":{"generics":["gluint"],"name":"vec"}}],[11,"gen_renderbuffers","","",6,{"inputs":[{"name":"self"},{"name":"glsizei"}],"output":{"generics":["gluint"],"name":"vec"}}],[11,"gen_framebuffers","","",6,{"inputs":[{"name":"self"},{"name":"glsizei"}],"output":{"generics":["gluint"],"name":"vec"}}],[11,"gen_textures","","",6,{"inputs":[{"name":"self"},{"name":"glsizei"}],"output":{"generics":["gluint"],"name":"vec"}}],[11,"gen_vertex_arrays","","",6,{"inputs":[{"name":"self"},{"name":"glsizei"}],"output":{"generics":["gluint"],"name":"vec"}}],[11,"gen_queries","","",6,{"inputs":[{"name":"self"},{"name":"glsizei"}],"output":{"generics":["gluint"],"name":"vec"}}],[11,"begin_query","","",6,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"gluint"}],"output":null}],[11,"end_query","","",6,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":null}],[11,"query_counter","","",6,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glenum"}],"output":null}],[11,"get_query_object_iv","","",6,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glenum"}],"output":{"name":"i32"}}],[11,"get_query_object_uiv","","",6,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glenum"}],"output":{"name":"u32"}}],[11,"get_query_object_i64v","","",6,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glenum"}],"output":{"name":"i64"}}],[11,"get_query_object_ui64v","","",6,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glenum"}],"output":{"name":"u64"}}],[11,"delete_queries","","",6,null],[11,"delete_vertex_arrays","","",6,null],[11,"delete_buffers","","",6,null],[11,"delete_renderbuffers","","",6,null],[11,"delete_framebuffers","","",6,null],[11,"delete_textures","","",6,null],[11,"framebuffer_renderbuffer","","",6,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"},{"name":"glenum"},{"name":"gluint"}],"output":null}],[11,"renderbuffer_storage","","",6,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"},{"name":"glsizei"},{"name":"glsizei"}],"output":null}],[11,"depth_func","","",6,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":null}],[11,"active_texture","","",6,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":null}],[11,"attach_shader","","",6,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"gluint"}],"output":null}],[11,"bind_attrib_location","","",6,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"gluint"},{"name":"str"}],"output":null}],[11,"get_uniform_iv","","",6,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glint"}],"output":{"generics":["glint"],"name":"vec"}}],[11,"get_uniform_fv","","",6,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glint"}],"output":{"generics":["glfloat"],"name":"vec"}}],[11,"get_uniform_block_index","","",6,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"str"}],"output":{"name":"gluint"}}],[11,"get_uniform_indices","","",6,null],[11,"bind_buffer_base","","",6,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"gluint"},{"name":"gluint"}],"output":null}],[11,"bind_buffer_range","","",6,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"gluint"},{"name":"gluint"},{"name":"glintptr"},{"name":"glsizeiptr"}],"output":null}],[11,"uniform_block_binding","","",6,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"gluint"},{"name":"gluint"}],"output":null}],[11,"bind_buffer","","",6,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"gluint"}],"output":null}],[11,"bind_vertex_array","","",6,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":null}],[11,"bind_renderbuffer","","",6,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"gluint"}],"output":null}],[11,"bind_framebuffer","","",6,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"gluint"}],"output":null}],[11,"bind_texture","","",6,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"gluint"}],"output":null}],[11,"draw_buffers","","",6,null],[11,"tex_image_2d","","",6,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glint"},{"name":"glint"},{"name":"glsizei"},{"name":"glsizei"},{"name":"glint"},{"name":"glenum"},{"name":"glenum"},{"name":"option"}],"output":null}],[11,"compressed_tex_image_2d","","",6,null],[11,"compressed_tex_sub_image_2d","","",6,null],[11,"tex_image_3d","","",6,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glint"},{"name":"glint"},{"name":"glsizei"},{"name":"glsizei"},{"name":"glsizei"},{"name":"glint"},{"name":"glenum"},{"name":"glenum"},{"name":"option"}],"output":null}],[11,"copy_tex_image_2d","","",6,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glint"},{"name":"glenum"},{"name":"glint"},{"name":"glint"},{"name":"glsizei"},{"name":"glsizei"},{"name":"glint"}],"output":null}],[11,"copy_tex_sub_image_2d","","",6,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glsizei"},{"name":"glsizei"}],"output":null}],[11,"copy_tex_sub_image_3d","","",6,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glsizei"},{"name":"glsizei"}],"output":null}],[11,"tex_sub_image_2d","","",6,null],[11,"tex_sub_image_2d_pbo","","",6,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glsizei"},{"name":"glsizei"},{"name":"glenum"},{"name":"glenum"},{"name":"usize"}],"output":null}],[11,"tex_sub_image_3d","","",6,null],[11,"tex_sub_image_3d_pbo","","",6,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glsizei"},{"name":"glsizei"},{"name":"glsizei"},{"name":"glenum"},{"name":"glenum"},{"name":"usize"}],"output":null}],[11,"get_tex_image_into_buffer","","",6,null],[11,"get_integer_v","","",6,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":{"name":"glint"}}],[11,"get_integer_64v","","",6,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":{"name":"glint64"}}],[11,"get_integer_iv","","",6,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"gluint"}],"output":{"name":"glint"}}],[11,"get_integer_64iv","","",6,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"gluint"}],"output":{"name":"glint64"}}],[11,"get_boolean_v","","",6,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":{"name":"glboolean"}}],[11,"get_float_v","","",6,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":{"name":"glfloat"}}],[11,"get_renderbuffer_parameter_iv","","",6,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"}],"output":{"name":"glint"}}],[11,"get_framebuffer_attachment_parameter_iv","","",6,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"},{"name":"glenum"}],"output":{"name":"glint"}}],[11,"get_tex_parameter_iv","","",6,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"}],"output":{"name":"glint"}}],[11,"get_tex_parameter_fv","","",6,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"}],"output":{"name":"glfloat"}}],[11,"tex_parameter_i","","",6,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"},{"name":"glint"}],"output":null}],[11,"tex_parameter_f","","",6,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"},{"name":"glfloat"}],"output":null}],[11,"framebuffer_texture_2d","","",6,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"},{"name":"glenum"},{"name":"gluint"},{"name":"glint"}],"output":null}],[11,"framebuffer_texture_layer","","",6,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"},{"name":"gluint"},{"name":"glint"},{"name":"glint"}],"output":null}],[11,"blit_framebuffer","","",6,{"inputs":[{"name":"self"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glbitfield"},{"name":"glenum"}],"output":null}],[11,"vertex_attrib_4f","","",6,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glfloat"},{"name":"glfloat"},{"name":"glfloat"},{"name":"glfloat"}],"output":null}],[11,"vertex_attrib_pointer_f32","","",6,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glint"},{"name":"bool"},{"name":"glsizei"},{"name":"gluint"}],"output":null}],[11,"vertex_attrib_pointer","","",6,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glint"},{"name":"glenum"},{"name":"bool"},{"name":"glsizei"},{"name":"gluint"}],"output":null}],[11,"vertex_attrib_i_pointer","","",6,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glint"},{"name":"glenum"},{"name":"glsizei"},{"name":"gluint"}],"output":null}],[11,"vertex_attrib_divisor","","",6,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"gluint"}],"output":null}],[11,"viewport","","",6,{"inputs":[{"name":"self"},{"name":"glint"},{"name":"glint"},{"name":"glsizei"},{"name":"glsizei"}],"output":null}],[11,"get_viewport","","",6,null],[11,"scissor","","",6,{"inputs":[{"name":"self"},{"name":"glint"},{"name":"glint"},{"name":"glsizei"},{"name":"glsizei"}],"output":null}],[11,"line_width","","",6,{"inputs":[{"name":"self"},{"name":"glfloat"}],"output":null}],[11,"use_program","","",6,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":null}],[11,"validate_program","","",6,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":null}],[11,"draw_arrays","","",6,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glint"},{"name":"glsizei"}],"output":null}],[11,"draw_arrays_instanced","","",6,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glint"},{"name":"glsizei"},{"name":"glsizei"}],"output":null}],[11,"draw_elements","","",6,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glsizei"},{"name":"glenum"},{"name":"gluint"}],"output":null}],[11,"draw_elements_instanced","","",6,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glsizei"},{"name":"glenum"},{"name":"gluint"},{"name":"glsizei"}],"output":null}],[11,"blend_color","","",6,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":null}],[11,"blend_func","","",6,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"}],"output":null}],[11,"blend_func_separate","","",6,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"},{"name":"glenum"},{"name":"glenum"}],"output":null}],[11,"blend_equation","","",6,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":null}],[11,"blend_equation_separate","","",6,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"}],"output":null}],[11,"color_mask","","",6,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"}],"output":null}],[11,"cull_face","","",6,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":null}],[11,"front_face","","",6,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":null}],[11,"enable","","",6,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":null}],[11,"disable","","",6,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":null}],[11,"hint","","",6,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"}],"output":null}],[11,"is_enabled","","",6,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":{"name":"glboolean"}}],[11,"is_shader","","",6,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":{"name":"glboolean"}}],[11,"is_texture","","",6,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":{"name":"glboolean"}}],[11,"is_framebuffer","","",6,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":{"name":"glboolean"}}],[11,"is_renderbuffer","","",6,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":{"name":"glboolean"}}],[11,"check_frame_buffer_status","","",6,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":{"name":"glenum"}}],[11,"enable_vertex_attrib_array","","",6,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":null}],[11,"disable_vertex_attrib_array","","",6,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":null}],[11,"uniform_1f","","",6,{"inputs":[{"name":"self"},{"name":"glint"},{"name":"glfloat"}],"output":null}],[11,"uniform_1fv","","",6,null],[11,"uniform_1i","","",6,{"inputs":[{"name":"self"},{"name":"glint"},{"name":"glint"}],"output":null}],[11,"uniform_1iv","","",6,null],[11,"uniform_1ui","","",6,{"inputs":[{"name":"self"},{"name":"glint"},{"name":"gluint"}],"output":null}],[11,"uniform_2f","","",6,{"inputs":[{"name":"self"},{"name":"glint"},{"name":"glfloat"},{"name":"glfloat"}],"output":null}],[11,"uniform_2fv","","",6,null],[11,"uniform_2i","","",6,{"inputs":[{"name":"self"},{"name":"glint"},{"name":"glint"},{"name":"glint"}],"output":null}],[11,"uniform_2iv","","",6,null],[11,"uniform_2ui","","",6,{"inputs":[{"name":"self"},{"name":"glint"},{"name":"gluint"},{"name":"gluint"}],"output":null}],[11,"uniform_3f","","",6,{"inputs":[{"name":"self"},{"name":"glint"},{"name":"glfloat"},{"name":"glfloat"},{"name":"glfloat"}],"output":null}],[11,"uniform_3fv","","",6,null],[11,"uniform_3i","","",6,{"inputs":[{"name":"self"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"}],"output":null}],[11,"uniform_3iv","","",6,null],[11,"uniform_3ui","","",6,{"inputs":[{"name":"self"},{"name":"glint"},{"name":"gluint"},{"name":"gluint"},{"name":"gluint"}],"output":null}],[11,"uniform_4f","","",6,{"inputs":[{"name":"self"},{"name":"glint"},{"name":"glfloat"},{"name":"glfloat"},{"name":"glfloat"},{"name":"glfloat"}],"output":null}],[11,"uniform_4i","","",6,{"inputs":[{"name":"self"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"},{"name":"glint"}],"output":null}],[11,"uniform_4iv","","",6,null],[11,"uniform_4ui","","",6,{"inputs":[{"name":"self"},{"name":"glint"},{"name":"gluint"},{"name":"gluint"},{"name":"gluint"},{"name":"gluint"}],"output":null}],[11,"uniform_4fv","","",6,null],[11,"uniform_matrix_2fv","","",6,null],[11,"uniform_matrix_3fv","","",6,null],[11,"uniform_matrix_4fv","","",6,null],[11,"depth_mask","","",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"depth_range","","",6,{"inputs":[{"name":"self"},{"name":"f64"},{"name":"f64"}],"output":null}],[11,"get_active_attrib","","",6,null],[11,"get_active_uniform","","",6,null],[11,"get_active_uniforms_iv","","",6,{"inputs":[{"name":"self"},{"name":"gluint"},{"generics":["gluint"],"name":"vec"},{"name":"glenum"}],"output":{"generics":["glint"],"name":"vec"}}],[11,"get_active_uniform_block_i","","",6,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"gluint"},{"name":"glenum"}],"output":{"name":"glint"}}],[11,"get_active_uniform_block_iv","","",6,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"gluint"},{"name":"glenum"}],"output":{"generics":["glint"],"name":"vec"}}],[11,"get_active_uniform_block_name","","",6,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"gluint"}],"output":{"name":"string"}}],[11,"get_attrib_location","","",6,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"str"}],"output":{"name":"c_int"}}],[11,"get_frag_data_location","","",6,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"str"}],"output":{"name":"c_int"}}],[11,"get_uniform_location","","",6,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"str"}],"output":{"name":"c_int"}}],[11,"get_program_info_log","","",6,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":{"name":"string"}}],[11,"get_program_iv","","",6,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glenum"}],"output":{"name":"glint"}}],[11,"get_program_binary","","",6,null],[11,"program_binary","","",6,null],[11,"program_parameter_i","","",6,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glenum"},{"name":"glint"}],"output":null}],[11,"get_vertex_attrib_iv","","",6,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glenum"}],"output":{"name":"glint"}}],[11,"get_vertex_attrib_fv","","",6,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glenum"}],"output":{"generics":["glfloat"],"name":"vec"}}],[11,"get_vertex_attrib_pointer_v","","",6,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glenum"}],"output":{"name":"glsizeiptr"}}],[11,"get_buffer_parameter_iv","","",6,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glenum"}],"output":{"name":"glint"}}],[11,"get_shader_info_log","","",6,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":{"name":"string"}}],[11,"get_string","","",6,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":{"name":"string"}}],[11,"get_string_i","","",6,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"gluint"}],"output":{"name":"string"}}],[11,"get_shader_iv","","",6,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"glenum"}],"output":{"name":"glint"}}],[11,"get_shader_precision_format","","",6,null],[11,"compile_shader","","",6,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":null}],[11,"create_program","","",6,{"inputs":[{"name":"self"}],"output":{"name":"gluint"}}],[11,"delete_program","","",6,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":null}],[11,"create_shader","","",6,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":{"name":"gluint"}}],[11,"delete_shader","","",6,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":null}],[11,"detach_shader","","",6,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"gluint"}],"output":null}],[11,"link_program","","",6,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":null}],[11,"clear_color","","",6,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":null}],[11,"clear","","",6,{"inputs":[{"name":"self"},{"name":"glbitfield"}],"output":null}],[11,"clear_depth","","",6,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"clear_stencil","","",6,{"inputs":[{"name":"self"},{"name":"glint"}],"output":null}],[11,"flush","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"finish","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"get_error","","",6,{"inputs":[{"name":"self"}],"output":{"name":"glenum"}}],[11,"stencil_mask","","",6,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":null}],[11,"stencil_mask_separate","","",6,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"gluint"}],"output":null}],[11,"stencil_func","","",6,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glint"},{"name":"gluint"}],"output":null}],[11,"stencil_func_separate","","",6,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"},{"name":"glint"},{"name":"gluint"}],"output":null}],[11,"stencil_op","","",6,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"},{"name":"glenum"}],"output":null}],[11,"stencil_op_separate","","",6,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glenum"},{"name":"glenum"},{"name":"glenum"}],"output":null}],[11,"egl_image_target_texture2d_oes","","",6,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"gleglimageoes"}],"output":null}],[11,"generate_mipmap","","",6,{"inputs":[{"name":"self"},{"name":"glenum"}],"output":null}],[11,"insert_event_marker_ext","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"push_group_marker_ext","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"pop_group_marker_ext","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"fence_sync","","",6,{"inputs":[{"name":"self"},{"name":"glenum"},{"name":"glbitfield"}],"output":{"name":"glsync"}}],[11,"client_wait_sync","","",6,{"inputs":[{"name":"self"},{"name":"glsync"},{"name":"glbitfield"},{"name":"gluint64"}],"output":null}],[11,"wait_sync","","",6,{"inputs":[{"name":"self"},{"name":"glsync"},{"name":"glbitfield"},{"name":"gluint64"}],"output":null}],[11,"delete_sync","","",6,{"inputs":[{"name":"self"},{"name":"glsync"}],"output":null}],[11,"texture_range_apple","","",6,null],[11,"gen_fences_apple","","",6,{"inputs":[{"name":"self"},{"name":"glsizei"}],"output":{"generics":["gluint"],"name":"vec"}}],[11,"delete_fences_apple","","",6,null],[11,"set_fence_apple","","",6,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":null}],[11,"finish_fence_apple","","",6,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":null}],[11,"test_fence_apple","","",6,{"inputs":[{"name":"self"},{"name":"gluint"}],"output":null}],[11,"bind_frag_data_location_indexed","","",6,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"gluint"},{"name":"gluint"},{"name":"str"}],"output":null}],[11,"get_frag_data_index","","",6,{"inputs":[{"name":"self"},{"name":"gluint"},{"name":"str"}],"output":{"name":"glint"}}],[11,"alias_point_size_range","","",6,null],[11,"max_viewport_dims","","",6,null],[11,"get_debug_messages","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["debugmessage"],"name":"vec"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"fnptr"}}],[11,"is_loaded","","Returns `true` if the function has been successfully loaded.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"gl"}}],[11,"load_with","","Load each OpenGL symbol using a custom load function. This allows for the use of functions like `glfwGetProcAddress` or `SDL_GL_GetProcAddress`.",0,{"inputs":[{"name":"f"}],"output":{"name":"gl"}}],[11,"ActiveTexture","","",0,null],[11,"AttachShader","","",0,null],[11,"BeginConditionalRender","","",0,null],[11,"BeginQuery","","",0,null],[11,"BeginTransformFeedback","","",0,null],[11,"BindAttribLocation","","",0,null],[11,"BindBuffer","","",0,null],[11,"BindBufferBase","","",0,null],[11,"BindBufferRange","","",0,null],[11,"BindFragDataLocation","","",0,null],[11,"BindFragDataLocationIndexed","","",0,null],[11,"BindFramebuffer","","",0,null],[11,"BindRenderbuffer","","",0,null],[11,"BindSampler","","",0,null],[11,"BindTexture","","",0,null],[11,"BindVertexArray","","",0,null],[11,"BlendColor","","",0,null],[11,"BlendEquation","","",0,null],[11,"BlendEquationSeparate","","",0,null],[11,"BlendFunc","","",0,null],[11,"BlendFuncSeparate","","",0,null],[11,"BlitFramebuffer","","",0,null],[11,"BufferData","","",0,null],[11,"BufferSubData","","",0,null],[11,"CheckFramebufferStatus","","",0,{"inputs":[{"name":"self"},{"name":"c_uint"}],"output":{"name":"c_uint"}}],[11,"ClampColor","","",0,null],[11,"Clear","","",0,null],[11,"ClearBufferfi","","",0,null],[11,"ClearBufferfv","","",0,null],[11,"ClearBufferiv","","",0,null],[11,"ClearBufferuiv","","",0,null],[11,"ClearColor","","",0,null],[11,"ClearDepth","","",0,null],[11,"ClearStencil","","",0,null],[11,"ClientWaitSync","","",0,null],[11,"ColorMask","","",0,null],[11,"ColorMaski","","",0,null],[11,"ColorP3ui","","",0,null],[11,"ColorP3uiv","","",0,null],[11,"ColorP4ui","","",0,null],[11,"ColorP4uiv","","",0,null],[11,"CompileShader","","",0,null],[11,"CompressedTexImage1D","","",0,null],[11,"CompressedTexImage2D","","",0,null],[11,"CompressedTexImage3D","","",0,null],[11,"CompressedTexSubImage1D","","",0,null],[11,"CompressedTexSubImage2D","","",0,null],[11,"CompressedTexSubImage3D","","",0,null],[11,"CopyBufferSubData","","",0,null],[11,"CopyTexImage1D","","",0,null],[11,"CopyTexImage2D","","",0,null],[11,"CopyTexSubImage1D","","",0,null],[11,"CopyTexSubImage2D","","",0,null],[11,"CopyTexSubImage3D","","",0,null],[11,"CreateProgram","","",0,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"CreateShader","","",0,{"inputs":[{"name":"self"},{"name":"c_uint"}],"output":{"name":"c_uint"}}],[11,"CullFace","","",0,null],[11,"DebugMessageCallback","","",0,null],[11,"DebugMessageCallbackKHR","","",0,null],[11,"DebugMessageControl","","",0,null],[11,"DebugMessageControlKHR","","",0,null],[11,"DebugMessageInsert","","",0,null],[11,"DebugMessageInsertKHR","","",0,null],[11,"DeleteBuffers","","",0,null],[11,"DeleteFencesAPPLE","","",0,null],[11,"DeleteFramebuffers","","",0,null],[11,"DeleteProgram","","",0,null],[11,"DeleteQueries","","",0,null],[11,"DeleteRenderbuffers","","",0,null],[11,"DeleteSamplers","","",0,null],[11,"DeleteShader","","",0,null],[11,"DeleteSync","","",0,null],[11,"DeleteTextures","","",0,null],[11,"DeleteVertexArrays","","",0,null],[11,"DepthFunc","","",0,null],[11,"DepthMask","","",0,null],[11,"DepthRange","","",0,null],[11,"DetachShader","","",0,null],[11,"Disable","","",0,null],[11,"DisableVertexAttribArray","","",0,null],[11,"Disablei","","",0,null],[11,"DrawArrays","","",0,null],[11,"DrawArraysInstanced","","",0,null],[11,"DrawBuffer","","",0,null],[11,"DrawBuffers","","",0,null],[11,"DrawElements","","",0,null],[11,"DrawElementsBaseVertex","","",0,null],[11,"DrawElementsInstanced","","",0,null],[11,"DrawElementsInstancedBaseVertex","","",0,null],[11,"DrawRangeElements","","",0,null],[11,"DrawRangeElementsBaseVertex","","",0,null],[11,"Enable","","",0,null],[11,"EnableVertexAttribArray","","",0,null],[11,"Enablei","","",0,null],[11,"EndConditionalRender","","",0,null],[11,"EndQuery","","",0,null],[11,"EndTransformFeedback","","",0,null],[11,"FenceSync","","",0,null],[11,"Finish","","",0,null],[11,"FinishFenceAPPLE","","",0,null],[11,"FinishObjectAPPLE","","",0,null],[11,"Flush","","",0,null],[11,"FlushMappedBufferRange","","",0,null],[11,"FramebufferRenderbuffer","","",0,null],[11,"FramebufferTexture","","",0,null],[11,"FramebufferTexture1D","","",0,null],[11,"FramebufferTexture2D","","",0,null],[11,"FramebufferTexture3D","","",0,null],[11,"FramebufferTextureLayer","","",0,null],[11,"FrontFace","","",0,null],[11,"GenBuffers","","",0,null],[11,"GenFencesAPPLE","","",0,null],[11,"GenFramebuffers","","",0,null],[11,"GenQueries","","",0,null],[11,"GenRenderbuffers","","",0,null],[11,"GenSamplers","","",0,null],[11,"GenTextures","","",0,null],[11,"GenVertexArrays","","",0,null],[11,"GenerateMipmap","","",0,null],[11,"GetActiveAttrib","","",0,null],[11,"GetActiveUniform","","",0,null],[11,"GetActiveUniformBlockName","","",0,null],[11,"GetActiveUniformBlockiv","","",0,null],[11,"GetActiveUniformName","","",0,null],[11,"GetActiveUniformsiv","","",0,null],[11,"GetAttachedShaders","","",0,null],[11,"GetAttribLocation","","",0,null],[11,"GetBooleani_v","","",0,null],[11,"GetBooleanv","","",0,null],[11,"GetBufferParameteri64v","","",0,null],[11,"GetBufferParameteriv","","",0,null],[11,"GetBufferPointerv","","",0,null],[11,"GetBufferSubData","","",0,null],[11,"GetCompressedTexImage","","",0,null],[11,"GetDebugMessageLog","","",0,null],[11,"GetDebugMessageLogKHR","","",0,null],[11,"GetDoublev","","",0,null],[11,"GetError","","",0,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"GetFloatv","","",0,null],[11,"GetFragDataIndex","","",0,null],[11,"GetFragDataLocation","","",0,null],[11,"GetFramebufferAttachmentParameteriv","","",0,null],[11,"GetInteger64i_v","","",0,null],[11,"GetInteger64v","","",0,null],[11,"GetIntegeri_v","","",0,null],[11,"GetIntegerv","","",0,null],[11,"GetMultisamplefv","","",0,null],[11,"GetObjectLabel","","",0,null],[11,"GetObjectLabelKHR","","",0,null],[11,"GetObjectPtrLabel","","",0,null],[11,"GetObjectPtrLabelKHR","","",0,null],[11,"GetPointerv","","",0,null],[11,"GetPointervKHR","","",0,null],[11,"GetProgramBinary","","",0,null],[11,"GetProgramInfoLog","","",0,null],[11,"GetProgramiv","","",0,null],[11,"GetQueryObjecti64v","","",0,null],[11,"GetQueryObjectiv","","",0,null],[11,"GetQueryObjectui64v","","",0,null],[11,"GetQueryObjectuiv","","",0,null],[11,"GetQueryiv","","",0,null],[11,"GetRenderbufferParameteriv","","",0,null],[11,"GetSamplerParameterIiv","","",0,null],[11,"GetSamplerParameterIuiv","","",0,null],[11,"GetSamplerParameterfv","","",0,null],[11,"GetSamplerParameteriv","","",0,null],[11,"GetShaderInfoLog","","",0,null],[11,"GetShaderSource","","",0,null],[11,"GetShaderiv","","",0,null],[11,"GetString","","",0,null],[11,"GetStringi","","",0,null],[11,"GetSynciv","","",0,null],[11,"GetTexImage","","",0,null],[11,"GetTexLevelParameterfv","","",0,null],[11,"GetTexLevelParameteriv","","",0,null],[11,"GetTexParameterIiv","","",0,null],[11,"GetTexParameterIuiv","","",0,null],[11,"GetTexParameterPointervAPPLE","","",0,null],[11,"GetTexParameterfv","","",0,null],[11,"GetTexParameteriv","","",0,null],[11,"GetTransformFeedbackVarying","","",0,null],[11,"GetUniformBlockIndex","","",0,null],[11,"GetUniformIndices","","",0,null],[11,"GetUniformLocation","","",0,null],[11,"GetUniformfv","","",0,null],[11,"GetUniformiv","","",0,null],[11,"GetUniformuiv","","",0,null],[11,"GetVertexAttribIiv","","",0,null],[11,"GetVertexAttribIuiv","","",0,null],[11,"GetVertexAttribPointerv","","",0,null],[11,"GetVertexAttribdv","","",0,null],[11,"GetVertexAttribfv","","",0,null],[11,"GetVertexAttribiv","","",0,null],[11,"Hint","","",0,null],[11,"InsertEventMarkerEXT","","",0,null],[11,"IsBuffer","","",0,{"inputs":[{"name":"self"},{"name":"c_uint"}],"output":{"name":"c_uchar"}}],[11,"IsEnabled","","",0,{"inputs":[{"name":"self"},{"name":"c_uint"}],"output":{"name":"c_uchar"}}],[11,"IsEnabledi","","",0,{"inputs":[{"name":"self"},{"name":"c_uint"},{"name":"c_uint"}],"output":{"name":"c_uchar"}}],[11,"IsFenceAPPLE","","",0,{"inputs":[{"name":"self"},{"name":"c_uint"}],"output":{"name":"c_uchar"}}],[11,"IsFramebuffer","","",0,{"inputs":[{"name":"self"},{"name":"c_uint"}],"output":{"name":"c_uchar"}}],[11,"IsProgram","","",0,{"inputs":[{"name":"self"},{"name":"c_uint"}],"output":{"name":"c_uchar"}}],[11,"IsQuery","","",0,{"inputs":[{"name":"self"},{"name":"c_uint"}],"output":{"name":"c_uchar"}}],[11,"IsRenderbuffer","","",0,{"inputs":[{"name":"self"},{"name":"c_uint"}],"output":{"name":"c_uchar"}}],[11,"IsSampler","","",0,{"inputs":[{"name":"self"},{"name":"c_uint"}],"output":{"name":"c_uchar"}}],[11,"IsShader","","",0,{"inputs":[{"name":"self"},{"name":"c_uint"}],"output":{"name":"c_uchar"}}],[11,"IsSync","","",0,null],[11,"IsTexture","","",0,{"inputs":[{"name":"self"},{"name":"c_uint"}],"output":{"name":"c_uchar"}}],[11,"IsVertexArray","","",0,{"inputs":[{"name":"self"},{"name":"c_uint"}],"output":{"name":"c_uchar"}}],[11,"LineWidth","","",0,null],[11,"LinkProgram","","",0,null],[11,"LogicOp","","",0,null],[11,"MapBuffer","","",0,null],[11,"MapBufferRange","","",0,null],[11,"MultiDrawArrays","","",0,null],[11,"MultiDrawElements","","",0,null],[11,"MultiDrawElementsBaseVertex","","",0,null],[11,"MultiTexCoordP1ui","","",0,null],[11,"MultiTexCoordP1uiv","","",0,null],[11,"MultiTexCoordP2ui","","",0,null],[11,"MultiTexCoordP2uiv","","",0,null],[11,"MultiTexCoordP3ui","","",0,null],[11,"MultiTexCoordP3uiv","","",0,null],[11,"MultiTexCoordP4ui","","",0,null],[11,"MultiTexCoordP4uiv","","",0,null],[11,"NormalP3ui","","",0,null],[11,"NormalP3uiv","","",0,null],[11,"ObjectLabel","","",0,null],[11,"ObjectLabelKHR","","",0,null],[11,"ObjectPtrLabel","","",0,null],[11,"ObjectPtrLabelKHR","","",0,null],[11,"PixelStoref","","",0,null],[11,"PixelStorei","","",0,null],[11,"PointParameterf","","",0,null],[11,"PointParameterfv","","",0,null],[11,"PointParameteri","","",0,null],[11,"PointParameteriv","","",0,null],[11,"PointSize","","",0,null],[11,"PolygonMode","","",0,null],[11,"PolygonOffset","","",0,null],[11,"PopDebugGroup","","",0,null],[11,"PopDebugGroupKHR","","",0,null],[11,"PopGroupMarkerEXT","","",0,null],[11,"PrimitiveRestartIndex","","",0,null],[11,"ProgramBinary","","",0,null],[11,"ProgramParameteri","","",0,null],[11,"ProvokingVertex","","",0,null],[11,"PushDebugGroup","","",0,null],[11,"PushDebugGroupKHR","","",0,null],[11,"PushGroupMarkerEXT","","",0,null],[11,"QueryCounter","","",0,null],[11,"ReadBuffer","","",0,null],[11,"ReadPixels","","",0,null],[11,"RenderbufferStorage","","",0,null],[11,"RenderbufferStorageMultisample","","",0,null],[11,"SampleCoverage","","",0,null],[11,"SampleMaski","","",0,null],[11,"SamplerParameterIiv","","",0,null],[11,"SamplerParameterIuiv","","",0,null],[11,"SamplerParameterf","","",0,null],[11,"SamplerParameterfv","","",0,null],[11,"SamplerParameteri","","",0,null],[11,"SamplerParameteriv","","",0,null],[11,"Scissor","","",0,null],[11,"SecondaryColorP3ui","","",0,null],[11,"SecondaryColorP3uiv","","",0,null],[11,"SetFenceAPPLE","","",0,null],[11,"ShaderSource","","",0,null],[11,"StencilFunc","","",0,null],[11,"StencilFuncSeparate","","",0,null],[11,"StencilMask","","",0,null],[11,"StencilMaskSeparate","","",0,null],[11,"StencilOp","","",0,null],[11,"StencilOpSeparate","","",0,null],[11,"TestFenceAPPLE","","",0,{"inputs":[{"name":"self"},{"name":"c_uint"}],"output":{"name":"c_uchar"}}],[11,"TestObjectAPPLE","","",0,{"inputs":[{"name":"self"},{"name":"c_uint"},{"name":"c_uint"}],"output":{"name":"c_uchar"}}],[11,"TexBuffer","","",0,null],[11,"TexCoordP1ui","","",0,null],[11,"TexCoordP1uiv","","",0,null],[11,"TexCoordP2ui","","",0,null],[11,"TexCoordP2uiv","","",0,null],[11,"TexCoordP3ui","","",0,null],[11,"TexCoordP3uiv","","",0,null],[11,"TexCoordP4ui","","",0,null],[11,"TexCoordP4uiv","","",0,null],[11,"TexImage1D","","",0,null],[11,"TexImage2D","","",0,null],[11,"TexImage2DMultisample","","",0,null],[11,"TexImage3D","","",0,null],[11,"TexImage3DMultisample","","",0,null],[11,"TexParameterIiv","","",0,null],[11,"TexParameterIuiv","","",0,null],[11,"TexParameterf","","",0,null],[11,"TexParameterfv","","",0,null],[11,"TexParameteri","","",0,null],[11,"TexParameteriv","","",0,null],[11,"TexSubImage1D","","",0,null],[11,"TexSubImage2D","","",0,null],[11,"TexSubImage3D","","",0,null],[11,"TextureRangeAPPLE","","",0,null],[11,"TransformFeedbackVaryings","","",0,null],[11,"Uniform1f","","",0,null],[11,"Uniform1fv","","",0,null],[11,"Uniform1i","","",0,null],[11,"Uniform1iv","","",0,null],[11,"Uniform1ui","","",0,null],[11,"Uniform1uiv","","",0,null],[11,"Uniform2f","","",0,null],[11,"Uniform2fv","","",0,null],[11,"Uniform2i","","",0,null],[11,"Uniform2iv","","",0,null],[11,"Uniform2ui","","",0,null],[11,"Uniform2uiv","","",0,null],[11,"Uniform3f","","",0,null],[11,"Uniform3fv","","",0,null],[11,"Uniform3i","","",0,null],[11,"Uniform3iv","","",0,null],[11,"Uniform3ui","","",0,null],[11,"Uniform3uiv","","",0,null],[11,"Uniform4f","","",0,null],[11,"Uniform4fv","","",0,null],[11,"Uniform4i","","",0,null],[11,"Uniform4iv","","",0,null],[11,"Uniform4ui","","",0,null],[11,"Uniform4uiv","","",0,null],[11,"UniformBlockBinding","","",0,null],[11,"UniformMatrix2fv","","",0,null],[11,"UniformMatrix2x3fv","","",0,null],[11,"UniformMatrix2x4fv","","",0,null],[11,"UniformMatrix3fv","","",0,null],[11,"UniformMatrix3x2fv","","",0,null],[11,"UniformMatrix3x4fv","","",0,null],[11,"UniformMatrix4fv","","",0,null],[11,"UniformMatrix4x2fv","","",0,null],[11,"UniformMatrix4x3fv","","",0,null],[11,"UnmapBuffer","","",0,{"inputs":[{"name":"self"},{"name":"c_uint"}],"output":{"name":"c_uchar"}}],[11,"UseProgram","","",0,null],[11,"ValidateProgram","","",0,null],[11,"VertexAttrib1d","","",0,null],[11,"VertexAttrib1dv","","",0,null],[11,"VertexAttrib1f","","",0,null],[11,"VertexAttrib1fv","","",0,null],[11,"VertexAttrib1s","","",0,null],[11,"VertexAttrib1sv","","",0,null],[11,"VertexAttrib2d","","",0,null],[11,"VertexAttrib2dv","","",0,null],[11,"VertexAttrib2f","","",0,null],[11,"VertexAttrib2fv","","",0,null],[11,"VertexAttrib2s","","",0,null],[11,"VertexAttrib2sv","","",0,null],[11,"VertexAttrib3d","","",0,null],[11,"VertexAttrib3dv","","",0,null],[11,"VertexAttrib3f","","",0,null],[11,"VertexAttrib3fv","","",0,null],[11,"VertexAttrib3s","","",0,null],[11,"VertexAttrib3sv","","",0,null],[11,"VertexAttrib4Nbv","","",0,null],[11,"VertexAttrib4Niv","","",0,null],[11,"VertexAttrib4Nsv","","",0,null],[11,"VertexAttrib4Nub","","",0,null],[11,"VertexAttrib4Nubv","","",0,null],[11,"VertexAttrib4Nuiv","","",0,null],[11,"VertexAttrib4Nusv","","",0,null],[11,"VertexAttrib4bv","","",0,null],[11,"VertexAttrib4d","","",0,null],[11,"VertexAttrib4dv","","",0,null],[11,"VertexAttrib4f","","",0,null],[11,"VertexAttrib4fv","","",0,null],[11,"VertexAttrib4iv","","",0,null],[11,"VertexAttrib4s","","",0,null],[11,"VertexAttrib4sv","","",0,null],[11,"VertexAttrib4ubv","","",0,null],[11,"VertexAttrib4uiv","","",0,null],[11,"VertexAttrib4usv","","",0,null],[11,"VertexAttribDivisor","","",0,null],[11,"VertexAttribI1i","","",0,null],[11,"VertexAttribI1iv","","",0,null],[11,"VertexAttribI1ui","","",0,null],[11,"VertexAttribI1uiv","","",0,null],[11,"VertexAttribI2i","","",0,null],[11,"VertexAttribI2iv","","",0,null],[11,"VertexAttribI2ui","","",0,null],[11,"VertexAttribI2uiv","","",0,null],[11,"VertexAttribI3i","","",0,null],[11,"VertexAttribI3iv","","",0,null],[11,"VertexAttribI3ui","","",0,null],[11,"VertexAttribI3uiv","","",0,null],[11,"VertexAttribI4bv","","",0,null],[11,"VertexAttribI4i","","",0,null],[11,"VertexAttribI4iv","","",0,null],[11,"VertexAttribI4sv","","",0,null],[11,"VertexAttribI4ubv","","",0,null],[11,"VertexAttribI4ui","","",0,null],[11,"VertexAttribI4uiv","","",0,null],[11,"VertexAttribI4usv","","",0,null],[11,"VertexAttribIPointer","","",0,null],[11,"VertexAttribP1ui","","",0,null],[11,"VertexAttribP1uiv","","",0,null],[11,"VertexAttribP2ui","","",0,null],[11,"VertexAttribP2uiv","","",0,null],[11,"VertexAttribP3ui","","",0,null],[11,"VertexAttribP3uiv","","",0,null],[11,"VertexAttribP4ui","","",0,null],[11,"VertexAttribP4uiv","","",0,null],[11,"VertexAttribPointer","","",0,null],[11,"VertexP2ui","","",0,null],[11,"VertexP2uiv","","",0,null],[11,"VertexP3ui","","",0,null],[11,"VertexP3uiv","","",0,null],[11,"VertexP4ui","","",0,null],[11,"VertexP4uiv","","",0,null],[11,"Viewport","","",0,null],[11,"WaitSync","","",0,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"gles2"}}],[11,"load_with","","Load each OpenGL symbol using a custom load function. This allows for the use of functions like `glfwGetProcAddress` or `SDL_GL_GetProcAddress`.",1,{"inputs":[{"name":"f"}],"output":{"name":"gles2"}}],[11,"ActiveTexture","","",1,null],[11,"AttachShader","","",1,null],[11,"BeginQuery","","",1,null],[11,"BeginQueryEXT","","",1,null],[11,"BeginTransformFeedback","","",1,null],[11,"BindAttribLocation","","",1,null],[11,"BindBuffer","","",1,null],[11,"BindBufferBase","","",1,null],[11,"BindBufferRange","","",1,null],[11,"BindFramebuffer","","",1,null],[11,"BindRenderbuffer","","",1,null],[11,"BindSampler","","",1,null],[11,"BindTexture","","",1,null],[11,"BindTransformFeedback","","",1,null],[11,"BindVertexArray","","",1,null],[11,"BlendColor","","",1,null],[11,"BlendEquation","","",1,null],[11,"BlendEquationSeparate","","",1,null],[11,"BlendFunc","","",1,null],[11,"BlendFuncSeparate","","",1,null],[11,"BlitFramebuffer","","",1,null],[11,"BufferData","","",1,null],[11,"BufferSubData","","",1,null],[11,"CheckFramebufferStatus","","",1,{"inputs":[{"name":"self"},{"name":"c_uint"}],"output":{"name":"c_uint"}}],[11,"Clear","","",1,null],[11,"ClearBufferfi","","",1,null],[11,"ClearBufferfv","","",1,null],[11,"ClearBufferiv","","",1,null],[11,"ClearBufferuiv","","",1,null],[11,"ClearColor","","",1,null],[11,"ClearDepthf","","",1,null],[11,"ClearStencil","","",1,null],[11,"ClientWaitSync","","",1,null],[11,"ColorMask","","",1,null],[11,"CompileShader","","",1,null],[11,"CompressedTexImage2D","","",1,null],[11,"CompressedTexImage3D","","",1,null],[11,"CompressedTexSubImage2D","","",1,null],[11,"CompressedTexSubImage3D","","",1,null],[11,"CopyBufferSubData","","",1,null],[11,"CopyTexImage2D","","",1,null],[11,"CopyTexSubImage2D","","",1,null],[11,"CopyTexSubImage3D","","",1,null],[11,"CreateProgram","","",1,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"CreateShader","","",1,{"inputs":[{"name":"self"},{"name":"c_uint"}],"output":{"name":"c_uint"}}],[11,"CullFace","","",1,null],[11,"DebugMessageCallback","","",1,null],[11,"DebugMessageCallbackKHR","","",1,null],[11,"DebugMessageControl","","",1,null],[11,"DebugMessageControlKHR","","",1,null],[11,"DebugMessageInsert","","",1,null],[11,"DebugMessageInsertKHR","","",1,null],[11,"DeleteBuffers","","",1,null],[11,"DeleteFramebuffers","","",1,null],[11,"DeleteProgram","","",1,null],[11,"DeleteQueries","","",1,null],[11,"DeleteQueriesEXT","","",1,null],[11,"DeleteRenderbuffers","","",1,null],[11,"DeleteSamplers","","",1,null],[11,"DeleteShader","","",1,null],[11,"DeleteSync","","",1,null],[11,"DeleteTextures","","",1,null],[11,"DeleteTransformFeedbacks","","",1,null],[11,"DeleteVertexArrays","","",1,null],[11,"DepthFunc","","",1,null],[11,"DepthMask","","",1,null],[11,"DepthRangef","","",1,null],[11,"DetachShader","","",1,null],[11,"Disable","","",1,null],[11,"DisableVertexAttribArray","","",1,null],[11,"DrawArrays","","",1,null],[11,"DrawArraysInstanced","","",1,null],[11,"DrawBuffers","","",1,null],[11,"DrawElements","","",1,null],[11,"DrawElementsInstanced","","",1,null],[11,"DrawRangeElements","","",1,null],[11,"EGLImageTargetRenderbufferStorageOES","","",1,null],[11,"EGLImageTargetTexture2DOES","","",1,null],[11,"Enable","","",1,null],[11,"EnableVertexAttribArray","","",1,null],[11,"EndQuery","","",1,null],[11,"EndQueryEXT","","",1,null],[11,"EndTransformFeedback","","",1,null],[11,"FenceSync","","",1,null],[11,"Finish","","",1,null],[11,"Flush","","",1,null],[11,"FlushMappedBufferRange","","",1,null],[11,"FramebufferRenderbuffer","","",1,null],[11,"FramebufferTexture2D","","",1,null],[11,"FramebufferTextureLayer","","",1,null],[11,"FrontFace","","",1,null],[11,"GenBuffers","","",1,null],[11,"GenFramebuffers","","",1,null],[11,"GenQueries","","",1,null],[11,"GenQueriesEXT","","",1,null],[11,"GenRenderbuffers","","",1,null],[11,"GenSamplers","","",1,null],[11,"GenTextures","","",1,null],[11,"GenTransformFeedbacks","","",1,null],[11,"GenVertexArrays","","",1,null],[11,"GenerateMipmap","","",1,null],[11,"GetActiveAttrib","","",1,null],[11,"GetActiveUniform","","",1,null],[11,"GetActiveUniformBlockName","","",1,null],[11,"GetActiveUniformBlockiv","","",1,null],[11,"GetActiveUniformsiv","","",1,null],[11,"GetAttachedShaders","","",1,null],[11,"GetAttribLocation","","",1,null],[11,"GetBooleanv","","",1,null],[11,"GetBufferParameteri64v","","",1,null],[11,"GetBufferParameteriv","","",1,null],[11,"GetBufferPointerv","","",1,null],[11,"GetDebugMessageLog","","",1,null],[11,"GetDebugMessageLogKHR","","",1,null],[11,"GetError","","",1,{"inputs":[{"name":"self"}],"output":{"name":"c_uint"}}],[11,"GetFloatv","","",1,null],[11,"GetFragDataLocation","","",1,null],[11,"GetFramebufferAttachmentParameteriv","","",1,null],[11,"GetInteger64i_v","","",1,null],[11,"GetInteger64v","","",1,null],[11,"GetIntegeri_v","","",1,null],[11,"GetIntegerv","","",1,null],[11,"GetInternalformativ","","",1,null],[11,"GetObjectLabel","","",1,null],[11,"GetObjectLabelKHR","","",1,null],[11,"GetObjectPtrLabel","","",1,null],[11,"GetObjectPtrLabelKHR","","",1,null],[11,"GetPointerv","","",1,null],[11,"GetPointervKHR","","",1,null],[11,"GetProgramBinary","","",1,null],[11,"GetProgramInfoLog","","",1,null],[11,"GetProgramiv","","",1,null],[11,"GetQueryObjecti64vEXT","","",1,null],[11,"GetQueryObjectivEXT","","",1,null],[11,"GetQueryObjectui64vEXT","","",1,null],[11,"GetQueryObjectuiv","","",1,null],[11,"GetQueryObjectuivEXT","","",1,null],[11,"GetQueryiv","","",1,null],[11,"GetQueryivEXT","","",1,null],[11,"GetRenderbufferParameteriv","","",1,null],[11,"GetSamplerParameterfv","","",1,null],[11,"GetSamplerParameteriv","","",1,null],[11,"GetShaderInfoLog","","",1,null],[11,"GetShaderPrecisionFormat","","",1,null],[11,"GetShaderSource","","",1,null],[11,"GetShaderiv","","",1,null],[11,"GetString","","",1,null],[11,"GetStringi","","",1,null],[11,"GetSynciv","","",1,null],[11,"GetTexParameterfv","","",1,null],[11,"GetTexParameteriv","","",1,null],[11,"GetTransformFeedbackVarying","","",1,null],[11,"GetUniformBlockIndex","","",1,null],[11,"GetUniformIndices","","",1,null],[11,"GetUniformLocation","","",1,null],[11,"GetUniformfv","","",1,null],[11,"GetUniformiv","","",1,null],[11,"GetUniformuiv","","",1,null],[11,"GetVertexAttribIiv","","",1,null],[11,"GetVertexAttribIuiv","","",1,null],[11,"GetVertexAttribPointerv","","",1,null],[11,"GetVertexAttribfv","","",1,null],[11,"GetVertexAttribiv","","",1,null],[11,"Hint","","",1,null],[11,"InsertEventMarkerEXT","","",1,null],[11,"InvalidateFramebuffer","","",1,null],[11,"InvalidateSubFramebuffer","","",1,null],[11,"IsBuffer","","",1,{"inputs":[{"name":"self"},{"name":"c_uint"}],"output":{"name":"c_uchar"}}],[11,"IsEnabled","","",1,{"inputs":[{"name":"self"},{"name":"c_uint"}],"output":{"name":"c_uchar"}}],[11,"IsFramebuffer","","",1,{"inputs":[{"name":"self"},{"name":"c_uint"}],"output":{"name":"c_uchar"}}],[11,"IsProgram","","",1,{"inputs":[{"name":"self"},{"name":"c_uint"}],"output":{"name":"c_uchar"}}],[11,"IsQuery","","",1,{"inputs":[{"name":"self"},{"name":"c_uint"}],"output":{"name":"c_uchar"}}],[11,"IsQueryEXT","","",1,{"inputs":[{"name":"self"},{"name":"c_uint"}],"output":{"name":"c_uchar"}}],[11,"IsRenderbuffer","","",1,{"inputs":[{"name":"self"},{"name":"c_uint"}],"output":{"name":"c_uchar"}}],[11,"IsSampler","","",1,{"inputs":[{"name":"self"},{"name":"c_uint"}],"output":{"name":"c_uchar"}}],[11,"IsShader","","",1,{"inputs":[{"name":"self"},{"name":"c_uint"}],"output":{"name":"c_uchar"}}],[11,"IsSync","","",1,null],[11,"IsTexture","","",1,{"inputs":[{"name":"self"},{"name":"c_uint"}],"output":{"name":"c_uchar"}}],[11,"IsTransformFeedback","","",1,{"inputs":[{"name":"self"},{"name":"c_uint"}],"output":{"name":"c_uchar"}}],[11,"IsVertexArray","","",1,{"inputs":[{"name":"self"},{"name":"c_uint"}],"output":{"name":"c_uchar"}}],[11,"LineWidth","","",1,null],[11,"LinkProgram","","",1,null],[11,"MapBufferRange","","",1,null],[11,"ObjectLabel","","",1,null],[11,"ObjectLabelKHR","","",1,null],[11,"ObjectPtrLabel","","",1,null],[11,"ObjectPtrLabelKHR","","",1,null],[11,"PauseTransformFeedback","","",1,null],[11,"PixelStorei","","",1,null],[11,"PolygonOffset","","",1,null],[11,"PopDebugGroup","","",1,null],[11,"PopDebugGroupKHR","","",1,null],[11,"PopGroupMarkerEXT","","",1,null],[11,"ProgramBinary","","",1,null],[11,"ProgramParameteri","","",1,null],[11,"PushDebugGroup","","",1,null],[11,"PushDebugGroupKHR","","",1,null],[11,"PushGroupMarkerEXT","","",1,null],[11,"QueryCounterEXT","","",1,null],[11,"ReadBuffer","","",1,null],[11,"ReadPixels","","",1,null],[11,"ReleaseShaderCompiler","","",1,null],[11,"RenderbufferStorage","","",1,null],[11,"RenderbufferStorageMultisample","","",1,null],[11,"ResumeTransformFeedback","","",1,null],[11,"SampleCoverage","","",1,null],[11,"SamplerParameterf","","",1,null],[11,"SamplerParameterfv","","",1,null],[11,"SamplerParameteri","","",1,null],[11,"SamplerParameteriv","","",1,null],[11,"Scissor","","",1,null],[11,"ShaderBinary","","",1,null],[11,"ShaderSource","","",1,null],[11,"StencilFunc","","",1,null],[11,"StencilFuncSeparate","","",1,null],[11,"StencilMask","","",1,null],[11,"StencilMaskSeparate","","",1,null],[11,"StencilOp","","",1,null],[11,"StencilOpSeparate","","",1,null],[11,"TexImage2D","","",1,null],[11,"TexImage3D","","",1,null],[11,"TexParameterf","","",1,null],[11,"TexParameterfv","","",1,null],[11,"TexParameteri","","",1,null],[11,"TexParameteriv","","",1,null],[11,"TexStorage2D","","",1,null],[11,"TexStorage3D","","",1,null],[11,"TexSubImage2D","","",1,null],[11,"TexSubImage3D","","",1,null],[11,"TransformFeedbackVaryings","","",1,null],[11,"Uniform1f","","",1,null],[11,"Uniform1fv","","",1,null],[11,"Uniform1i","","",1,null],[11,"Uniform1iv","","",1,null],[11,"Uniform1ui","","",1,null],[11,"Uniform1uiv","","",1,null],[11,"Uniform2f","","",1,null],[11,"Uniform2fv","","",1,null],[11,"Uniform2i","","",1,null],[11,"Uniform2iv","","",1,null],[11,"Uniform2ui","","",1,null],[11,"Uniform2uiv","","",1,null],[11,"Uniform3f","","",1,null],[11,"Uniform3fv","","",1,null],[11,"Uniform3i","","",1,null],[11,"Uniform3iv","","",1,null],[11,"Uniform3ui","","",1,null],[11,"Uniform3uiv","","",1,null],[11,"Uniform4f","","",1,null],[11,"Uniform4fv","","",1,null],[11,"Uniform4i","","",1,null],[11,"Uniform4iv","","",1,null],[11,"Uniform4ui","","",1,null],[11,"Uniform4uiv","","",1,null],[11,"UniformBlockBinding","","",1,null],[11,"UniformMatrix2fv","","",1,null],[11,"UniformMatrix2x3fv","","",1,null],[11,"UniformMatrix2x4fv","","",1,null],[11,"UniformMatrix3fv","","",1,null],[11,"UniformMatrix3x2fv","","",1,null],[11,"UniformMatrix3x4fv","","",1,null],[11,"UniformMatrix4fv","","",1,null],[11,"UniformMatrix4x2fv","","",1,null],[11,"UniformMatrix4x3fv","","",1,null],[11,"UnmapBuffer","","",1,{"inputs":[{"name":"self"},{"name":"c_uint"}],"output":{"name":"c_uchar"}}],[11,"UseProgram","","",1,null],[11,"ValidateProgram","","",1,null],[11,"VertexAttrib1f","","",1,null],[11,"VertexAttrib1fv","","",1,null],[11,"VertexAttrib2f","","",1,null],[11,"VertexAttrib2fv","","",1,null],[11,"VertexAttrib3f","","",1,null],[11,"VertexAttrib3fv","","",1,null],[11,"VertexAttrib4f","","",1,null],[11,"VertexAttrib4fv","","",1,null],[11,"VertexAttribDivisor","","",1,null],[11,"VertexAttribI4i","","",1,null],[11,"VertexAttribI4iv","","",1,null],[11,"VertexAttribI4ui","","",1,null],[11,"VertexAttribI4uiv","","",1,null],[11,"VertexAttribIPointer","","",1,null],[11,"VertexAttribPointer","","",1,null],[11,"Viewport","","",1,null],[11,"WaitSync","","",1,null]],"paths":[[3,"GlFfi"],[3,"GlesFfi"],[3,"DebugMessage"],[4,"GlType"],[8,"Gl"],[3,"GlFns"],[3,"GlesFns"],[3,"FnPtr"]]};
searchIndex["image"] = {"doc":"This crate provides native rust implementations of image encoders and decoders and basic image manipulation functions.","items":[[3,"Luma","image","Grayscale colors",null,null],[12,"data","","",0,null],[3,"LumaA","","Grayscale colors + alpha channel",null,null],[12,"data","","",1,null],[3,"Rgb","","RGB colors",null,null],[12,"data","","",2,null],[3,"Rgba","","RGB colors + alpha channel",null,null],[12,"data","","",3,null],[3,"SubImage","","A View into another image",null,null],[3,"Pixels","","Immutable pixel iterator",null,null],[3,"MutPixels","","Mutable pixel iterator",null,null],[3,"ImageBuffer","","Generic image buffer",null,null],[3,"Frame","","A single animation frame",null,null],[3,"Frames","","Holds the frames of the animated image",null,null],[4,"ColorType","","An enumeration over supported color types and their bit depths",null,null],[13,"Gray","","Pixel is grayscale",4,null],[13,"RGB","","Pixel contains R, G and B channels",4,null],[13,"Palette","","Pixel is an index into a color palette",4,null],[13,"GrayA","","Pixel is grayscale with an alpha channel",4,null],[13,"RGBA","","Pixel is RGB with an alpha channel",4,null],[4,"ImageError","","An enumeration of Image errors",null,null],[13,"FormatError","","The Image is not formatted properly",5,null],[13,"DimensionError","","The Image's dimensions are either too small or too large",5,null],[13,"UnsupportedError","","The Decoder does not support this image format",5,null],[13,"UnsupportedColor","","The Decoder does not support this color type",5,null],[13,"NotEnoughData","","Not enough data was provided to the Decoder to decode the image",5,null],[13,"IoError","","An I/O Error occurred while decoding the image",5,null],[13,"ImageEnd","","The end of the image has been reached",5,null],[4,"DecodingResult","","Result of a decoding process",null,null],[13,"U8","","A vector of unsigned bytes",6,null],[13,"U16","","A vector of unsigned words",6,null],[4,"FilterType","","Available Sampling Filters",null,null],[13,"Nearest","","Nearest Neighbor",7,null],[13,"Triangle","","Linear Filter",7,null],[13,"CatmullRom","","Cubic Filter",7,null],[13,"Gaussian","","Gaussian Filter",7,null],[13,"Lanczos3","","Lanczos with window 3",7,null],[4,"ImageFormat","","An enumeration of supported image formats. Not all formats support both encoding and decoding.",null,null],[13,"PNG","","An Image in PNG Format",8,null],[13,"JPEG","","An Image in JPEG Format",8,null],[13,"GIF","","An Image in GIF Format",8,null],[13,"WEBP","","An Image in WEBP Format",8,null],[13,"PPM","","An Image in PPM Format",8,null],[13,"PNM","","An Image in general PNM Format",8,null],[13,"TIFF","","An Image in TIFF Format",8,null],[13,"TGA","","An Image in TGA Format",8,null],[13,"BMP","","An Image in BMP Format",8,null],[13,"ICO","","An Image in ICO Format",8,null],[13,"HDR","","An Image in Radiance HDR Format",8,null],[4,"DynamicImage","","A Dynamic Image",null,null],[13,"ImageLuma8","","Each pixel in this image is 8-bit Luma",9,null],[13,"ImageLumaA8","","Each pixel in this image is 8-bit Luma with alpha",9,null],[13,"ImageRgb8","","Each pixel in this image is 8-bit Rgb",9,null],[13,"ImageRgba8","","Each pixel in this image is 8-bit Rgb with alpha",9,null],[5,"open","","Open the image located at the path specified. The image's format is determined from the path's file extension.",null,{"inputs":[{"name":"p"}],"output":{"generics":["dynamicimage"],"name":"imageresult"}}],[5,"load","","Create a new image from a Reader",null,{"inputs":[{"name":"r"},{"name":"imageformat"}],"output":{"generics":["dynamicimage"],"name":"imageresult"}}],[5,"load_from_memory","","Create a new image from a byte slice",null,null],[5,"load_from_memory_with_format","","Create a new image from a byte slice",null,null],[5,"guess_format","","Guess image format from memory block",null,null],[5,"save_buffer","","Saves the supplied buffer to a file at the path specified.",null,null],[0,"math","","Mathematical helper functions and types.",null,null],[0,"utils","image::math","Shared mathematical utility functions.",null,null],[5,"clamp","image::math::utils","Cut value to be inside given range",null,{"inputs":[{"name":"n"},{"name":"n"},{"name":"n"}],"output":{"name":"n"}}],[0,"nq","image::math","NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994. See \"Kohonen neural networks for optimal colour quantization\" in \"Network: Computation in Neural Systems\" Vol. 5 (1994) pp 351-367. for a discussion of the algorithm. See also http://www.acm.org/~dekker/NEUQUANT.HTML",null,null],[3,"NeuQuant","image::math::nq","Neural network color quantizer",null,null],[11,"new","","Creates a new neural network and trains it with the supplied data",10,null],[11,"init","","Initializes the neural network and trains it with the supplied data",10,null],[11,"map_pixel","","Maps the pixel in-place to the best-matching color in the color map",10,null],[11,"index_of","","Finds the best-matching index in the color map for `pixel`",10,null],[0,"imageops","image","Image Processing Functions",null,null],[4,"FilterType","image::imageops","Available Sampling Filters",null,null],[13,"Nearest","","Nearest Neighbor",7,null],[13,"Triangle","","Linear Filter",7,null],[13,"CatmullRom","","Cubic Filter",7,null],[13,"Gaussian","","Gaussian Filter",7,null],[13,"Lanczos3","","Lanczos with window 3",7,null],[5,"rotate90","","Rotate an image 90 degrees clockwise.",null,{"inputs":[{"name":"i"}],"output":{"generics":["vec"],"name":"imagebuffer"}}],[5,"rotate180","","Rotate an image 180 degrees clockwise.",null,{"inputs":[{"name":"i"}],"output":{"generics":["vec"],"name":"imagebuffer"}}],[5,"rotate270","","Rotate an image 270 degrees clockwise.",null,{"inputs":[{"name":"i"}],"output":{"generics":["vec"],"name":"imagebuffer"}}],[5,"flip_horizontal","","Flip an image horizontally",null,{"inputs":[{"name":"i"}],"output":{"generics":["vec"],"name":"imagebuffer"}}],[5,"flip_vertical","","Flip an image vertically",null,{"inputs":[{"name":"i"}],"output":{"generics":["vec"],"name":"imagebuffer"}}],[5,"filter3x3","","Perform a 3x3 box filter on the supplied image. `kernel` is an array of the filter weights of length 9.",null,null],[5,"resize","","Resize the supplied image to the specified dimensions. `nwidth` and `nheight` are the new dimensions. `filter` is the sampling filter to use.",null,{"inputs":[{"name":"i"},{"name":"u32"},{"name":"u32"},{"name":"filtertype"}],"output":{"generics":["vec"],"name":"imagebuffer"}}],[5,"blur","","Performs a Gaussian blur on the supplied image. `sigma` is a measure of how much to blur by.",null,{"inputs":[{"name":"i"},{"name":"f32"}],"output":{"generics":["vec"],"name":"imagebuffer"}}],[5,"unsharpen","","Performs an unsharpen mask on the supplied image. `sigma` is the amount to blur the image by. `threshold` is the threshold for the difference between",null,{"inputs":[{"name":"i"},{"name":"f32"},{"name":"i32"}],"output":{"generics":["vec"],"name":"imagebuffer"}}],[5,"crop","","Return a mutable view into an image",null,{"inputs":[{"name":"i"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"subimage"}}],[5,"overlay","","Overlay an image at a given coordinate (x, y)",null,{"inputs":[{"name":"i"},{"name":"i"},{"name":"u32"},{"name":"u32"}],"output":null}],[5,"replace","","Replace the contents of an image at a given coordinate (x, y)",null,{"inputs":[{"name":"i"},{"name":"i"},{"name":"u32"},{"name":"u32"}],"output":null}],[0,"colorops","","Functions for altering and converting the color of pixelbufs",null,null],[3,"BiLevel","image::imageops::colorops","A bi-level color map",null,null],[5,"grayscale","","Convert the supplied image to grayscale",null,{"inputs":[{"name":"i"}],"output":{"generics":["luma","vec"],"name":"imagebuffer"}}],[5,"invert","","Invert each pixel within the supplied image. This function operates in place.",null,{"inputs":[{"name":"i"}],"output":null}],[5,"contrast","","Adjust the contrast of the supplied image. `contrast` is the amount to adjust the contrast by. Negative values decrease the contrast and positive values increase the contrast.",null,{"inputs":[{"name":"i"},{"name":"f32"}],"output":{"generics":["vec"],"name":"imagebuffer"}}],[5,"brighten","","Brighten the supplied image. `value` is the amount to brighten each pixel by. Negative values decrease the brightness and positive values increase it.",null,{"inputs":[{"name":"i"},{"name":"i32"}],"output":{"generics":["vec"],"name":"imagebuffer"}}],[5,"huerotate","","Hue rotate the supplied image. `value` is the degrees to rotate each pixel by. 0 and 360 do nothing, the rest rotates by the given degree value. just like the css webkit filter hue-rotate(180)",null,{"inputs":[{"name":"i"},{"name":"i32"}],"output":{"generics":["vec"],"name":"imagebuffer"}}],[5,"dither","","Reduces the colors of the image using the supplied `color_map` while applying Floyd-Steinberg dithering to improve the visual conception",null,{"inputs":[{"name":"imagebuffer"},{"name":"map"}],"output":null}],[5,"index_colors","","Reduces the colors using the supplied `color_map` and returns an image of the indices",null,{"inputs":[{"name":"imagebuffer"},{"name":"map"}],"output":{"generics":["luma","vec"],"name":"imagebuffer"}}],[8,"ColorMap","","A color map",null,null],[16,"Color","","The color type on which the map operates on",11,null],[10,"index_of","","Returns the index of the closed match of `color` in the color map.",11,null],[10,"map_color","","Maps `color` to the closest color in the color map.",11,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bilevel"}}],[11,"index_of","","",12,{"inputs":[{"name":"self"},{"name":"luma"}],"output":{"name":"usize"}}],[11,"map_color","","",12,{"inputs":[{"name":"self"},{"name":"luma"}],"output":null}],[11,"index_of","image::math::nq","",10,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":{"name":"usize"}}],[11,"map_color","","",10,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":null}],[11,"clone","image","",7,{"inputs":[{"name":"self"}],"output":{"name":"filtertype"}}],[0,"webp","","Decoding of Webp Images",null,null],[3,"WebpDecoder","image::webp","A Representation of a Webp Image format decoder.",null,null],[11,"new","","Create a new WebpDecoder from the Reader `r`. This function takes ownership of the Reader.",13,{"inputs":[{"name":"r"}],"output":{"name":"webpdecoder"}}],[11,"dimensions","","",13,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["colortype"],"name":"imageresult"}}],[11,"row_len","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"imageresult"}}],[11,"read_scanline","","",13,null],[11,"read_image","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["decodingresult"],"name":"imageresult"}}],[0,"vp8","","An implementation of the VP8 Video Codec",null,null],[3,"Frame","image::webp::vp8","A Representation of the last decoded video frame",null,null],[12,"width","","The width of the luma plane",14,null],[12,"height","","The height of the luma plane",14,null],[12,"ybuf","","The luma plane of the frame",14,null],[12,"keyframe","","Indicates whether this frame is a keyframe",14,null],[12,"for_display","","Indicates whether this frame is intended for display",14,null],[12,"pixel_type","","The pixel type of the frame as defined by Section 9.2 of the VP8 Specification",14,null],[3,"VP8Decoder","","VP8 Decoder",null,null],[11,"default","","",14,{"inputs":[],"output":{"name":"frame"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[11,"new","","Create a new decoder. The reader must present a raw vp8 bitstream to the decoder",15,{"inputs":[{"name":"r"}],"output":{"name":"vp8decoder"}}],[11,"decode_frame","","Decodes the current frame and returns a reference to it",15,{"inputs":[{"name":"self"}],"output":{"generics":["frame"],"name":"result"}}],[0,"pnm","image","Decoding of netpbm image formats (pbm, pgm, ppm and pam).",null,null],[3,"PNMDecoder","image::pnm","PNM decoder",null,null],[4,"PNMSubtype","","Denotes the category of the magic number",null,null],[13,"Bitmap","","Magic numbers P1 and P4",16,null],[13,"Graymap","","Magic numbers P2 and P5",16,null],[13,"Pixmap","","Magic numbers P3 and P6",16,null],[13,"ArbitraryMap","","Magic number P7",16,null],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"pnmsubtype"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"pnmsubtype"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"pnmsubtype"}],"output":{"name":"bool"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new decoder that decodes from the stream `r`",17,{"inputs":[{"name":"r"}],"output":{"generics":["pnmdecoder"],"name":"imageresult"}}],[11,"dimensions","","",17,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["colortype"],"name":"imageresult"}}],[11,"row_len","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"imageresult"}}],[11,"read_scanline","","",17,null],[11,"read_image","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["decodingresult"],"name":"imageresult"}}],[11,"subtype","","Get the pnm subtype, depending on the magic constant contained in the header",17,{"inputs":[{"name":"self"}],"output":{"name":"pnmsubtype"}}],[11,"encoding","","Whether samples are stored as binary or as decimal ascii",17,{"inputs":[{"name":"self"}],"output":{"name":"sampleencoding"}}],[0,"ppm","image","Encoding of portable pixmap Images",null,null],[3,"PPMEncoder","image::ppm","A representation of a PPM encoder.",null,null],[3,"PPMDecoder","","PPM decoder, restriction pnm type to ppm",null,null],[11,"new","","Create a new PPMEncoder from the Writer `w`.",18,{"inputs":[{"name":"w"}],"output":{"name":"ppmencoder"}}],[11,"encode","","Encode the buffer `im` as a PPM image. `width` and `height` are the dimensions of the buffer. `color` is the buffers ColorType.",18,null],[11,"new","","Create a new pnm decoder and asserts it is ppm",19,{"inputs":[{"name":"r"}],"output":{"generics":["ppmdecoder"],"name":"imageresult"}}],[11,"dimensions","","",19,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["colortype"],"name":"imageresult"}}],[11,"row_len","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"imageresult"}}],[11,"read_scanline","","",19,null],[11,"read_image","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["decodingresult"],"name":"imageresult"}}],[0,"png","image","Decoding and Encoding of PNG Images",null,null],[3,"PNGDecoder","image::png","PNG decoder",null,null],[3,"PNGEncoder","","PNG encoder",null,null],[11,"new","","Creates a new decoder that decodes from the stream `r`",20,{"inputs":[{"name":"r"}],"output":{"name":"pngdecoder"}}],[11,"dimensions","","",20,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["colortype"],"name":"imageresult"}}],[11,"row_len","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"imageresult"}}],[11,"read_scanline","","",20,null],[11,"read_image","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["decodingresult"],"name":"imageresult"}}],[11,"new","","Create a new encoder that writes its output to `w`",21,{"inputs":[{"name":"w"}],"output":{"name":"pngencoder"}}],[11,"encode","","Encodes the image `image` that has dimensions `width` and `height` and `ColorType` `c`",21,null],[11,"from","image","",4,null],[11,"from","","",5,{"inputs":[{"name":"decodingerror"}],"output":{"name":"imageerror"}}],[0,"ico","","Decoding and Encoding of ICO files",null,null],[3,"ICODecoder","image::ico","An ico decoder",null,null],[3,"ICOEncoder","","ICO encoder",null,null],[11,"new","","Create a new decoder that decodes from the stream `r`",22,{"inputs":[{"name":"r"}],"output":{"generics":["icodecoder"],"name":"imageresult"}}],[11,"dimensions","","",22,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["colortype"],"name":"imageresult"}}],[11,"row_len","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"imageresult"}}],[11,"read_scanline","","",22,null],[11,"read_image","","",22,{"inputs":[{"name":"self"}],"output":{"generics":["decodingresult"],"name":"imageresult"}}],[11,"new","","Create a new encoder that writes its output to `w`.",23,{"inputs":[{"name":"w"}],"output":{"name":"icoencoder"}}],[11,"encode","","Encodes the image `image` that has dimensions `width` and `height` and `ColorType` `c`.  The dimensions of the image must be between 1 and 256 (inclusive) or an error will be returned.",23,null],[0,"jpeg","image","Decoding and Encoding of JPEG Images",null,null],[3,"JPEGDecoder","image::jpeg","JPEG decoder",null,null],[3,"JPEGEncoder","","The representation of a JPEG encoder",null,null],[11,"new","","Create a new encoder that writes its output to `w`",24,{"inputs":[{"name":"w"}],"output":{"name":"jpegencoder"}}],[11,"new_with_quality","","Create a new encoder that writes its output to `w`, and has the quality parameter `quality` with a value in the range 1-100 where 1 is the worst and 100 is the best.",24,{"inputs":[{"name":"w"},{"name":"u8"}],"output":{"name":"jpegencoder"}}],[11,"encode","","Encodes the image `image` that has dimensions `width` and `height` and `ColorType` `c`",24,null],[11,"new","","Create a new decoder that decodes from the stream `r`",25,{"inputs":[{"name":"r"}],"output":{"name":"jpegdecoder"}}],[11,"dimensions","","",25,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["colortype"],"name":"imageresult"}}],[11,"row_len","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"imageresult"}}],[11,"read_scanline","","",25,null],[11,"read_image","","",25,{"inputs":[{"name":"self"}],"output":{"generics":["decodingresult"],"name":"imageresult"}}],[11,"from","image","",4,{"inputs":[{"name":"pixelformat"}],"output":{"name":"colortype"}}],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"imageerror"}}],[0,"gif","","Decoding of GIF Images",null,null],[3,"Frame","image::gif","A GIF frame",null,null],[12,"delay","","Frame delay in units of 10 ms.",26,null],[12,"dispose","","Disposal method.",26,null],[12,"transparent","","Transparent index (if available).",26,null],[12,"needs_user_input","","True if the frame needs user input do be displayed.",26,null],[12,"top","","Offset from the top border of the canvas.",26,null],[12,"left","","Offset from the left border of the canvas.",26,null],[12,"width","","Width of the frame.",26,null],[12,"height","","Height of the frame.",26,null],[12,"interlaced","","True if the image is interlaced.",26,null],[12,"palette","","Frame local color palette if available.",26,null],[12,"buffer","","Buffer containing the image data. Only indices unless configured differently.",26,null],[3,"Decoder","","GIF decoder",null,null],[3,"Encoder","","GIF encoder.",null,null],[11,"new","","Creates a new decoder that decodes the input steam `r`",27,{"inputs":[{"name":"r"}],"output":{"name":"decoder"}}],[11,"dimensions","","",27,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["colortype"],"name":"imageresult"}}],[11,"row_len","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"imageresult"}}],[11,"read_scanline","","",27,null],[11,"read_image","","",27,{"inputs":[{"name":"self"}],"output":{"generics":["decodingresult"],"name":"imageresult"}}],[11,"new","","Creates a new GIF encoder.",28,{"inputs":[{"name":"w"}],"output":{"name":"encoder"}}],[11,"encode","","Encodes a frame.",28,{"inputs":[{"name":"self"},{"name":"frame"}],"output":{"name":"imageresult"}}],[11,"from","image","",5,{"inputs":[{"name":"decodingerror"}],"output":{"name":"imageerror"}}],[0,"tiff","","Decoding and Encoding of TIFF Images",null,null],[3,"TIFFDecoder","image::tiff","The representation of a TIFF decoder",null,null],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new decoder that decodes from the stream `r`",29,{"inputs":[{"name":"r"}],"output":{"generics":["tiffdecoder"],"name":"imageresult"}}],[11,"init","","Initializes the decoder.",29,{"inputs":[{"name":"self"}],"output":{"generics":["tiffdecoder"],"name":"imageresult"}}],[11,"next_image","","Reads in the next image. If there is no further image in the TIFF file a format error is returned. To determine whether there are more images call `TIFFDecoder::more_images` instead.",29,{"inputs":[{"name":"self"}],"output":{"generics":["tiffdecoder"],"name":"imageresult"}}],[11,"more_images","","Returns `true` if there is at least one more image available.",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"byte_order","","Returns the byte_order",29,{"inputs":[{"name":"self"}],"output":{"name":"byteorder"}}],[11,"read_short","","Reads a TIFF short value",29,{"inputs":[{"name":"self"}],"output":{"generics":["u16","error"],"name":"result"}}],[11,"read_long","","Reads a TIFF long value",29,{"inputs":[{"name":"self"}],"output":{"generics":["u32","error"],"name":"result"}}],[11,"read_offset","","Reads a TIFF IFA offset/value field",29,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"goto_offset","","Moves the cursor to the specified offset",29,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"dimensions","","",29,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",29,{"inputs":[{"name":"self"}],"output":{"generics":["colortype"],"name":"imageresult"}}],[11,"row_len","","",29,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"imageresult"}}],[11,"read_scanline","","",29,null],[11,"read_image","","",29,{"inputs":[{"name":"self"}],"output":{"generics":["decodingresult"],"name":"imageresult"}}],[0,"tga","image","Decoding of TGA Images",null,null],[3,"TGADecoder","image::tga","The representation of a TGA decoder",null,null],[11,"new","","Create a new decoder that decodes from the stream `r`",30,{"inputs":[{"name":"r"}],"output":{"name":"tgadecoder"}}],[11,"dimensions","","",30,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",30,{"inputs":[{"name":"self"}],"output":{"generics":["colortype"],"name":"imageresult"}}],[11,"row_len","","",30,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"imageresult"}}],[11,"read_scanline","","",30,null],[11,"read_image","","",30,{"inputs":[{"name":"self"}],"output":{"generics":["decodingresult"],"name":"imageresult"}}],[0,"bmp","image","Decoding and Encoding of BMP Images",null,null],[3,"BMPEncoder","image::bmp","The representation of a BMP encoder.",null,null],[3,"BMPDecoder","","A bmp decoder",null,null],[11,"new","","Create a new encoder that writes its output to `w`.",31,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"encode","","Encodes the image `image` that has dimensions `width` and `height` and `ColorType` `c`.",31,null],[11,"new","","Create a new decoder that decodes from the stream `r`",32,{"inputs":[{"name":"r"}],"output":{"name":"bmpdecoder"}}],[11,"dimensions","","",32,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",32,{"inputs":[{"name":"self"}],"output":{"generics":["colortype"],"name":"imageresult"}}],[11,"row_len","","",32,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"imageresult"}}],[11,"read_scanline","","",32,null],[11,"read_image","","",32,{"inputs":[{"name":"self"}],"output":{"generics":["decodingresult"],"name":"imageresult"}}],[0,"hdr","image","Decoding of Radiance HDR Images",null,null],[3,"HDRAdapter","image::hdr","Adapter to conform to `ImageDecoder` trait",null,null],[3,"HDRDecoder","","An Radiance HDR decoder",null,null],[3,"RGBE8Pixel","","Refer to wikipedia",null,null],[12,"c","","Color components",33,null],[12,"e","","Exponent",33,null],[3,"HDRImageDecoderIterator","","Scanline buffered pixel by pixel iterator",null,null],[3,"HDRMetadata","","Metadata for Radiance HDR image",null,null],[12,"width","","Width of decoded image. It could be either scanline length, or scanline count, depending on image orientation.",34,null],[12,"height","","Height of decoded image. It depends on orientation too.",34,null],[12,"orientation","","Orientation matrix. For standard orientation it is ((1,0),(0,1)) - left to right, top to bottom. First pair tells how resulting pixel coordinates change along a scanline. Second pair tells how they change from one scanline to the next.",34,null],[12,"exposure","","Divide color values by exposure to get to get physical radiance in watts/steradian/m2",34,null],[12,"color_correction","","Divide color values by corresponding tuple member (r, g, b) to get to get physical radiance in watts/steradian/m2",34,null],[12,"pixel_aspect_ratio","","Pixel height divided by pixel width",34,null],[12,"custom_attributes","","All lines contained in image header are put here. Ordering of lines is preserved. Lines in the form \"key=value\" are represented as (\"key\", \"value\"). All other lines are (\"\", \"line\")",34,null],[3,"HDREncoder","","Radiance HDR encoder",null,null],[5,"rgbe8","","Creates `RGBE8Pixel` from components",null,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"rgbe8pixel"}}],[5,"read_raw_file","","Helper function for reading raw 3-channel f32 images",null,{"inputs":[{"name":"p"}],"output":{"generics":["vec"],"name":"result"}}],[5,"to_rgbe8","","Converts `Rgb<f32>` into `RGBE8Pixel`",null,{"inputs":[{"generics":["f32"],"name":"rgb"}],"output":{"name":"rgbe8pixel"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates adapter",35,{"inputs":[{"name":"r"}],"output":{"generics":["hdradapter"],"name":"imageresult"}}],[11,"new_nonstrict","","Allows reading old Radiance HDR images",35,{"inputs":[{"name":"r"}],"output":{"generics":["hdradapter"],"name":"imageresult"}}],[11,"dimensions","","",35,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[11,"colortype","","",35,{"inputs":[{"name":"self"}],"output":{"generics":["colortype"],"name":"imageresult"}}],[11,"row_len","","",35,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"imageresult"}}],[11,"read_scanline","","",35,null],[11,"read_image","","",35,{"inputs":[{"name":"self"}],"output":{"generics":["decodingresult"],"name":"imageresult"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"rgbe8pixel"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"rgbe8pixel"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"rgbe8pixel"}],"output":{"name":"bool"}}],[11,"to_hdr","","Converts `RGBE8Pixel` into `Rgb<f32>` linearly",33,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"rgb"}}],[11,"to_ldr","","Converts `RGBE8Pixel` into `Rgb<T>` with scale=1 and gamma=2.2",33,{"inputs":[{"name":"self"}],"output":{"name":"rgb"}}],[11,"to_ldr_scale_gamma","","Converts RGBE8Pixel into Rgb using provided scale and gamma",33,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"}],"output":{"name":"rgb"}}],[11,"new","","Reads Radiance HDR image header from stream `r` if the header is valid, creates HDRDecoder strict mode is enabled",36,{"inputs":[{"name":"r"}],"output":{"generics":["hdrdecoder"],"name":"imageresult"}}],[11,"with_strictness","","Reads Radiance HDR image header from stream `reader`, if the header is valid, creates `HDRDecoder`.",36,{"inputs":[{"name":"r"},{"name":"bool"}],"output":{"generics":["hdrdecoder"],"name":"imageresult"}}],[11,"metadata","","Returns file metadata. Refer to `HDRMetadata` for details.",36,{"inputs":[{"name":"self"}],"output":{"name":"hdrmetadata"}}],[11,"read_image_native","","Consumes decoder and returns a vector of RGBE8 pixels",36,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"imageresult"}}],[11,"read_image_transform","","Consumes decoder and returns a vector of transformed pixels",36,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["vec"],"name":"imageresult"}}],[11,"read_image_ldr","","Consumes decoder and returns a vector of Rgb pixels. scale = 1, gamma = 2.2",36,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"imageresult"}}],[11,"read_image_hdr","","Consumes decoder and returns a vector of Rgb pixels.",36,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"imageresult"}}],[11,"into_iter","","",36,null],[11,"next","","",37,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",37,null],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"hdrmetadata"}}],[11,"new","","Creates encoder",38,{"inputs":[{"name":"w"}],"output":{"name":"hdrencoder"}}],[11,"encode","","Encodes the image `data` that has dimensions `width` and `height`",38,null],[17,"SIGNATURE","","Radiance HDR file signature",null,null],[11,"fmt","image","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"imageerror"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"imageformat"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"imageformat"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",39,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",40,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Construct a new subimage",41,{"inputs":[{"name":"i"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"subimage"}}],[11,"inner_mut","","Returns a mutable reference to the wrapped image.",41,{"inputs":[{"name":"self"}],"output":{"name":"i"}}],[11,"change_bounds","","Change the coordinates of this subimage.",41,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"to_image","","Convert this subimage to an ImageBuffer",41,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"imagebuffer"}}],[11,"dimensions","","",41,null],[11,"bounds","","",41,null],[11,"get_pixel","","",41,null],[11,"put_pixel","","",41,null],[11,"blend_pixel","","DEPRECATED: This method will be removed. Blend the pixel directly instead.",41,null],[11,"get_pixel_mut","","",41,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"dynamicimage"}}],[11,"new_luma8","","Creates a dynamic image backed by a buffer of grey pixels.",9,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"new_luma_a8","","Creates a dynamic image backed by a buffer of grey pixels with transparency.",9,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"new_rgb8","","Creates a dynamic image backed by a buffer of RGB pixels.",9,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"new_rgba8","","Creates a dynamic image backed by a buffer of RGBA pixels.",9,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"to_rgb","","Returns a copy of this image as an RGB image.",9,{"inputs":[{"name":"self"}],"output":{"name":"rgbimage"}}],[11,"to_rgba","","Returns a copy of this image as an RGBA image.",9,{"inputs":[{"name":"self"}],"output":{"name":"rgbaimage"}}],[11,"to_luma","","Returns a copy of this image as a Luma image.",9,{"inputs":[{"name":"self"}],"output":{"name":"grayimage"}}],[11,"to_luma_alpha","","Returns a copy of this image as a LumaA image.",9,{"inputs":[{"name":"self"}],"output":{"name":"grayalphaimage"}}],[11,"crop","","Return a cut out of this image delimited by the bounding rectangle.",9,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"dynamicimage"}}],[11,"as_rgb8","","Return a reference to an 8bit RGB image",9,{"inputs":[{"name":"self"}],"output":{"generics":["rgbimage"],"name":"option"}}],[11,"as_mut_rgb8","","Return a mutable reference to an 8bit RGB image",9,{"inputs":[{"name":"self"}],"output":{"generics":["rgbimage"],"name":"option"}}],[11,"as_rgba8","","Return a reference to an 8bit RGBA image",9,{"inputs":[{"name":"self"}],"output":{"generics":["rgbaimage"],"name":"option"}}],[11,"as_mut_rgba8","","Return a mutable reference to an 8bit RGBA image",9,{"inputs":[{"name":"self"}],"output":{"generics":["rgbaimage"],"name":"option"}}],[11,"as_luma8","","Return a reference to an 8bit Grayscale image",9,{"inputs":[{"name":"self"}],"output":{"generics":["grayimage"],"name":"option"}}],[11,"as_mut_luma8","","Return a mutable reference to an 8bit Grayscale image",9,{"inputs":[{"name":"self"}],"output":{"generics":["grayimage"],"name":"option"}}],[11,"as_luma_alpha8","","Return a reference to an 8bit Grayscale image with an alpha channel",9,{"inputs":[{"name":"self"}],"output":{"generics":["grayalphaimage"],"name":"option"}}],[11,"as_mut_luma_alpha8","","Return a mutable reference to an 8bit Grayscale image with an alpha channel",9,{"inputs":[{"name":"self"}],"output":{"generics":["grayalphaimage"],"name":"option"}}],[11,"raw_pixels","","Return this image's pixels as a byte vector.",9,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"color","","Return this image's color type.",9,{"inputs":[{"name":"self"}],"output":{"name":"colortype"}}],[11,"grayscale","","Return a grayscale version of this image.",9,{"inputs":[{"name":"self"}],"output":{"name":"dynamicimage"}}],[11,"invert","","Invert the colors of this image. This method operates inplace.",9,{"inputs":[{"name":"self"}],"output":null}],[11,"resize","","Resize this image using the specified filter algorithm. Returns a new image. The image's aspect ratio is preserved. The image is scaled to the maximum possible size that fits within the bounds specified by `nwidth` and `nheight`.",9,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"filtertype"}],"output":{"name":"dynamicimage"}}],[11,"resize_exact","","Resize this image using the specified filter algorithm. Returns a new image. Does not preserve aspect ratio. `nwidth` and `nheight` are the new image's dimensions",9,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"filtertype"}],"output":{"name":"dynamicimage"}}],[11,"blur","","Performs a Gaussian blur on this image. `sigma` is a measure of how much to blur by.",9,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"dynamicimage"}}],[11,"unsharpen","","Performs an unsharpen mask on this image. `sigma` is the amount to blur the image by. `threshold` is a control of how much to sharpen.",9,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"i32"}],"output":{"name":"dynamicimage"}}],[11,"filter3x3","","Filters this image with the specified 3x3 kernel.",9,null],[11,"adjust_contrast","","Adjust the contrast of this image. `contrast` is the amount to adjust the contrast by. Negative values decrease the contrast and positive values increase the contrast.",9,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"dynamicimage"}}],[11,"brighten","","Brighten the pixels of this image. `value` is the amount to brighten each pixel by. Negative values decrease the brightness and positive values increase it.",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"dynamicimage"}}],[11,"huerotate","","Hue rotate the supplied image. `value` is the degrees to rotate each pixel by. 0 and 360 do nothing, the rest rotates by the given degree value. just like the css webkit filter hue-rotate(180)",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"dynamicimage"}}],[11,"flipv","","Flip this image vertically",9,{"inputs":[{"name":"self"}],"output":{"name":"dynamicimage"}}],[11,"fliph","","Flip this image horizontally",9,{"inputs":[{"name":"self"}],"output":{"name":"dynamicimage"}}],[11,"rotate90","","Rotate this image 90 degrees clockwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"dynamicimage"}}],[11,"rotate180","","Rotate this image 180 degrees clockwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"dynamicimage"}}],[11,"rotate270","","Rotate this image 270 degrees clockwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"dynamicimage"}}],[11,"save","","Encode this image and write it to `w`",9,{"inputs":[{"name":"self"},{"name":"w"},{"name":"imageformat"}],"output":{"name":"imageresult"}}],[11,"dimensions","","",9,null],[11,"bounds","","",9,null],[11,"get_pixel","","",9,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["u8"],"name":"rgba"}}],[11,"put_pixel","","",9,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"generics":["u8"],"name":"rgba"}],"output":null}],[11,"blend_pixel","","DEPRECATED: Use iterator `pixels_mut` to blend the pixels directly.",9,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"generics":["u8"],"name":"rgba"}],"output":null}],[11,"get_pixel_mut","","DEPRECATED: Do not use is function: It is unimplemented!",9,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"rgba"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"colortype"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"colortype"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"colortype"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"rgb"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"rgb"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"rgb"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"channel_count","","",2,{"inputs":[],"output":{"name":"u8"}}],[11,"color_model","","",2,{"inputs":[],"output":{"name":"str"}}],[11,"color_type","","",2,{"inputs":[],"output":{"name":"colortype"}}],[11,"channels","","",2,null],[11,"channels_mut","","",2,null],[11,"channels4","","",2,null],[11,"from_channels","","",2,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"rgb"}}],[11,"from_slice","","",2,null],[11,"from_slice_mut","","",2,null],[11,"to_rgb","","",2,{"inputs":[{"name":"self"}],"output":{"name":"rgb"}}],[11,"to_rgba","","",2,{"inputs":[{"name":"self"}],"output":{"name":"rgba"}}],[11,"to_luma","","",2,{"inputs":[{"name":"self"}],"output":{"name":"luma"}}],[11,"to_luma_alpha","","",2,{"inputs":[{"name":"self"}],"output":{"name":"lumaa"}}],[11,"map","","",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"rgb"}}],[11,"apply","","",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"map_with_alpha","","",2,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"rgb"}}],[11,"apply_with_alpha","","",2,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":null}],[11,"map2","","",2,{"inputs":[{"name":"self"},{"name":"self"},{"name":"f"}],"output":{"name":"rgb"}}],[11,"apply2","","",2,{"inputs":[{"name":"self"},{"name":"rgb"},{"name":"f"}],"output":null}],[11,"invert","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"blend","","",2,{"inputs":[{"name":"self"},{"name":"rgb"}],"output":null}],[11,"index","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"luma"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"luma"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"luma"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"channel_count","","",0,{"inputs":[],"output":{"name":"u8"}}],[11,"color_model","","",0,{"inputs":[],"output":{"name":"str"}}],[11,"color_type","","",0,{"inputs":[],"output":{"name":"colortype"}}],[11,"channels","","",0,null],[11,"channels_mut","","",0,null],[11,"channels4","","",0,null],[11,"from_channels","","",0,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"luma"}}],[11,"from_slice","","",0,null],[11,"from_slice_mut","","",0,null],[11,"to_rgb","","",0,{"inputs":[{"name":"self"}],"output":{"name":"rgb"}}],[11,"to_rgba","","",0,{"inputs":[{"name":"self"}],"output":{"name":"rgba"}}],[11,"to_luma","","",0,{"inputs":[{"name":"self"}],"output":{"name":"luma"}}],[11,"to_luma_alpha","","",0,{"inputs":[{"name":"self"}],"output":{"name":"lumaa"}}],[11,"map","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"luma"}}],[11,"apply","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"map_with_alpha","","",0,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"luma"}}],[11,"apply_with_alpha","","",0,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":null}],[11,"map2","","",0,{"inputs":[{"name":"self"},{"name":"self"},{"name":"f"}],"output":{"name":"luma"}}],[11,"apply2","","",0,{"inputs":[{"name":"self"},{"name":"luma"},{"name":"f"}],"output":null}],[11,"invert","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"blend","","",0,{"inputs":[{"name":"self"},{"name":"luma"}],"output":null}],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rgba"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"channel_count","","",3,{"inputs":[],"output":{"name":"u8"}}],[11,"color_model","","",3,{"inputs":[],"output":{"name":"str"}}],[11,"color_type","","",3,{"inputs":[],"output":{"name":"colortype"}}],[11,"channels","","",3,null],[11,"channels_mut","","",3,null],[11,"channels4","","",3,null],[11,"from_channels","","",3,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"rgba"}}],[11,"from_slice","","",3,null],[11,"from_slice_mut","","",3,null],[11,"to_rgb","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rgb"}}],[11,"to_rgba","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rgba"}}],[11,"to_luma","","",3,{"inputs":[{"name":"self"}],"output":{"name":"luma"}}],[11,"to_luma_alpha","","",3,{"inputs":[{"name":"self"}],"output":{"name":"lumaa"}}],[11,"map","","",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"rgba"}}],[11,"apply","","",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"map_with_alpha","","",3,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"rgba"}}],[11,"apply_with_alpha","","",3,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":null}],[11,"map2","","",3,{"inputs":[{"name":"self"},{"name":"self"},{"name":"f"}],"output":{"name":"rgba"}}],[11,"apply2","","",3,{"inputs":[{"name":"self"},{"name":"rgba"},{"name":"f"}],"output":null}],[11,"invert","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"blend","","",3,{"inputs":[{"name":"self"},{"name":"rgba"}],"output":null}],[11,"index","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"lumaa"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"lumaa"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"lumaa"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"channel_count","","",1,{"inputs":[],"output":{"name":"u8"}}],[11,"color_model","","",1,{"inputs":[],"output":{"name":"str"}}],[11,"color_type","","",1,{"inputs":[],"output":{"name":"colortype"}}],[11,"channels","","",1,null],[11,"channels_mut","","",1,null],[11,"channels4","","",1,null],[11,"from_channels","","",1,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"lumaa"}}],[11,"from_slice","","",1,null],[11,"from_slice_mut","","",1,null],[11,"to_rgb","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rgb"}}],[11,"to_rgba","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rgba"}}],[11,"to_luma","","",1,{"inputs":[{"name":"self"}],"output":{"name":"luma"}}],[11,"to_luma_alpha","","",1,{"inputs":[{"name":"self"}],"output":{"name":"lumaa"}}],[11,"map","","",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"lumaa"}}],[11,"apply","","",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"map_with_alpha","","",1,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"lumaa"}}],[11,"apply_with_alpha","","",1,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":null}],[11,"map2","","",1,{"inputs":[{"name":"self"},{"name":"self"},{"name":"f"}],"output":{"name":"lumaa"}}],[11,"apply2","","",1,{"inputs":[{"name":"self"},{"name":"lumaa"},{"name":"f"}],"output":null}],[11,"invert","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"blend","","",1,{"inputs":[{"name":"self"},{"name":"lumaa"}],"output":null}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_raw","","Contructs a buffer from a generic container (for example a `Vec` or a slice)",42,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"container"}],"output":{"generics":["imagebuffer"],"name":"option"}}],[11,"into_raw","","Returns the underlying raw buffer",42,{"inputs":[{"name":"self"}],"output":{"name":"container"}}],[11,"dimensions","","The width and height of this image.",42,null],[11,"width","","The width of this image.",42,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","The height of this image.",42,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"pixels","","Returns an iterator over the pixels of this image.",42,{"inputs":[{"name":"self"}],"output":{"name":"pixels"}}],[11,"enumerate_pixels","","Enumerates over the pixels of the image. The iterator yields the coordinates of each pixel along with a reference to them.",42,{"inputs":[{"name":"self"}],"output":{"name":"enumeratepixels"}}],[11,"get_pixel","","Gets a reference to the pixel at location `(x, y)`",42,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"pixels_mut","","Returns an iterator over the mutable pixels of this image.",42,{"inputs":[{"name":"self"}],"output":{"name":"pixelsmut"}}],[11,"enumerate_pixels_mut","","Enumerates over the pixels of the image. The iterator yields the coordinates of each pixel along with a mutable reference to them.",42,{"inputs":[{"name":"self"}],"output":{"name":"enumeratepixelsmut"}}],[11,"get_pixel_mut","","Gets a reference to the mutable pixel at location `(x, y)`",42,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"put_pixel","","Puts a pixel at location `(x, y)`",42,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":null}],[11,"save","","Saves the buffer to a file at the path specified.",42,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"result"}}],[11,"deref","","",42,null],[11,"deref_mut","","",42,null],[11,"index","","",42,null],[11,"index_mut","","",42,null],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"imagebuffer"}}],[11,"dimensions","","",42,null],[11,"bounds","","",42,null],[11,"get_pixel","","",42,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"get_pixel_mut","","",42,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"unsafe_get_pixel","","Returns the pixel located at (x, y), ignoring bounds checking.",42,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"p"}}],[11,"put_pixel","","",42,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":null}],[11,"unsafe_put_pixel","","Puts a pixel at location (x, y), ignoring bounds checking.",42,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":null}],[11,"blend_pixel","","Put a pixel at location (x, y), taking into account alpha channels",42,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":null}],[11,"new","","Creates a new image buffer based on a `Vec<P::Subpixel>`.",42,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"generics":["vec"],"name":"imagebuffer"}}],[11,"from_pixel","","Constructs a new ImageBuffer by copying a pixel",42,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"p"}],"output":{"generics":["vec"],"name":"imagebuffer"}}],[11,"from_fn","","Constructs a new ImageBuffer by repeated application of the supplied function. The arguments to the function are the pixel's x and y coordinates.",42,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"f"}],"output":{"generics":["vec"],"name":"imagebuffer"}}],[11,"from_vec","","Creates an image buffer out of an existing buffer. Returns None if the buffer is not big enough.",42,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"vec"}],"output":{"generics":["imagebuffer"],"name":"option"}}],[11,"into_vec","","Consumes the image buffer and returns the underlying data as an owned buffer",42,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"convert","","",42,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"imagebuffer"}}],[11,"new","","Contructs a new frame iterator",43,{"inputs":[{"generics":["frame"],"name":"vec"}],"output":{"name":"frames"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[11,"new","","Contructs a new frame",44,{"inputs":[{"name":"rgbaimage"}],"output":{"name":"frame"}}],[11,"from_parts","","Contructs a new frame",44,{"inputs":[{"name":"rgbaimage"},{"name":"u32"},{"name":"u32"},{"generics":["u16"],"name":"ratio"}],"output":{"name":"frame"}}],[11,"delay","","Delay of this frame",44,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"ratio"}}],[11,"buffer","","Returns the image buffer",44,{"inputs":[{"name":"self"}],"output":{"name":"rgbaimage"}}],[11,"into_buffer","","Returns the image buffer",44,{"inputs":[{"name":"self"}],"output":{"name":"rgbaimage"}}],[11,"left","","Returns the x offset",44,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"top","","Returns the y offset",44,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next","","",43,{"inputs":[{"name":"self"}],"output":{"generics":["frame"],"name":"option"}}],[6,"ImageResult","","Result of an image decoding/encoding process",null,null],[6,"RgbImage","","Sendable Rgb image buffer",null,null],[6,"RgbaImage","","Sendable Rgb + alpha channel image buffer",null,null],[6,"GrayImage","","Sendable grayscale image buffer",null,null],[6,"GrayAlphaImage","","Sendable grayscale + alpha channel image buffer",null,null],[8,"ImageDecoder","","The trait that all decoders implement",null,null],[10,"dimensions","","Returns a tuple containing the width and height of the image",45,{"inputs":[{"name":"self"}],"output":{"name":"imageresult"}}],[10,"colortype","","Returns the color type of the image e.g. RGB(8) (8bit RGB)",45,{"inputs":[{"name":"self"}],"output":{"generics":["colortype"],"name":"imageresult"}}],[10,"row_len","","Returns the length in bytes of one decoded row of the image",45,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"imageresult"}}],[10,"read_scanline","","Reads one row from the image into `buf` and returns the row index",45,null],[10,"read_image","","Decodes the entire image and return it as a Vector",45,{"inputs":[{"name":"self"}],"output":{"generics":["decodingresult"],"name":"imageresult"}}],[11,"is_animated","","Returns true if the image is animated",45,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"imageresult"}}],[11,"into_frames","","Returns the frames of the image",45,{"inputs":[{"name":"self"}],"output":{"generics":["frames"],"name":"imageresult"}}],[11,"load_rect","","Decodes a specific region of the image, represented by the rectangle starting from `x` and `y` and having `length` and `width`",45,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["vec"],"name":"imageresult"}}],[8,"GenericImage","","A trait for manipulating images.",null,null],[16,"Pixel","","The type of pixel.",46,null],[10,"dimensions","","The width and height of this image.",46,null],[11,"width","","The width of this image.",46,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","The height of this image.",46,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"bounds","","The bounding rectangle of this image.",46,null],[11,"in_bounds","","Returns true if this x, y coordinate is contained inside the image.",46,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bool"}}],[10,"get_pixel","","Returns the pixel located at (x, y)",46,null],[10,"get_pixel_mut","","Puts a pixel at location (x, y)",46,null],[11,"unsafe_get_pixel","","Returns the pixel located at (x, y)",46,null],[10,"put_pixel","","Put a pixel at location (x, y)",46,null],[11,"unsafe_put_pixel","","Puts a pixel at location (x, y)",46,null],[10,"blend_pixel","","Put a pixel at location (x, y), taking into account alpha channels",46,null],[11,"pixels","","Returns an Iterator over the pixels of this image. The iterator yields the coordinates of each pixel along with their value",46,{"inputs":[{"name":"self"}],"output":{"name":"pixels"}}],[11,"pixels_mut","","Returns an Iterator over mutable pixels of this image. The iterator yields the coordinates of each pixel along with a mutable reference to them.",46,{"inputs":[{"name":"self"}],"output":{"name":"mutpixels"}}],[11,"copy_from","","Copies all of the pixels from another image into this image.",46,{"inputs":[{"name":"self"},{"name":"o"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"sub_image","","Returns a subimage that is a view into this image.",46,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"subimage"}}],[8,"Pixel","","A generalized pixel.",null,null],[16,"Subpixel","","The underlying subpixel type.",47,null],[10,"channel_count","","Returns the number of channels of this pixel type.",47,{"inputs":[],"output":{"name":"u8"}}],[10,"channels","","Returns the components as a slice.",47,null],[10,"channels_mut","","Returns the components as a mutable slice",47,null],[10,"color_model","","Returns a string that can help to interpret the meaning each channel See gimp babl.",47,{"inputs":[],"output":{"name":"str"}}],[10,"color_type","","Returns the ColorType for this pixel format",47,{"inputs":[],"output":{"name":"colortype"}}],[10,"channels4","","Returns the channels of this pixel as a 4 tuple. If the pixel has less than 4 channels the remainder is filled with the maximum value",47,null],[10,"from_channels","","Construct a pixel from the 4 channels a, b, c and d. If the pixel does not contain 4 channels the extra are ignored.",47,null],[10,"from_slice","","Returns a view into a slice.",47,null],[10,"from_slice_mut","","Returns mutable view into a mutable slice.",47,null],[10,"to_rgb","","Convert this pixel to RGB",47,{"inputs":[{"name":"self"}],"output":{"name":"rgb"}}],[10,"to_rgba","","Convert this pixel to RGB with an alpha channel",47,{"inputs":[{"name":"self"}],"output":{"name":"rgba"}}],[10,"to_luma","","Convert this pixel to luma",47,{"inputs":[{"name":"self"}],"output":{"name":"luma"}}],[10,"to_luma_alpha","","Convert this pixel to luma with an alpha channel",47,{"inputs":[{"name":"self"}],"output":{"name":"lumaa"}}],[10,"map","","Apply the function `f` to each channel of this pixel.",47,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[10,"apply","","Apply the function `f` to each channel of this pixel.",47,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[10,"map_with_alpha","","Apply the function `f` to each channel except the alpha channel. Apply the function `g` to the alpha channel.",47,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":{"name":"self"}}],[10,"apply_with_alpha","","Apply the function `f` to each channel except the alpha channel. Apply the function `g` to the alpha channel. Works in-place.",47,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"}],"output":null}],[10,"map2","","Apply the function `f` to each channel of this pixel and `other` pairwise.",47,{"inputs":[{"name":"self"},{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[10,"apply2","","Apply the function `f` to each channel of this pixel and `other` pairwise. Works in-place.",47,{"inputs":[{"name":"self"},{"name":"self"},{"name":"f"}],"output":null}],[10,"invert","","Invert this pixel",47,{"inputs":[{"name":"self"}],"output":null}],[10,"blend","","Blend the color of a given pixel into ourself, taking into account alpha channels",47,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[8,"ConvertBuffer","","Provides color conversions for whole image buffers.",null,null],[10,"convert","","Converts `self` to a buffer of type T",48,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"Primitive","","Primitive trait from old stdlib",null,null],[11,"from_rgba","image::gif","Creates a frame from pixels in RGBA format.",26,null],[11,"from_rgb","","Creates a frame from pixels in RGB format.",26,null],[11,"default","","",26,{"inputs":[],"output":{"name":"frame"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"is_animated","image","Returns true if the image is animated",45,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"imageresult"}}],[11,"into_frames","","Returns the frames of the image",45,{"inputs":[{"name":"self"}],"output":{"generics":["frames"],"name":"imageresult"}}],[11,"load_rect","","Decodes a specific region of the image, represented by the rectangle starting from `x` and `y` and having `length` and `width`",45,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["vec"],"name":"imageresult"}}],[11,"width","","The width of this image.",46,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"height","","The height of this image.",46,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"in_bounds","","Returns true if this x, y coordinate is contained inside the image.",46,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"unsafe_get_pixel","","Returns the pixel located at (x, y)",46,null],[11,"unsafe_put_pixel","","Puts a pixel at location (x, y)",46,null],[11,"pixels","","Returns an Iterator over the pixels of this image. The iterator yields the coordinates of each pixel along with their value",46,{"inputs":[{"name":"self"}],"output":{"name":"pixels"}}],[11,"pixels_mut","","Returns an Iterator over mutable pixels of this image. The iterator yields the coordinates of each pixel along with a mutable reference to them.",46,{"inputs":[{"name":"self"}],"output":{"name":"mutpixels"}}],[11,"copy_from","","Copies all of the pixels from another image into this image.",46,{"inputs":[{"name":"self"},{"name":"o"},{"name":"u32"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"sub_image","","Returns a subimage that is a view into this image.",46,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"subimage"}}],[11,"expand_palette","","Expands a color palette by re-using the existing buffer. Assumes 8 bit per pixel. Uses an optionally transparent index to adjust it's alpha value accordingly.",49,null]],"paths":[[3,"Luma"],[3,"LumaA"],[3,"Rgb"],[3,"Rgba"],[4,"ColorType"],[4,"ImageError"],[4,"DecodingResult"],[4,"FilterType"],[4,"ImageFormat"],[4,"DynamicImage"],[3,"NeuQuant"],[8,"ColorMap"],[3,"BiLevel"],[3,"WebpDecoder"],[3,"Frame"],[3,"VP8Decoder"],[4,"PNMSubtype"],[3,"PNMDecoder"],[3,"PPMEncoder"],[3,"PPMDecoder"],[3,"PNGDecoder"],[3,"PNGEncoder"],[3,"ICODecoder"],[3,"ICOEncoder"],[3,"JPEGEncoder"],[3,"JPEGDecoder"],[3,"Frame"],[3,"Decoder"],[3,"Encoder"],[3,"TIFFDecoder"],[3,"TGADecoder"],[3,"BMPEncoder"],[3,"BMPDecoder"],[3,"RGBE8Pixel"],[3,"HDRMetadata"],[3,"HDRAdapter"],[3,"HDRDecoder"],[3,"HDRImageDecoderIterator"],[3,"HDREncoder"],[3,"Pixels"],[3,"MutPixels"],[3,"SubImage"],[3,"ImageBuffer"],[3,"Frames"],[3,"Frame"],[8,"ImageDecoder"],[8,"GenericImage"],[8,"Pixel"],[8,"ConvertBuffer"],[6,"GrayImage"]]};
searchIndex["inflate"] = {"doc":"A DEFLATE decoder written in rust.","items":[[3,"InflateWriter","inflate","A DEFLATE decoder.",null,null],[3,"DeflateDecoder","","A DEFLATE decoder/decompressor.",null,null],[3,"DeflateDecoderBuf","","A DEFLATE decoder/decompressor.",null,null],[3,"InflateStream","","",null,null],[5,"inflate_bytes","","Decompress the given slice of DEFLATE compressed data.",null,null],[5,"inflate_bytes_zlib","","Decompress the given slice of DEFLATE compressed (with zlib headers and trailers) data.",null,null],[5,"inflate_bytes_zlib_no_checksum","","Decompress the given slice of DEFLATE compressed (with zlib headers and trailers) data, without calculating and validating the checksum.",null,null],[11,"new","","",0,{"inputs":[{"name":"w"}],"output":{"name":"inflatewriter"}}],[11,"from_zlib","","",0,{"inputs":[{"name":"w"}],"output":{"name":"inflatewriter"}}],[11,"finish","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write","","",0,null],[11,"flush","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Create a new `Deflatedecoderbuf` to read from a raw deflate stream.",1,{"inputs":[{"name":"r"}],"output":{"name":"deflatedecoderbuf"}}],[11,"from_zlib","","Create a new `DeflateDecoderbuf` that reads from a zlib wrapped deflate stream.",1,{"inputs":[{"name":"r"}],"output":{"name":"deflatedecoderbuf"}}],[11,"from_zlib_no_checksum","","Create a new `DeflateDecoderbuf` that reads from a zlib wrapped deflate stream. without calculating and validating the checksum.",1,{"inputs":[{"name":"r"}],"output":{"name":"deflatedecoderbuf"}}],[11,"reset","","Resets the decompressor, and replaces the current inner `BufRead` instance by `r`. without doing any extra reallocations.",1,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"reset_data","","Resets the decoder, but continue to read from the same reader.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"get_ref","","Returns a reference to the underlying `BufRead` instance.",1,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Returns a mutable reference to the underlying `BufRead` instance.",1,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Drops the decoder and return the inner `BufRead` instance.",1,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"total_in","","Returns the total bytes read from the underlying `BufRead` instance.",1,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the total number of bytes output from this decoder.",1,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"current_checksum","","Returns the calculated checksum value of the currently decoded data.",1,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"read","","",1,null],[11,"new","","Create a new `Deflatedecoderbuf` to read from a raw deflate stream.",2,{"inputs":[{"name":"r"}],"output":{"name":"deflatedecoder"}}],[11,"from_zlib","","Create a new `DeflateDecoderbuf` that reads from a zlib wrapped deflate stream.",2,{"inputs":[{"name":"r"}],"output":{"name":"deflatedecoder"}}],[11,"from_zlib_no_checksum","","Create a new `DeflateDecoderbuf` that reads from a zlib wrapped deflate stream. without calculating and validating the checksum.",2,{"inputs":[{"name":"r"}],"output":{"name":"deflatedecoder"}}],[11,"reset","","Resets the decompressor, and replaces the current inner `BufRead` instance by `r`. without doing any extra reallocations.",2,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"r"}}],[11,"get_ref","","Returns a reference to the underlying reader.",2,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"get_mut","","Returns a mutable reference to the underlying reader.",2,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"into_inner","","Returns the total number of bytes output from this decoder.",2,{"inputs":[{"name":"self"}],"output":{"name":"r"}}],[11,"reset_data","","Resets the decoder, but continue to read from the same reader.",2,{"inputs":[{"name":"self"}],"output":null}],[11,"total_in","","Returns the total bytes read from the underlying reader.",2,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"total_out","","Returns the total number of bytes output from this decoder.",2,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"current_checksum","","Returns the calculated checksum value of the currently decoded data.",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"read","","",2,null],[11,"new","","Create a new stream for decoding raw deflate encoded data.",3,{"inputs":[],"output":{"name":"inflatestream"}}],[11,"from_zlib","","Create a new stream for decoding deflate encoded data with a zlib header and footer",3,{"inputs":[],"output":{"name":"inflatestream"}}],[11,"from_zlib_no_checksum","","Create a new stream for decoding deflate encoded data with a zlib header and footer",3,{"inputs":[],"output":{"name":"inflatestream"}}],[11,"reset","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"reset_to_zlib","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"update","","Try to uncompress/decode the data in `data`.",3,null],[11,"current_checksum","","Returns the calculated checksum value of the currently decoded data.",3,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}]],"paths":[[3,"InflateWriter"],[3,"DeflateDecoderBuf"],[3,"DeflateDecoder"],[3,"InflateStream"]]};
searchIndex["jpeg_decoder"] = {"doc":"This crate contains a JPEG decoder.","items":[[3,"Decoder","jpeg_decoder","JPEG decoder",null,null],[3,"ImageInfo","","Represents metadata of an image.",null,null],[12,"width","","The width of the image, in pixels.",0,null],[12,"height","","The height of the image, in pixels.",0,null],[12,"pixel_format","","The pixel format of the image.",0,null],[4,"PixelFormat","","An enumeration over combinations of color spaces and bit depths a pixel can have.",null,null],[13,"L8","","Luminance (grayscale), 8 bits",1,null],[13,"RGB24","","RGB, 8 bits per channel",1,null],[13,"CMYK32","","CMYK, 8 bits per channel",1,null],[4,"Error","","Errors that can occur while decoding a JPEG image.",null,null],[13,"Format","","The image is not formatted properly. The string contains detailed information about the error.",2,null],[13,"Unsupported","","The image makes use of a JPEG feature not (currently) supported by this library.",2,null],[13,"Io","","An I/O error occurred while decoding the image.",2,null],[13,"Internal","","An internal error occurred while decoding the image.",2,null],[4,"UnsupportedFeature","","An enumeration over JPEG features (currently) unsupported by this library.",null,null],[13,"Hierarchical","","Hierarchical JPEG.",3,null],[13,"Lossless","","Lossless JPEG.",3,null],[13,"ArithmeticEntropyCoding","","JPEG using arithmetic entropy coding instead of Huffman coding.",3,null],[13,"SamplePrecision","","Sample precision in bits. 8 bit sample precision is what is currently supported.",3,null],[13,"ComponentCount","","Number of components in an image. 1, 3 and 4 components are currently supported.",3,null],[13,"DNL","","An image can specify a zero height in the frame header and use the DNL (Define Number of Lines) marker at the end of the first scan to define the number of lines in the frame.",3,null],[13,"SubsamplingRatio","","Subsampling ratio.",3,null],[13,"NonIntegerSubsamplingRatio","","A subsampling ratio not representable as an integer.",3,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"pixelformat"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"pixelformat"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"imageinfo"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"imageinfo"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"imageinfo"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `Decoder` using the reader `reader`.",4,{"inputs":[{"name":"r"}],"output":{"name":"decoder"}}],[11,"info","","Returns metadata about the image.",4,{"inputs":[{"name":"self"}],"output":{"generics":["imageinfo"],"name":"option"}}],[11,"read_info","","Tries to read metadata from the image without decoding it.",4,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"decode","","Decodes the image and returns the decoded pixels if successful.",4,{"inputs":[{"name":"self"}],"output":{"generics":["vec","error"],"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["stderror"],"name":"option"}}],[11,"from","","",2,{"inputs":[{"name":"ioerror"}],"output":{"name":"error"}}],[11,"from","","",2,{"inputs":[{"name":"recverror"}],"output":{"name":"error"}}],[11,"from","","",2,{"inputs":[{"name":"senderror"}],"output":{"name":"error"}}]],"paths":[[3,"ImageInfo"],[4,"PixelFormat"],[4,"Error"],[4,"UnsupportedFeature"],[3,"Decoder"]]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[5,"initialize","lazy_static","Takes a shared reference to a lazy static and initializes it if it has not been already.",null,{"inputs":[{"name":"t"}],"output":null}],[8,"LazyStatic","","Support trait for enabling a few common operation on lazy static values.",null,null],[14,"lazy_static","","",null,null]],"paths":[]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"itimerval","","",null,null],[12,"it_interval","","",16,null],[12,"it_value","","",16,null],[3,"tms","","",null,null],[12,"tms_utime","","",17,null],[12,"tms_stime","","",17,null],[12,"tms_cutime","","",17,null],[12,"tms_cstime","","",17,null],[3,"servent","","",null,null],[12,"s_name","","",18,null],[12,"s_aliases","","",18,null],[12,"s_port","","",18,null],[12,"s_proto","","",18,null],[3,"protoent","","",null,null],[12,"p_name","","",19,null],[12,"p_aliases","","",19,null],[12,"p_proto","","",19,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",20,null],[12,"sa_data","","",20,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",21,null],[12,"sin_port","","",21,null],[12,"sin_addr","","",21,null],[12,"sin_zero","","",21,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",22,null],[12,"sin6_port","","",22,null],[12,"sin6_flowinfo","","",22,null],[12,"sin6_addr","","",22,null],[12,"sin6_scope_id","","",22,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",23,null],[12,"sun_path","","",23,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",24,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",25,null],[12,"ai_family","","",25,null],[12,"ai_socktype","","",25,null],[12,"ai_protocol","","",25,null],[12,"ai_addrlen","","",25,null],[12,"ai_addr","","",25,null],[12,"ai_canonname","","",25,null],[12,"ai_next","","",25,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",26,null],[12,"nl_pid","","",26,null],[12,"nl_groups","","",26,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",27,null],[12,"sll_protocol","","",27,null],[12,"sll_ifindex","","",27,null],[12,"sll_hatype","","",27,null],[12,"sll_pkttype","","",27,null],[12,"sll_halen","","",27,null],[12,"sll_addr","","",27,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",28,null],[12,"tm_min","","",28,null],[12,"tm_hour","","",28,null],[12,"tm_mday","","",28,null],[12,"tm_mon","","",28,null],[12,"tm_year","","",28,null],[12,"tm_wday","","",28,null],[12,"tm_yday","","",28,null],[12,"tm_isdst","","",28,null],[12,"tm_gmtoff","","",28,null],[12,"tm_zone","","",28,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",29,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",30,null],[12,"dli_fbase","","",30,null],[12,"dli_sname","","",30,null],[12,"dli_saddr","","",30,null],[3,"epoll_event","","",null,null],[12,"events","","",31,null],[12,"u64","","",31,null],[3,"utsname","","",null,null],[12,"sysname","","",32,null],[12,"nodename","","",32,null],[12,"release","","",32,null],[12,"version","","",32,null],[12,"machine","","",32,null],[12,"domainname","","",32,null],[3,"lconv","","",null,null],[12,"decimal_point","","",33,null],[12,"thousands_sep","","",33,null],[12,"grouping","","",33,null],[12,"int_curr_symbol","","",33,null],[12,"currency_symbol","","",33,null],[12,"mon_decimal_point","","",33,null],[12,"mon_thousands_sep","","",33,null],[12,"mon_grouping","","",33,null],[12,"positive_sign","","",33,null],[12,"negative_sign","","",33,null],[12,"int_frac_digits","","",33,null],[12,"frac_digits","","",33,null],[12,"p_cs_precedes","","",33,null],[12,"p_sep_by_space","","",33,null],[12,"n_cs_precedes","","",33,null],[12,"n_sep_by_space","","",33,null],[12,"p_sign_posn","","",33,null],[12,"n_sign_posn","","",33,null],[12,"int_p_cs_precedes","","",33,null],[12,"int_p_sep_by_space","","",33,null],[12,"int_n_cs_precedes","","",33,null],[12,"int_n_sep_by_space","","",33,null],[12,"int_p_sign_posn","","",33,null],[12,"int_n_sign_posn","","",33,null],[3,"sigevent","","",null,null],[12,"sigev_value","","",34,null],[12,"sigev_signo","","",34,null],[12,"sigev_notify","","",34,null],[12,"sigev_notify_thread_id","","",34,null],[3,"dirent","","",null,null],[12,"d_ino","","",35,null],[12,"d_off","","",35,null],[12,"d_reclen","","",35,null],[12,"d_type","","",35,null],[12,"d_name","","",35,null],[3,"dirent64","","",null,null],[12,"d_ino","","",36,null],[12,"d_off","","",36,null],[12,"d_reclen","","",36,null],[12,"d_type","","",36,null],[12,"d_name","","",36,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",37,null],[12,"rlim_max","","",37,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",38,null],[12,"gl_pathv","","",38,null],[12,"gl_offs","","",38,null],[12,"gl_flags","","",38,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",39,null],[12,"ifa_name","","",39,null],[12,"ifa_flags","","",39,null],[12,"ifa_addr","","",39,null],[12,"ifa_netmask","","",39,null],[12,"ifa_ifu","","",39,null],[12,"ifa_data","","",39,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_rwlockattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",40,null],[12,"pw_passwd","","",40,null],[12,"pw_uid","","",40,null],[12,"pw_gid","","",40,null],[12,"pw_gecos","","",40,null],[12,"pw_dir","","",40,null],[12,"pw_shell","","",40,null],[3,"spwd","","",null,null],[12,"sp_namp","","",41,null],[12,"sp_pwdp","","",41,null],[12,"sp_lstchg","","",41,null],[12,"sp_min","","",41,null],[12,"sp_max","","",41,null],[12,"sp_warn","","",41,null],[12,"sp_inact","","",41,null],[12,"sp_expire","","",41,null],[12,"sp_flag","","",41,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",42,null],[12,"f_frsize","","",42,null],[12,"f_blocks","","",42,null],[12,"f_bfree","","",42,null],[12,"f_bavail","","",42,null],[12,"f_files","","",42,null],[12,"f_ffree","","",42,null],[12,"f_favail","","",42,null],[12,"f_fsid","","",42,null],[12,"f_flag","","",42,null],[12,"f_namemax","","",42,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",43,null],[12,"dqb_bsoftlimit","","",43,null],[12,"dqb_curspace","","",43,null],[12,"dqb_ihardlimit","","",43,null],[12,"dqb_isoftlimit","","",43,null],[12,"dqb_curinodes","","",43,null],[12,"dqb_btime","","",43,null],[12,"dqb_itime","","",43,null],[12,"dqb_valid","","",43,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",44,null],[12,"ssi_errno","","",44,null],[12,"ssi_code","","",44,null],[12,"ssi_pid","","",44,null],[12,"ssi_uid","","",44,null],[12,"ssi_fd","","",44,null],[12,"ssi_tid","","",44,null],[12,"ssi_band","","",44,null],[12,"ssi_overrun","","",44,null],[12,"ssi_trapno","","",44,null],[12,"ssi_status","","",44,null],[12,"ssi_int","","",44,null],[12,"ssi_ptr","","",44,null],[12,"ssi_utime","","",44,null],[12,"ssi_stime","","",44,null],[12,"ssi_addr","","",44,null],[3,"itimerspec","","",null,null],[12,"it_interval","","",45,null],[12,"it_value","","",45,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",46,null],[12,"mq_maxmsg","","",46,null],[12,"mq_msgsize","","",46,null],[12,"mq_curmsgs","","",46,null],[3,"cpu_set_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",47,null],[12,"if_name","","",47,null],[3,"msginfo","","",null,null],[12,"msgpool","","",48,null],[12,"msgmap","","",48,null],[12,"msgmax","","",48,null],[12,"msgmnb","","",48,null],[12,"msgmni","","",48,null],[12,"msgssz","","",48,null],[12,"msgtql","","",48,null],[12,"msgseg","","",48,null],[3,"mmsghdr","","",null,null],[12,"msg_hdr","","",49,null],[12,"msg_len","","",49,null],[3,"sembuf","","",null,null],[12,"sem_num","","",50,null],[12,"sem_op","","",50,null],[12,"sem_flg","","",50,null],[3,"input_event","","",null,null],[12,"time","","",51,null],[12,"type_","","",51,null],[12,"code","","",51,null],[12,"value","","",51,null],[3,"input_id","","",null,null],[12,"bustype","","",52,null],[12,"vendor","","",52,null],[12,"product","","",52,null],[12,"version","","",52,null],[3,"input_absinfo","","",null,null],[12,"value","","",53,null],[12,"minimum","","",53,null],[12,"maximum","","",53,null],[12,"fuzz","","",53,null],[12,"flat","","",53,null],[12,"resolution","","",53,null],[3,"input_keymap_entry","","",null,null],[12,"flags","","",54,null],[12,"len","","",54,null],[12,"index","","",54,null],[12,"keycode","","",54,null],[12,"scancode","","",54,null],[3,"input_mask","","",null,null],[12,"type_","","",55,null],[12,"codes_size","","",55,null],[12,"codes_ptr","","",55,null],[3,"ff_replay","","",null,null],[12,"length","","",56,null],[12,"delay","","",56,null],[3,"ff_trigger","","",null,null],[12,"button","","",57,null],[12,"interval","","",57,null],[3,"ff_envelope","","",null,null],[12,"attack_length","","",58,null],[12,"attack_level","","",58,null],[12,"fade_length","","",58,null],[12,"fade_level","","",58,null],[3,"ff_constant_effect","","",null,null],[12,"level","","",59,null],[12,"envelope","","",59,null],[3,"ff_ramp_effect","","",null,null],[12,"start_level","","",60,null],[12,"end_level","","",60,null],[12,"envelope","","",60,null],[3,"ff_condition_effect","","",null,null],[12,"right_saturation","","",61,null],[12,"left_saturation","","",61,null],[12,"right_coeff","","",61,null],[12,"left_coeff","","",61,null],[12,"deadband","","",61,null],[12,"center","","",61,null],[3,"ff_periodic_effect","","",null,null],[12,"waveform","","",62,null],[12,"period","","",62,null],[12,"magnitude","","",62,null],[12,"offset","","",62,null],[12,"phase","","",62,null],[12,"envelope","","",62,null],[12,"custom_len","","",62,null],[12,"custom_data","","",62,null],[3,"ff_rumble_effect","","",null,null],[12,"strong_magnitude","","",63,null],[12,"weak_magnitude","","",63,null],[3,"ff_effect","","",null,null],[12,"type_","","",64,null],[12,"id","","",64,null],[12,"direction","","",64,null],[12,"trigger","","",64,null],[12,"replay","","",64,null],[12,"u","","",64,null],[3,"dl_phdr_info","","",null,null],[12,"dlpi_addr","","",65,null],[12,"dlpi_name","","",65,null],[12,"dlpi_phdr","","",65,null],[12,"dlpi_phnum","","",65,null],[12,"dlpi_adds","","",65,null],[12,"dlpi_subs","","",65,null],[12,"dlpi_tls_modid","","",65,null],[12,"dlpi_tls_data","","",65,null],[3,"Elf32_Phdr","","",null,null],[12,"p_type","","",66,null],[12,"p_offset","","",66,null],[12,"p_vaddr","","",66,null],[12,"p_paddr","","",66,null],[12,"p_filesz","","",66,null],[12,"p_memsz","","",66,null],[12,"p_flags","","",66,null],[12,"p_align","","",66,null],[3,"Elf64_Phdr","","",null,null],[12,"p_type","","",67,null],[12,"p_flags","","",67,null],[12,"p_offset","","",67,null],[12,"p_vaddr","","",67,null],[12,"p_paddr","","",67,null],[12,"p_filesz","","",67,null],[12,"p_memsz","","",67,null],[12,"p_align","","",67,null],[3,"ucred","","",null,null],[12,"pid","","",68,null],[12,"uid","","",68,null],[12,"gid","","",68,null],[3,"mntent","","",null,null],[12,"mnt_fsname","","",69,null],[12,"mnt_dir","","",69,null],[12,"mnt_type","","",69,null],[12,"mnt_opts","","",69,null],[12,"mnt_freq","","",69,null],[12,"mnt_passno","","",69,null],[3,"posix_spawn_file_actions_t","","",null,null],[3,"posix_spawnattr_t","","",null,null],[3,"genlmsghdr","","",null,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",70,null],[12,"aio_lio_opcode","","",70,null],[12,"aio_reqprio","","",70,null],[12,"aio_buf","","",70,null],[12,"aio_nbytes","","",70,null],[12,"aio_sigevent","","",70,null],[12,"aio_offset","","",70,null],[3,"__exit_status","","",null,null],[12,"e_termination","","",71,null],[12,"e_exit","","",71,null],[3,"__timeval","","",null,null],[12,"tv_sec","","",72,null],[12,"tv_usec","","",72,null],[3,"utmpx","","",null,null],[12,"ut_type","","",73,null],[12,"ut_pid","","",73,null],[12,"ut_line","","",73,null],[12,"ut_id","","",73,null],[12,"ut_user","","",73,null],[12,"ut_host","","",73,null],[12,"ut_exit","","",73,null],[12,"ut_session","","",73,null],[12,"ut_tv","","",73,null],[12,"ut_addr_v6","","",73,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",74,null],[12,"sa_mask","","",74,null],[12,"sa_flags","","",74,null],[12,"sa_restorer","","",74,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",75,null],[12,"ss_flags","","",75,null],[12,"ss_size","","",75,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",76,null],[12,"si_errno","","",76,null],[12,"si_code","","",76,null],[12,"_pad","","",76,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",77,null],[12,"gl_pathv","","",77,null],[12,"gl_offs","","",77,null],[12,"gl_flags","","",77,null],[3,"statfs","","",null,null],[12,"f_type","","",78,null],[12,"f_bsize","","",78,null],[12,"f_blocks","","",78,null],[12,"f_bfree","","",78,null],[12,"f_bavail","","",78,null],[12,"f_files","","",78,null],[12,"f_ffree","","",78,null],[12,"f_fsid","","",78,null],[12,"f_namelen","","",78,null],[12,"f_frsize","","",78,null],[3,"msghdr","","",null,null],[12,"msg_name","","",79,null],[12,"msg_namelen","","",79,null],[12,"msg_iov","","",79,null],[12,"msg_iovlen","","",79,null],[12,"msg_control","","",79,null],[12,"msg_controllen","","",79,null],[12,"msg_flags","","",79,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",80,null],[12,"cmsg_level","","",80,null],[12,"cmsg_type","","",80,null],[3,"termios","","",null,null],[12,"c_iflag","","",81,null],[12,"c_oflag","","",81,null],[12,"c_cflag","","",81,null],[12,"c_lflag","","",81,null],[12,"c_line","","",81,null],[12,"c_cc","","",81,null],[12,"c_ispeed","","",81,null],[12,"c_ospeed","","",81,null],[3,"flock","","",null,null],[12,"l_type","","",82,null],[12,"l_whence","","",82,null],[12,"l_start","","",82,null],[12,"l_len","","",82,null],[12,"l_pid","","",82,null],[3,"sem_t","","",null,null],[3,"mallinfo","","",null,null],[12,"arena","","",83,null],[12,"ordblks","","",83,null],[12,"smblks","","",83,null],[12,"hblks","","",83,null],[12,"hblkhd","","",83,null],[12,"usmblks","","",83,null],[12,"fsmblks","","",83,null],[12,"uordblks","","",83,null],[12,"fordblks","","",83,null],[12,"keepcost","","",83,null],[3,"nlmsghdr","","",null,null],[3,"nlmsgerr","","",null,null],[3,"nl_pktinfo","","",null,null],[3,"nl_mmap_req","","",null,null],[3,"nl_mmap_hdr","","",null,null],[3,"nlattr","","",null,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",84,null],[12,"loads","","",84,null],[12,"totalram","","",84,null],[12,"freeram","","",84,null],[12,"sharedram","","",84,null],[12,"bufferram","","",84,null],[12,"totalswap","","",84,null],[12,"freeswap","","",84,null],[12,"procs","","",84,null],[12,"pad","","",84,null],[12,"totalhigh","","",84,null],[12,"freehigh","","",84,null],[12,"mem_unit","","",84,null],[12,"_f","","",84,null],[3,"msqid_ds","","",null,null],[12,"msg_perm","","",85,null],[12,"msg_stime","","",85,null],[12,"msg_rtime","","",85,null],[12,"msg_ctime","","",85,null],[12,"msg_qnum","","",85,null],[12,"msg_qbytes","","",85,null],[12,"msg_lspid","","",85,null],[12,"msg_lrpid","","",85,null],[3,"stat","","",null,null],[12,"st_dev","","",86,null],[12,"st_ino","","",86,null],[12,"st_nlink","","",86,null],[12,"st_mode","","",86,null],[12,"st_uid","","",86,null],[12,"st_gid","","",86,null],[12,"st_rdev","","",86,null],[12,"st_size","","",86,null],[12,"st_blksize","","",86,null],[12,"st_blocks","","",86,null],[12,"st_atime","","",86,null],[12,"st_atime_nsec","","",86,null],[12,"st_mtime","","",86,null],[12,"st_mtime_nsec","","",86,null],[12,"st_ctime","","",86,null],[12,"st_ctime_nsec","","",86,null],[3,"stat64","","",null,null],[12,"st_dev","","",87,null],[12,"st_ino","","",87,null],[12,"st_nlink","","",87,null],[12,"st_mode","","",87,null],[12,"st_uid","","",87,null],[12,"st_gid","","",87,null],[12,"st_rdev","","",87,null],[12,"st_size","","",87,null],[12,"st_blksize","","",87,null],[12,"st_blocks","","",87,null],[12,"st_atime","","",87,null],[12,"st_atime_nsec","","",87,null],[12,"st_mtime","","",87,null],[12,"st_mtime_nsec","","",87,null],[12,"st_ctime","","",87,null],[12,"st_ctime_nsec","","",87,null],[3,"statfs64","","",null,null],[12,"f_type","","",88,null],[12,"f_bsize","","",88,null],[12,"f_blocks","","",88,null],[12,"f_bfree","","",88,null],[12,"f_bavail","","",88,null],[12,"f_files","","",88,null],[12,"f_ffree","","",88,null],[12,"f_fsid","","",88,null],[12,"f_namelen","","",88,null],[12,"f_frsize","","",88,null],[12,"f_flags","","",88,null],[12,"f_spare","","",88,null],[3,"statvfs64","","",null,null],[12,"f_bsize","","",89,null],[12,"f_frsize","","",89,null],[12,"f_blocks","","",89,null],[12,"f_bfree","","",89,null],[12,"f_bavail","","",89,null],[12,"f_files","","",89,null],[12,"f_ffree","","",89,null],[12,"f_favail","","",89,null],[12,"f_fsid","","",89,null],[12,"f_flag","","",89,null],[12,"f_namemax","","",89,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",90,null],[12,"exponent","","",90,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",91,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",92,null],[12,"swd","","",92,null],[12,"ftw","","",92,null],[12,"fop","","",92,null],[12,"rip","","",92,null],[12,"rdp","","",92,null],[12,"mxcsr","","",92,null],[12,"mxcr_mask","","",92,null],[12,"_st","","",92,null],[12,"_xmm","","",92,null],[3,"user_fpregs_struct","","",null,null],[12,"cwd","","",93,null],[12,"swd","","",93,null],[12,"ftw","","",93,null],[12,"fop","","",93,null],[12,"rip","","",93,null],[12,"rdp","","",93,null],[12,"mxcsr","","",93,null],[12,"mxcr_mask","","",93,null],[12,"st_space","","",93,null],[12,"xmm_space","","",93,null],[3,"user_regs_struct","","",null,null],[12,"r15","","",94,null],[12,"r14","","",94,null],[12,"r13","","",94,null],[12,"r12","","",94,null],[12,"rbp","","",94,null],[12,"rbx","","",94,null],[12,"r11","","",94,null],[12,"r10","","",94,null],[12,"r9","","",94,null],[12,"r8","","",94,null],[12,"rax","","",94,null],[12,"rcx","","",94,null],[12,"rdx","","",94,null],[12,"rsi","","",94,null],[12,"rdi","","",94,null],[12,"orig_rax","","",94,null],[12,"rip","","",94,null],[12,"cs","","",94,null],[12,"eflags","","",94,null],[12,"rsp","","",94,null],[12,"ss","","",94,null],[12,"fs_base","","",94,null],[12,"gs_base","","",94,null],[12,"ds","","",94,null],[12,"es","","",94,null],[12,"fs","","",94,null],[12,"gs","","",94,null],[3,"user","","",null,null],[12,"regs","","",95,null],[12,"u_fpvalid","","",95,null],[12,"i387","","",95,null],[12,"u_tsize","","",95,null],[12,"u_dsize","","",95,null],[12,"u_ssize","","",95,null],[12,"start_code","","",95,null],[12,"start_stack","","",95,null],[12,"signal","","",95,null],[12,"u_ar0","","",95,null],[12,"u_fpstate","","",95,null],[12,"magic","","",95,null],[12,"u_comm","","",95,null],[12,"u_debugreg","","",95,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",96,null],[12,"fpregs","","",96,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",97,null],[12,"uc_link","","",97,null],[12,"uc_stack","","",97,null],[12,"uc_mcontext","","",97,null],[12,"uc_sigmask","","",97,null],[3,"ipc_perm","","",null,null],[12,"__key","","",98,null],[12,"uid","","",98,null],[12,"gid","","",98,null],[12,"cuid","","",98,null],[12,"cgid","","",98,null],[12,"mode","","",98,null],[12,"__seq","","",98,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",99,null],[12,"shm_segsz","","",99,null],[12,"shm_atime","","",99,null],[12,"shm_dtime","","",99,null],[12,"shm_ctime","","",99,null],[12,"shm_cpid","","",99,null],[12,"shm_lpid","","",99,null],[12,"shm_nattch","","",99,null],[3,"termios2","","",null,null],[12,"c_iflag","","",100,null],[12,"c_oflag","","",100,null],[12,"c_cflag","","",100,null],[12,"c_lflag","","",100,null],[12,"c_line","","",100,null],[12,"c_cc","","",100,null],[12,"c_ispeed","","",100,null],[12,"c_ospeed","","",100,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFCONTINUED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"QCMD","","",null,{"inputs":[{"name":"c_int"},{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_CLR","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"major","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"c_uint"}}],[5,"minor","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"c_uint"}}],[5,"makedev","","",null,{"inputs":[{"name":"c_uint"},{"name":"c_uint"}],"output":{"name":"dev_t"}}],[5,"NLA_ALIGN","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"wcstombs","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"openat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchown","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"seteuid","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"killpg","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"times","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_exit","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_init","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_rwlockattr_init","","",null,null],[5,"pthread_rwlockattr_destroy","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"res_init","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"gmtime","","",null,null],[5,"localtime","","",null,null],[5,"difftime","","",null,null],[5,"mknod","","",null,null],[5,"uname","","",null,null],[5,"gethostname","","",null,null],[5,"getservbyname","","",null,null],[5,"getprotobyname","","",null,null],[5,"getprotobynumber","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"readlink","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"sigprocmask","","",null,null],[5,"sigpending","","",null,null],[5,"timegm","","",null,null],[5,"getsid","","",null,null],[5,"sysconf","","",null,null],[5,"mkfifo","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfmakeraw","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"cfsetspeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcgetsid","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkdtemp","","",null,null],[5,"tmpnam","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_settime","","",null,null],[5,"dirfd","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"pipe2","","",null,null],[5,"statfs","","",null,null],[5,"statfs64","","",null,null],[5,"fstatfs","","",null,null],[5,"fstatfs64","","",null,null],[5,"statvfs64","","",null,null],[5,"fstatvfs64","","",null,null],[5,"memrchr","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"fstatat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"openat64","","",null,null],[5,"pread64","","",null,null],[5,"preadv64","","",null,null],[5,"pwrite64","","",null,null],[5,"pwritev64","","",null,null],[5,"readdir64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"truncate64","","",null,null],[5,"fdopendir","","",null,null],[5,"mknodat","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"pthread_condattr_setpshared","","",null,null],[5,"accept4","","",null,null],[5,"pthread_mutexattr_setpshared","","",null,null],[5,"pthread_rwlockattr_getpshared","","",null,null],[5,"pthread_rwlockattr_setpshared","","",null,null],[5,"ptsname_r","","",null,null],[5,"clearenv","","",null,null],[5,"waitid","","",null,null],[5,"setreuid","","",null,null],[5,"setregid","","",null,null],[5,"getresuid","","",null,null],[5,"getresgid","","",null,null],[5,"acct","","",null,null],[5,"brk","","",null,null],[5,"sbrk","","",null,null],[5,"vfork","","",null,null],[5,"setresgid","","",null,null],[5,"setresuid","","",null,null],[5,"wait4","","",null,null],[5,"openpty","","",null,null],[5,"execvpe","","",null,null],[5,"fexecve","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"lio_listio","","",null,null],[5,"lutimes","","",null,null],[5,"setpwent","","",null,null],[5,"endpwent","","",null,null],[5,"getpwent","","",null,null],[5,"setgrent","","",null,null],[5,"endgrent","","",null,null],[5,"getgrent","","",null,null],[5,"setspent","","",null,null],[5,"endspent","","",null,null],[5,"getspent","","",null,null],[5,"getspnam","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"ftok","","",null,null],[5,"semget","","",null,null],[5,"semop","","",null,null],[5,"semctl","","",null,null],[5,"msgctl","","",null,null],[5,"msgget","","",null,null],[5,"msgrcv","","",null,null],[5,"msgsnd","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"timerfd_create","","",null,null],[5,"timerfd_gettime","","",null,null],[5,"timerfd_settime","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"pthread_setschedprio","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"reboot","","",null,null],[5,"setfsgid","","",null,null],[5,"setfsuid","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sync_file_range","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"mremap","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"remap_file_pages","","",null,null],[5,"recvfrom","","",null,null],[5,"mkstemps","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"bind","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"getdomainname","","",null,null],[5,"setdomainname","","",null,null],[5,"vhangup","","",null,null],[5,"sendmmsg","","",null,null],[5,"recvmmsg","","",null,null],[5,"sync","","",null,null],[5,"syscall","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_wait","","",null,null],[5,"epoll_ctl","","",null,null],[5,"pthread_getschedparam","","",null,null],[5,"unshare","","",null,null],[5,"umount","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"tee","","",null,null],[5,"settimeofday","","",null,null],[5,"splice","","",null,null],[5,"eventfd","","",null,null],[5,"sched_rr_get_interval","","",null,null],[5,"sem_timedwait","","",null,null],[5,"sched_setparam","","",null,null],[5,"setns","","",null,null],[5,"swapoff","","",null,null],[5,"vmsplice","","",null,null],[5,"mount","","",null,null],[5,"personality","","",null,null],[5,"prctl","","",null,null],[5,"sched_getparam","","",null,null],[5,"ppoll","","",null,null],[5,"pthread_mutex_timedlock","","",null,null],[5,"clone","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"sethostname","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"pthread_condattr_getpshared","","",null,null],[5,"sysinfo","","",null,null],[5,"umount2","","",null,null],[5,"pthread_setschedparam","","",null,null],[5,"swapon","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sendfile","","",null,null],[5,"sigsuspend","","",null,null],[5,"getgrgid_r","","",null,null],[5,"sigaltstack","","",null,null],[5,"sem_close","","",null,null],[5,"getdtablesize","","",null,null],[5,"getgrnam_r","","",null,null],[5,"initgroups","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"sem_open","","",null,null],[5,"getgrnam","","",null,null],[5,"pthread_cancel","","",null,null],[5,"pthread_kill","","",null,null],[5,"sem_unlink","","",null,null],[5,"daemon","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"sigwait","","",null,null],[5,"pthread_atfork","","",null,null],[5,"getgrgid","","",null,null],[5,"getgrouplist","","",null,null],[5,"pthread_mutexattr_getpshared","","",null,null],[5,"popen","","",null,null],[5,"faccessat","","",null,null],[5,"pthread_create","","",null,null],[5,"dl_iterate_phdr","","",null,null],[5,"setmntent","","",null,null],[5,"getmntent","","",null,null],[5,"addmntent","","",null,null],[5,"endmntent","","",null,null],[5,"hasmntopt","","",null,null],[5,"posix_spawn","","",null,null],[5,"posix_spawnp","","",null,null],[5,"posix_spawnattr_init","","",null,null],[5,"posix_spawnattr_destroy","","",null,null],[5,"posix_spawnattr_getsigdefault","","",null,null],[5,"posix_spawnattr_setsigdefault","","",null,null],[5,"posix_spawnattr_getsigmask","","",null,null],[5,"posix_spawnattr_setsigmask","","",null,null],[5,"posix_spawnattr_getflags","","",null,null],[5,"posix_spawnattr_setflags","","",null,null],[5,"posix_spawnattr_getpgroup","","",null,null],[5,"posix_spawnattr_setpgroup","","",null,null],[5,"posix_spawnattr_getschedpolicy","","",null,null],[5,"posix_spawnattr_setschedpolicy","","",null,null],[5,"posix_spawnattr_getschedparam","","",null,null],[5,"posix_spawnattr_setschedparam","","",null,null],[5,"posix_spawn_file_actions_init","","",null,null],[5,"posix_spawn_file_actions_destroy","","",null,null],[5,"posix_spawn_file_actions_addopen","","",null,null],[5,"posix_spawn_file_actions_addclose","","",null,null],[5,"posix_spawn_file_actions_adddup2","","",null,null],[5,"utmpxname","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"getpt","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"pthread_rwlockattr_getkind_np","","",null,null],[5,"pthread_rwlockattr_setkind_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"mallinfo","","",null,null],[5,"malloc_usable_size","","",null,null],[5,"getauxval","","",null,null],[5,"getpwent_r","","",null,null],[5,"getgrent_r","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[5,"iopl","","",null,null],[5,"ioperm","","",null,null],[5,"sysctl","","",null,null],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"stat64"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"statfs64"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"statvfs64"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpxreg"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"_libc_xmmreg"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpstate"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"user_fpregs_struct"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"user_regs_struct"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"user"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"mcontext_t"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"ucontext_t"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"shmid_ds"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"termios2"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"sigset_t"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"sysinfo"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"msqid_ds"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"aiocb"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"__exit_status"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"__timeval"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"utmpx"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"sigaction"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"stack_t"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"glob64_t"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"statfs"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"msghdr"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"cmsghdr"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"termios"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"flock"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"sem_t"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"mallinfo"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"nlmsghdr"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"nlmsgerr"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"nl_pktinfo"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"nl_mmap_req"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"nl_mmap_hdr"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"nlattr"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"dirent"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"dirent64"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"rlimit64"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"glob_t"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlockattr_t"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"pthread_condattr_t"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"passwd"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"spwd"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"statvfs"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"dqblk"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"itimerspec"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"fsid_t"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"mq_attr"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"cpu_set_t"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"if_nameindex"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"msginfo"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"mmsghdr"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"sembuf"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"input_event"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"input_id"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"input_absinfo"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"input_keymap_entry"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"input_mask"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"ff_replay"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"ff_trigger"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"ff_envelope"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"ff_constant_effect"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"ff_ramp_effect"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"ff_condition_effect"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"ff_periodic_effect"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"ff_rumble_effect"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"ff_effect"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"dl_phdr_info"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"elf32_phdr"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"elf64_phdr"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"ucred"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"mntent"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"posix_spawn_file_actions_t"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"posix_spawnattr_t"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"genlmsghdr"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"addrinfo"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"fd_set"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"sched_param"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"dl_info"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"epoll_event"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"utsname"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"lconv"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"sigevent"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utimbuf"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rlimit"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"rusage"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"in_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"in6_addr"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"hostent"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"iovec"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"pollfd"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"winsize"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"linger"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"sigval"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"itimerval"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"tms"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"servent"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"protoent"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"clockid_t","","",null,null],[6,"key_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"idtype_t","","",null,null],[6,"loff_t","","",null,null],[6,"__u8","","",null,null],[6,"__u16","","",null,null],[6,"__s16","","",null,null],[6,"__u32","","",null,null],[6,"__s32","","",null,null],[6,"Elf32_Half","","",null,null],[6,"Elf32_Word","","",null,null],[6,"Elf32_Off","","",null,null],[6,"Elf32_Addr","","",null,null],[6,"Elf64_Half","","",null,null],[6,"Elf64_Word","","",null,null],[6,"Elf64_Off","","",null,null],[6,"Elf64_Addr","","",null,null],[6,"Elf64_Xword","","",null,null],[6,"__priority_which_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"msgqnum_t","","",null,null],[6,"msglen_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"__u64","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[17,"INT_MIN","","",null,null],[17,"INT_MAX","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_UNKNOWN","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"IFNAMSIZ","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"INADDR_LOOPBACK","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_CANCELLK","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"F_ADD_SEALS","","",null,null],[17,"F_GET_SEALS","","",null,null],[17,"F_SEAL_SEAL","","",null,null],[17,"F_SEAL_SHRINK","","",null,null],[17,"F_SEAL_GROW","","",null,null],[17,"F_SEAL_WRITE","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SCM_CREDENTIALS","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"MADV_SOFT_OFFLINE","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_MASTER","","",null,null],[17,"IFF_SLAVE","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_PORTSEL","","",null,null],[17,"IFF_AUTOMEDIA","","",null,null],[17,"IFF_DYNAMIC","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_UDP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_ICMPV6","","",null,null],[17,"SOL_RAW","","",null,null],[17,"SOL_DECNET","","",null,null],[17,"SOL_X25","","",null,null],[17,"SOL_PACKET","","",null,null],[17,"SOL_ATM","","",null,null],[17,"SOL_AAL","","",null,null],[17,"SOL_IRDA","","",null,null],[17,"SOL_NETBEUI","","",null,null],[17,"SOL_LLC","","",null,null],[17,"SOL_DCCP","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"SOL_TIPC","","",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_AX25","","",null,null],[17,"AF_IPX","","",null,null],[17,"AF_APPLETALK","","",null,null],[17,"AF_NETROM","","",null,null],[17,"AF_BRIDGE","","",null,null],[17,"AF_ATMPVC","","",null,null],[17,"AF_X25","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_ROSE","","",null,null],[17,"AF_DECnet","","",null,null],[17,"AF_NETBEUI","","",null,null],[17,"AF_SECURITY","","",null,null],[17,"AF_KEY","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_ROUTE","","",null,null],[17,"AF_PACKET","","",null,null],[17,"AF_ASH","","",null,null],[17,"AF_ECONET","","",null,null],[17,"AF_ATMSVC","","",null,null],[17,"AF_RDS","","",null,null],[17,"AF_SNA","","",null,null],[17,"AF_IRDA","","",null,null],[17,"AF_PPPOX","","",null,null],[17,"AF_WANPIPE","","",null,null],[17,"AF_LLC","","",null,null],[17,"AF_CAN","","",null,null],[17,"AF_TIPC","","",null,null],[17,"AF_BLUETOOTH","","",null,null],[17,"AF_IUCV","","",null,null],[17,"AF_RXRPC","","",null,null],[17,"AF_ISDN","","",null,null],[17,"AF_PHONET","","",null,null],[17,"AF_IEEE802154","","",null,null],[17,"AF_CAIF","","",null,null],[17,"AF_ALG","","",null,null],[17,"PF_UNSPEC","","",null,null],[17,"PF_UNIX","","",null,null],[17,"PF_LOCAL","","",null,null],[17,"PF_INET","","",null,null],[17,"PF_AX25","","",null,null],[17,"PF_IPX","","",null,null],[17,"PF_APPLETALK","","",null,null],[17,"PF_NETROM","","",null,null],[17,"PF_BRIDGE","","",null,null],[17,"PF_ATMPVC","","",null,null],[17,"PF_X25","","",null,null],[17,"PF_INET6","","",null,null],[17,"PF_ROSE","","",null,null],[17,"PF_DECnet","","",null,null],[17,"PF_NETBEUI","","",null,null],[17,"PF_SECURITY","","",null,null],[17,"PF_KEY","","",null,null],[17,"PF_NETLINK","","",null,null],[17,"PF_ROUTE","","",null,null],[17,"PF_PACKET","","",null,null],[17,"PF_ASH","","",null,null],[17,"PF_ECONET","","",null,null],[17,"PF_ATMSVC","","",null,null],[17,"PF_RDS","","",null,null],[17,"PF_SNA","","",null,null],[17,"PF_IRDA","","",null,null],[17,"PF_PPPOX","","",null,null],[17,"PF_WANPIPE","","",null,null],[17,"PF_LLC","","",null,null],[17,"PF_CAN","","",null,null],[17,"PF_TIPC","","",null,null],[17,"PF_BLUETOOTH","","",null,null],[17,"PF_IUCV","","",null,null],[17,"PF_RXRPC","","",null,null],[17,"PF_ISDN","","",null,null],[17,"PF_PHONET","","",null,null],[17,"PF_IEEE802154","","",null,null],[17,"PF_CAIF","","",null,null],[17,"PF_ALG","","",null,null],[17,"SOMAXCONN","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTROUTE","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_WAITALL","","",null,null],[17,"MSG_FIN","","",null,null],[17,"MSG_SYN","","",null,null],[17,"MSG_CONFIRM","","",null,null],[17,"MSG_RST","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"MSG_NOSIGNAL","","",null,null],[17,"MSG_MORE","","",null,null],[17,"MSG_WAITFORONE","","",null,null],[17,"MSG_FASTOPEN","","",null,null],[17,"MSG_CMSG_CLOEXEC","","",null,null],[17,"SCM_TIMESTAMP","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_UNICAST_HOPS","","",null,null],[17,"IPV6_MULTICAST_IF","","",null,null],[17,"IPV6_MULTICAST_HOPS","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"CR0","","",null,null],[17,"FF0","","",null,null],[17,"BS0","","",null,null],[17,"VT0","","",null,null],[17,"VERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VLNEXT","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"CS5","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHO","","",null,null],[17,"OCRNL","","",null,null],[17,"ONOCR","","",null,null],[17,"ONLRET","","",null,null],[17,"OFILL","","",null,null],[17,"OFDEL","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"CLONE_NEWCGROUP","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[17,"PTRACE_O_EXITKILL","","",null,null],[17,"PTRACE_O_SUSPEND_SECCOMP","","",null,null],[17,"PTRACE_O_MASK","","",null,null],[17,"PTRACE_EVENT_FORK","","",null,null],[17,"PTRACE_EVENT_VFORK","","",null,null],[17,"PTRACE_EVENT_CLONE","","",null,null],[17,"PTRACE_EVENT_EXEC","","",null,null],[17,"PTRACE_EVENT_VFORK_DONE","","",null,null],[17,"PTRACE_EVENT_EXIT","","",null,null],[17,"PTRACE_EVENT_SECCOMP","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"AT_REMOVEDIR","","",null,null],[17,"AT_SYMLINK_FOLLOW","","",null,null],[17,"AT_NO_AUTOMOUNT","","",null,null],[17,"AT_EMPTY_PATH","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"UTIME_OMIT","","",null,null],[17,"UTIME_NOW","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_PC_SYNC_IO","","",null,null],[17,"_PC_ASYNC_IO","","",null,null],[17,"_PC_PRIO_IO","","",null,null],[17,"_PC_SOCK_MAXBUF","","",null,null],[17,"_PC_FILESIZEBITS","","",null,null],[17,"_PC_REC_INCR_XFER_SIZE","","",null,null],[17,"_PC_REC_MAX_XFER_SIZE","","",null,null],[17,"_PC_REC_MIN_XFER_SIZE","","",null,null],[17,"_PC_REC_XFER_ALIGN","","",null,null],[17,"_PC_ALLOC_SIZE_MIN","","",null,null],[17,"_PC_SYMLINK_MAX","","",null,null],[17,"_PC_2_SYMLINKS","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_UIO_MAXIOV","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_PHYS_PAGES","","",null,null],[17,"_SC_AVPHYS_PAGES","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XOPEN_XPG2","","",null,null],[17,"_SC_XOPEN_XPG3","","",null,null],[17,"_SC_XOPEN_XPG4","","",null,null],[17,"_SC_NZERO","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_STREAMS","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_V7_ILP32_OFF32","","",null,null],[17,"_SC_V7_ILP32_OFFBIG","","",null,null],[17,"_SC_V7_LP64_OFF64","","",null,null],[17,"_SC_V7_LPBIG_OFFBIG","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_PROTECT","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"IFF_LOWER_UP","","",null,null],[17,"IFF_DORMANT","","",null,null],[17,"IFF_ECHO","","",null,null],[17,"IFF_TUN","","",null,null],[17,"IFF_TAP","","",null,null],[17,"IFF_NO_PI","","",null,null],[17,"TUN_READQ_SIZE","","",null,null],[17,"TUN_TUN_DEV","","",null,null],[17,"TUN_TAP_DEV","","",null,null],[17,"TUN_TYPE_MASK","","",null,null],[17,"IFF_ONE_QUEUE","","",null,null],[17,"IFF_VNET_HDR","","",null,null],[17,"IFF_TUN_EXCL","","",null,null],[17,"IFF_MULTI_QUEUE","","",null,null],[17,"IFF_ATTACH_QUEUE","","",null,null],[17,"IFF_DETACH_QUEUE","","",null,null],[17,"IFF_PERSIST","","",null,null],[17,"IFF_NOFILTER","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"PTHREAD_PROCESS_PRIVATE","","",null,null],[17,"PTHREAD_PROCESS_SHARED","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"RENAME_NOREPLACE","","",null,null],[17,"RENAME_EXCHANGE","","",null,null],[17,"RENAME_WHITEOUT","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPPROTO_HOPOPTS","","Hop-by-hop option header",null,null],[17,"IPPROTO_IGMP","","group mgmt protocol",null,null],[17,"IPPROTO_IPIP","","for compatibility",null,null],[17,"IPPROTO_EGP","","exterior gateway protocol",null,null],[17,"IPPROTO_PUP","","pup",null,null],[17,"IPPROTO_IDP","","xns idp",null,null],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",null,null],[17,"IPPROTO_DCCP","","DCCP",null,null],[17,"IPPROTO_ROUTING","","IP6 routing header",null,null],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",null,null],[17,"IPPROTO_RSVP","","resource reservation",null,null],[17,"IPPROTO_GRE","","General Routing Encap.",null,null],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",null,null],[17,"IPPROTO_AH","","IP6 Auth Header",null,null],[17,"IPPROTO_NONE","","IP6 no next header",null,null],[17,"IPPROTO_DSTOPTS","","IP6 destination option",null,null],[17,"IPPROTO_MTP","","",null,null],[17,"IPPROTO_BEETPH","","",null,null],[17,"IPPROTO_ENCAP","","encapsulation header",null,null],[17,"IPPROTO_PIM","","Protocol indep. multicast",null,null],[17,"IPPROTO_COMP","","IP Payload Comp. Protocol",null,null],[17,"IPPROTO_SCTP","","SCTP",null,null],[17,"IPPROTO_MH","","",null,null],[17,"IPPROTO_UDPLITE","","",null,null],[17,"IPPROTO_MPLS","","",null,null],[17,"IPPROTO_RAW","","raw IP packet",null,null],[17,"IPPROTO_MAX","","",null,null],[17,"AF_IB","","",null,null],[17,"AF_MPLS","","",null,null],[17,"AF_NFC","","",null,null],[17,"AF_VSOCK","","",null,null],[17,"PF_IB","","",null,null],[17,"PF_MPLS","","",null,null],[17,"PF_NFC","","",null,null],[17,"PF_VSOCK","","",null,null],[17,"IPC_PRIVATE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"MSG_STAT","","",null,null],[17,"MSG_INFO","","",null,null],[17,"MSG_NOERROR","","",null,null],[17,"MSG_EXCEPT","","",null,null],[17,"MSG_COPY","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLEXCLUSIVE","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"AI_PASSIVE","","",null,null],[17,"AI_CANONNAME","","",null,null],[17,"AI_NUMERICHOST","","",null,null],[17,"AI_V4MAPPED","","",null,null],[17,"AI_ALL","","",null,null],[17,"AI_ADDRCONFIG","","",null,null],[17,"AI_NUMERICSERV","","",null,null],[17,"EAI_BADFLAGS","","",null,null],[17,"EAI_NONAME","","",null,null],[17,"EAI_AGAIN","","",null,null],[17,"EAI_FAIL","","",null,null],[17,"EAI_NODATA","","",null,null],[17,"EAI_FAMILY","","",null,null],[17,"EAI_SOCKTYPE","","",null,null],[17,"EAI_SERVICE","","",null,null],[17,"EAI_MEMORY","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"EAI_OVERFLOW","","",null,null],[17,"NI_NUMERICHOST","","",null,null],[17,"NI_NUMERICSERV","","",null,null],[17,"NI_NOFQDN","","",null,null],[17,"NI_NAMEREQD","","",null,null],[17,"NI_DGRAM","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",null,null],[17,"SYNC_FILE_RANGE_WRITE","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"MREMAP_MAYMOVE","","",null,null],[17,"MREMAP_FIXED","","",null,null],[17,"PR_SET_PDEATHSIG","","",null,null],[17,"PR_GET_PDEATHSIG","","",null,null],[17,"PR_GET_DUMPABLE","","",null,null],[17,"PR_SET_DUMPABLE","","",null,null],[17,"PR_GET_UNALIGN","","",null,null],[17,"PR_SET_UNALIGN","","",null,null],[17,"PR_UNALIGN_NOPRINT","","",null,null],[17,"PR_UNALIGN_SIGBUS","","",null,null],[17,"PR_GET_KEEPCAPS","","",null,null],[17,"PR_SET_KEEPCAPS","","",null,null],[17,"PR_GET_FPEMU","","",null,null],[17,"PR_SET_FPEMU","","",null,null],[17,"PR_FPEMU_NOPRINT","","",null,null],[17,"PR_FPEMU_SIGFPE","","",null,null],[17,"PR_GET_FPEXC","","",null,null],[17,"PR_SET_FPEXC","","",null,null],[17,"PR_FP_EXC_SW_ENABLE","","",null,null],[17,"PR_FP_EXC_DIV","","",null,null],[17,"PR_FP_EXC_OVF","","",null,null],[17,"PR_FP_EXC_UND","","",null,null],[17,"PR_FP_EXC_RES","","",null,null],[17,"PR_FP_EXC_INV","","",null,null],[17,"PR_FP_EXC_DISABLED","","",null,null],[17,"PR_FP_EXC_NONRECOV","","",null,null],[17,"PR_FP_EXC_ASYNC","","",null,null],[17,"PR_FP_EXC_PRECISE","","",null,null],[17,"PR_GET_TIMING","","",null,null],[17,"PR_SET_TIMING","","",null,null],[17,"PR_TIMING_STATISTICAL","","",null,null],[17,"PR_TIMING_TIMESTAMP","","",null,null],[17,"PR_SET_NAME","","",null,null],[17,"PR_GET_NAME","","",null,null],[17,"PR_GET_ENDIAN","","",null,null],[17,"PR_SET_ENDIAN","","",null,null],[17,"PR_ENDIAN_BIG","","",null,null],[17,"PR_ENDIAN_LITTLE","","",null,null],[17,"PR_ENDIAN_PPC_LITTLE","","",null,null],[17,"PR_GET_SECCOMP","","",null,null],[17,"PR_SET_SECCOMP","","",null,null],[17,"PR_CAPBSET_READ","","",null,null],[17,"PR_CAPBSET_DROP","","",null,null],[17,"PR_GET_TSC","","",null,null],[17,"PR_SET_TSC","","",null,null],[17,"PR_TSC_ENABLE","","",null,null],[17,"PR_TSC_SIGSEGV","","",null,null],[17,"PR_GET_SECUREBITS","","",null,null],[17,"PR_SET_SECUREBITS","","",null,null],[17,"PR_SET_TIMERSLACK","","",null,null],[17,"PR_GET_TIMERSLACK","","",null,null],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",null,null],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",null,null],[17,"PR_MCE_KILL","","",null,null],[17,"PR_MCE_KILL_CLEAR","","",null,null],[17,"PR_MCE_KILL_SET","","",null,null],[17,"PR_MCE_KILL_LATE","","",null,null],[17,"PR_MCE_KILL_EARLY","","",null,null],[17,"PR_MCE_KILL_DEFAULT","","",null,null],[17,"PR_MCE_KILL_GET","","",null,null],[17,"PR_SET_MM","","",null,null],[17,"PR_SET_MM_START_CODE","","",null,null],[17,"PR_SET_MM_END_CODE","","",null,null],[17,"PR_SET_MM_START_DATA","","",null,null],[17,"PR_SET_MM_END_DATA","","",null,null],[17,"PR_SET_MM_START_STACK","","",null,null],[17,"PR_SET_MM_START_BRK","","",null,null],[17,"PR_SET_MM_BRK","","",null,null],[17,"PR_SET_MM_ARG_START","","",null,null],[17,"PR_SET_MM_ARG_END","","",null,null],[17,"PR_SET_MM_ENV_START","","",null,null],[17,"PR_SET_MM_ENV_END","","",null,null],[17,"PR_SET_MM_AUXV","","",null,null],[17,"PR_SET_MM_EXE_FILE","","",null,null],[17,"PR_SET_MM_MAP","","",null,null],[17,"PR_SET_MM_MAP_SIZE","","",null,null],[17,"PR_SET_PTRACER","","",null,null],[17,"PR_SET_CHILD_SUBREAPER","","",null,null],[17,"PR_GET_CHILD_SUBREAPER","","",null,null],[17,"PR_SET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_TID_ADDRESS","","",null,null],[17,"PR_SET_THP_DISABLE","","",null,null],[17,"PR_GET_THP_DISABLE","","",null,null],[17,"PR_MPX_ENABLE_MANAGEMENT","","",null,null],[17,"PR_MPX_DISABLE_MANAGEMENT","","",null,null],[17,"PR_SET_FP_MODE","","",null,null],[17,"PR_GET_FP_MODE","","",null,null],[17,"PR_FP_MODE_FR","","",null,null],[17,"PR_FP_MODE_FRE","","",null,null],[17,"PR_CAP_AMBIENT","","",null,null],[17,"PR_CAP_AMBIENT_IS_SET","","",null,null],[17,"PR_CAP_AMBIENT_RAISE","","",null,null],[17,"PR_CAP_AMBIENT_LOWER","","",null,null],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",null,null],[17,"GRND_NONBLOCK","","",null,null],[17,"GRND_RANDOM","","",null,null],[17,"SECCOMP_MODE_DISABLED","","",null,null],[17,"SECCOMP_MODE_STRICT","","",null,null],[17,"SECCOMP_MODE_FILTER","","",null,null],[17,"ITIMER_REAL","","",null,null],[17,"ITIMER_VIRTUAL","","",null,null],[17,"ITIMER_PROF","","",null,null],[17,"TFD_CLOEXEC","","",null,null],[17,"TFD_NONBLOCK","","",null,null],[17,"TFD_TIMER_ABSTIME","","",null,null],[17,"XATTR_CREATE","","",null,null],[17,"XATTR_REPLACE","","",null,null],[17,"_POSIX_VDISABLE","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"FALLOC_FL_COLLAPSE_RANGE","","",null,null],[17,"FALLOC_FL_ZERO_RANGE","","",null,null],[17,"FALLOC_FL_INSERT_RANGE","","",null,null],[17,"FALLOC_FL_UNSHARE_RANGE","","",null,null],[17,"ENOATTR","","",null,null],[17,"SO_ORIGINAL_DST","","",null,null],[17,"IUTF8","","",null,null],[17,"CMSPAR","","",null,null],[17,"MFD_CLOEXEC","","",null,null],[17,"MFD_ALLOW_SEALING","","",null,null],[17,"PT_NULL","","",null,null],[17,"PT_LOAD","","",null,null],[17,"PT_DYNAMIC","","",null,null],[17,"PT_INTERP","","",null,null],[17,"PT_NOTE","","",null,null],[17,"PT_SHLIB","","",null,null],[17,"PT_PHDR","","",null,null],[17,"PT_TLS","","",null,null],[17,"PT_NUM","","",null,null],[17,"PT_LOOS","","",null,null],[17,"PT_GNU_EH_FRAME","","",null,null],[17,"PT_GNU_STACK","","",null,null],[17,"PT_GNU_RELRO","","",null,null],[17,"ETH_ALEN","","",null,null],[17,"ETH_HLEN","","",null,null],[17,"ETH_ZLEN","","",null,null],[17,"ETH_DATA_LEN","","",null,null],[17,"ETH_FRAME_LEN","","",null,null],[17,"ETH_FCS_LEN","","",null,null],[17,"ETH_P_LOOP","","",null,null],[17,"ETH_P_PUP","","",null,null],[17,"ETH_P_PUPAT","","",null,null],[17,"ETH_P_IP","","",null,null],[17,"ETH_P_X25","","",null,null],[17,"ETH_P_ARP","","",null,null],[17,"ETH_P_BPQ","","",null,null],[17,"ETH_P_IEEEPUP","","",null,null],[17,"ETH_P_IEEEPUPAT","","",null,null],[17,"ETH_P_BATMAN","","",null,null],[17,"ETH_P_DEC","","",null,null],[17,"ETH_P_DNA_DL","","",null,null],[17,"ETH_P_DNA_RC","","",null,null],[17,"ETH_P_DNA_RT","","",null,null],[17,"ETH_P_LAT","","",null,null],[17,"ETH_P_DIAG","","",null,null],[17,"ETH_P_CUST","","",null,null],[17,"ETH_P_SCA","","",null,null],[17,"ETH_P_TEB","","",null,null],[17,"ETH_P_RARP","","",null,null],[17,"ETH_P_ATALK","","",null,null],[17,"ETH_P_AARP","","",null,null],[17,"ETH_P_8021Q","","",null,null],[17,"ETH_P_IPX","","",null,null],[17,"ETH_P_IPV6","","",null,null],[17,"ETH_P_PAUSE","","",null,null],[17,"ETH_P_SLOW","","",null,null],[17,"ETH_P_WCCP","","",null,null],[17,"ETH_P_MPLS_UC","","",null,null],[17,"ETH_P_MPLS_MC","","",null,null],[17,"ETH_P_ATMMPOA","","",null,null],[17,"ETH_P_PPP_DISC","","",null,null],[17,"ETH_P_PPP_SES","","",null,null],[17,"ETH_P_LINK_CTL","","",null,null],[17,"ETH_P_ATMFATE","","",null,null],[17,"ETH_P_PAE","","",null,null],[17,"ETH_P_AOE","","",null,null],[17,"ETH_P_8021AD","","",null,null],[17,"ETH_P_802_EX1","","",null,null],[17,"ETH_P_TIPC","","",null,null],[17,"ETH_P_MACSEC","","",null,null],[17,"ETH_P_8021AH","","",null,null],[17,"ETH_P_MVRP","","",null,null],[17,"ETH_P_1588","","",null,null],[17,"ETH_P_PRP","","",null,null],[17,"ETH_P_FCOE","","",null,null],[17,"ETH_P_TDLS","","",null,null],[17,"ETH_P_FIP","","",null,null],[17,"ETH_P_80221","","",null,null],[17,"ETH_P_LOOPBACK","","",null,null],[17,"ETH_P_QINQ1","","",null,null],[17,"ETH_P_QINQ2","","",null,null],[17,"ETH_P_QINQ3","","",null,null],[17,"ETH_P_EDSA","","",null,null],[17,"ETH_P_AF_IUCV","","",null,null],[17,"ETH_P_802_3_MIN","","",null,null],[17,"ETH_P_802_3","","",null,null],[17,"ETH_P_AX25","","",null,null],[17,"ETH_P_ALL","","",null,null],[17,"ETH_P_802_2","","",null,null],[17,"ETH_P_SNAP","","",null,null],[17,"ETH_P_DDCMP","","",null,null],[17,"ETH_P_WAN_PPP","","",null,null],[17,"ETH_P_PPP_MP","","",null,null],[17,"ETH_P_LOCALTALK","","",null,null],[17,"ETH_P_CANFD","","",null,null],[17,"ETH_P_PPPTALK","","",null,null],[17,"ETH_P_TR_802_2","","",null,null],[17,"ETH_P_MOBITEX","","",null,null],[17,"ETH_P_CONTROL","","",null,null],[17,"ETH_P_IRDA","","",null,null],[17,"ETH_P_ECONET","","",null,null],[17,"ETH_P_HDLC","","",null,null],[17,"ETH_P_ARCNET","","",null,null],[17,"ETH_P_DSA","","",null,null],[17,"ETH_P_TRAILER","","",null,null],[17,"ETH_P_PHONET","","",null,null],[17,"ETH_P_IEEE802154","","",null,null],[17,"ETH_P_CAIF","","",null,null],[17,"POSIX_SPAWN_RESETIDS","","",null,null],[17,"POSIX_SPAWN_SETPGROUP","","",null,null],[17,"POSIX_SPAWN_SETSIGDEF","","",null,null],[17,"POSIX_SPAWN_SETSIGMASK","","",null,null],[17,"POSIX_SPAWN_SETSCHEDPARAM","","",null,null],[17,"POSIX_SPAWN_SETSCHEDULER","","",null,null],[17,"NLMSG_NOOP","","",null,null],[17,"NLMSG_ERROR","","",null,null],[17,"NLMSG_DONE","","",null,null],[17,"NLMSG_OVERRUN","","",null,null],[17,"NLMSG_MIN_TYPE","","",null,null],[17,"GENL_NAMSIZ","","",null,null],[17,"GENL_MIN_ID","","",null,null],[17,"GENL_MAX_ID","","",null,null],[17,"GENL_ADMIN_PERM","","",null,null],[17,"GENL_CMD_CAP_DO","","",null,null],[17,"GENL_CMD_CAP_DUMP","","",null,null],[17,"GENL_CMD_CAP_HASPOL","","",null,null],[17,"GENL_ID_CTRL","","",null,null],[17,"CTRL_CMD_UNSPEC","","",null,null],[17,"CTRL_CMD_NEWFAMILY","","",null,null],[17,"CTRL_CMD_DELFAMILY","","",null,null],[17,"CTRL_CMD_GETFAMILY","","",null,null],[17,"CTRL_CMD_NEWOPS","","",null,null],[17,"CTRL_CMD_DELOPS","","",null,null],[17,"CTRL_CMD_GETOPS","","",null,null],[17,"CTRL_CMD_NEWMCAST_GRP","","",null,null],[17,"CTRL_CMD_DELMCAST_GRP","","",null,null],[17,"CTRL_CMD_GETMCAST_GRP","","",null,null],[17,"CTRL_ATTR_UNSPEC","","",null,null],[17,"CTRL_ATTR_FAMILY_ID","","",null,null],[17,"CTRL_ATTR_FAMILY_NAME","","",null,null],[17,"CTRL_ATTR_VERSION","","",null,null],[17,"CTRL_ATTR_HDRSIZE","","",null,null],[17,"CTRL_ATTR_MAXATTR","","",null,null],[17,"CTRL_ATTR_OPS","","",null,null],[17,"CTRL_ATTR_MCAST_GROUPS","","",null,null],[17,"CTRL_ATTR_OP_UNSPEC","","",null,null],[17,"CTRL_ATTR_OP_ID","","",null,null],[17,"CTRL_ATTR_OP_FLAGS","","",null,null],[17,"CTRL_ATTR_MCAST_GRP_UNSPEC","","",null,null],[17,"CTRL_ATTR_MCAST_GRP_NAME","","",null,null],[17,"CTRL_ATTR_MCAST_GRP_ID","","",null,null],[17,"NF_DROP","","",null,null],[17,"NF_ACCEPT","","",null,null],[17,"NF_STOLEN","","",null,null],[17,"NF_QUEUE","","",null,null],[17,"NF_REPEAT","","",null,null],[17,"NF_STOP","","",null,null],[17,"NF_MAX_VERDICT","","",null,null],[17,"NF_VERDICT_MASK","","",null,null],[17,"NF_VERDICT_FLAG_QUEUE_BYPASS","","",null,null],[17,"NF_VERDICT_QMASK","","",null,null],[17,"NF_VERDICT_QBITS","","",null,null],[17,"NF_VERDICT_BITS","","",null,null],[17,"NF_INET_PRE_ROUTING","","",null,null],[17,"NF_INET_LOCAL_IN","","",null,null],[17,"NF_INET_FORWARD","","",null,null],[17,"NF_INET_LOCAL_OUT","","",null,null],[17,"NF_INET_POST_ROUTING","","",null,null],[17,"NF_INET_NUMHOOKS","","",null,null],[17,"NFPROTO_UNSPEC","","",null,null],[17,"NFPROTO_IPV4","","",null,null],[17,"NFPROTO_ARP","","",null,null],[17,"NFPROTO_BRIDGE","","",null,null],[17,"NFPROTO_IPV6","","",null,null],[17,"NFPROTO_DECNET","","",null,null],[17,"NFPROTO_NUMPROTO","","",null,null],[17,"NF_IP_PRE_ROUTING","","",null,null],[17,"NF_IP_LOCAL_IN","","",null,null],[17,"NF_IP_FORWARD","","",null,null],[17,"NF_IP_LOCAL_OUT","","",null,null],[17,"NF_IP_POST_ROUTING","","",null,null],[17,"NF_IP_NUMHOOKS","","",null,null],[17,"NF_IP_PRI_FIRST","","",null,null],[17,"NF_IP_PRI_CONNTRACK_DEFRAG","","",null,null],[17,"NF_IP_PRI_RAW","","",null,null],[17,"NF_IP_PRI_SELINUX_FIRST","","",null,null],[17,"NF_IP_PRI_CONNTRACK","","",null,null],[17,"NF_IP_PRI_MANGLE","","",null,null],[17,"NF_IP_PRI_NAT_DST","","",null,null],[17,"NF_IP_PRI_FILTER","","",null,null],[17,"NF_IP_PRI_SECURITY","","",null,null],[17,"NF_IP_PRI_NAT_SRC","","",null,null],[17,"NF_IP_PRI_SELINUX_LAST","","",null,null],[17,"NF_IP_PRI_CONNTRACK_HELPER","","",null,null],[17,"NF_IP_PRI_CONNTRACK_CONFIRM","","",null,null],[17,"NF_IP_PRI_LAST","","",null,null],[17,"NF_IP6_PRE_ROUTING","","",null,null],[17,"NF_IP6_LOCAL_IN","","",null,null],[17,"NF_IP6_FORWARD","","",null,null],[17,"NF_IP6_LOCAL_OUT","","",null,null],[17,"NF_IP6_POST_ROUTING","","",null,null],[17,"NF_IP6_NUMHOOKS","","",null,null],[17,"NF_IP6_PRI_FIRST","","",null,null],[17,"NF_IP6_PRI_CONNTRACK_DEFRAG","","",null,null],[17,"NF_IP6_PRI_RAW","","",null,null],[17,"NF_IP6_PRI_SELINUX_FIRST","","",null,null],[17,"NF_IP6_PRI_CONNTRACK","","",null,null],[17,"NF_IP6_PRI_MANGLE","","",null,null],[17,"NF_IP6_PRI_NAT_DST","","",null,null],[17,"NF_IP6_PRI_FILTER","","",null,null],[17,"NF_IP6_PRI_SECURITY","","",null,null],[17,"NF_IP6_PRI_NAT_SRC","","",null,null],[17,"NF_IP6_PRI_SELINUX_LAST","","",null,null],[17,"NF_IP6_PRI_CONNTRACK_HELPER","","",null,null],[17,"NF_IP6_PRI_LAST","","",null,null],[17,"__UT_LINESIZE","","",null,null],[17,"__UT_NAMESIZE","","",null,null],[17,"__UT_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOL_RXRPC","","",null,null],[17,"SOL_PPPOL2TP","","",null,null],[17,"SOL_BLUETOOTH","","",null,null],[17,"SOL_PNPIPE","","",null,null],[17,"SOL_RDS","","",null,null],[17,"SOL_IUCV","","",null,null],[17,"SOL_CAIF","","",null,null],[17,"SOL_ALG","","",null,null],[17,"SOL_NFC","","",null,null],[17,"MSG_TRYHARD","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOCK_DCCP","","",null,null],[17,"SOCK_PACKET","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"DCCP_SOCKOPT_PACKET_SIZE","","",null,null],[17,"DCCP_SOCKOPT_SERVICE","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_L","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_R","","",null,null],[17,"DCCP_SOCKOPT_GET_CUR_MPS","","",null,null],[17,"DCCP_SOCKOPT_SERVER_TIMEWAIT","","",null,null],[17,"DCCP_SOCKOPT_SEND_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_RECV_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_AVAILABLE_CCIDS","","",null,null],[17,"DCCP_SOCKOPT_CCID","","",null,null],[17,"DCCP_SOCKOPT_TX_CCID","","",null,null],[17,"DCCP_SOCKOPT_RX_CCID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_ID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_TXQLEN","","",null,null],[17,"DCCP_SOCKOPT_CCID_RX_INFO","","",null,null],[17,"DCCP_SOCKOPT_CCID_TX_INFO","","",null,null],[17,"DCCP_SERVICE_LIST_MAX_LEN","","maximum number of services provided on the same listening port",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGEV_THREAD_ID","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_EQUIV_CLASS_MAX","","",null,null],[17,"_SC_CHARCLASS_NAME_MAX","","",null,null],[17,"_SC_PII","","",null,null],[17,"_SC_PII_XTI","","",null,null],[17,"_SC_PII_SOCKET","","",null,null],[17,"_SC_PII_INTERNET","","",null,null],[17,"_SC_PII_OSI","","",null,null],[17,"_SC_POLL","","",null,null],[17,"_SC_SELECT","","",null,null],[17,"_SC_PII_INTERNET_STREAM","","",null,null],[17,"_SC_PII_INTERNET_DGRAM","","",null,null],[17,"_SC_PII_OSI_COTS","","",null,null],[17,"_SC_PII_OSI_CLTS","","",null,null],[17,"_SC_PII_OSI_M","","",null,null],[17,"_SC_T_IOV_MAX","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"_SC_CHAR_BIT","","",null,null],[17,"_SC_CHAR_MAX","","",null,null],[17,"_SC_CHAR_MIN","","",null,null],[17,"_SC_INT_MAX","","",null,null],[17,"_SC_INT_MIN","","",null,null],[17,"_SC_LONG_BIT","","",null,null],[17,"_SC_WORD_BIT","","",null,null],[17,"_SC_MB_LEN_MAX","","",null,null],[17,"_SC_SSIZE_MAX","","",null,null],[17,"_SC_SCHAR_MAX","","",null,null],[17,"_SC_SCHAR_MIN","","",null,null],[17,"_SC_SHRT_MAX","","",null,null],[17,"_SC_SHRT_MIN","","",null,null],[17,"_SC_UCHAR_MAX","","",null,null],[17,"_SC_UINT_MAX","","",null,null],[17,"_SC_ULONG_MAX","","",null,null],[17,"_SC_USHRT_MAX","","",null,null],[17,"_SC_NL_ARGMAX","","",null,null],[17,"_SC_NL_LANGMAX","","",null,null],[17,"_SC_NL_MSGMAX","","",null,null],[17,"_SC_NL_NMAX","","",null,null],[17,"_SC_NL_SETMAX","","",null,null],[17,"_SC_NL_TEXTMAX","","",null,null],[17,"_SC_BASE","","",null,null],[17,"_SC_C_LANG_SUPPORT","","",null,null],[17,"_SC_C_LANG_SUPPORT_R","","",null,null],[17,"_SC_DEVICE_IO","","",null,null],[17,"_SC_DEVICE_SPECIFIC","","",null,null],[17,"_SC_DEVICE_SPECIFIC_R","","",null,null],[17,"_SC_FD_MGMT","","",null,null],[17,"_SC_FIFO","","",null,null],[17,"_SC_PIPE","","",null,null],[17,"_SC_FILE_ATTRIBUTES","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_FILE_SYSTEM","","",null,null],[17,"_SC_MULTI_PROCESS","","",null,null],[17,"_SC_SINGLE_PROCESS","","",null,null],[17,"_SC_NETWORKING","","",null,null],[17,"_SC_REGEX_VERSION","","",null,null],[17,"_SC_SIGNALS","","",null,null],[17,"_SC_SYSTEM_DATABASE","","",null,null],[17,"_SC_SYSTEM_DATABASE_R","","",null,null],[17,"_SC_USER_GROUPS","","",null,null],[17,"_SC_USER_GROUPS_R","","",null,null],[17,"_SC_LEVEL1_ICACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_ICACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_ICACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_DCACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL2_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL3_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL4_CACHE_LINESIZE","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"NETLINK_ROUTE","","",null,null],[17,"NETLINK_UNUSED","","",null,null],[17,"NETLINK_USERSOCK","","",null,null],[17,"NETLINK_FIREWALL","","",null,null],[17,"NETLINK_SOCK_DIAG","","",null,null],[17,"NETLINK_NFLOG","","",null,null],[17,"NETLINK_XFRM","","",null,null],[17,"NETLINK_SELINUX","","",null,null],[17,"NETLINK_ISCSI","","",null,null],[17,"NETLINK_AUDIT","","",null,null],[17,"NETLINK_FIB_LOOKUP","","",null,null],[17,"NETLINK_CONNECTOR","","",null,null],[17,"NETLINK_NETFILTER","","",null,null],[17,"NETLINK_IP6_FW","","",null,null],[17,"NETLINK_DNRTMSG","","",null,null],[17,"NETLINK_KOBJECT_UEVENT","","",null,null],[17,"NETLINK_GENERIC","","",null,null],[17,"NETLINK_SCSITRANSPORT","","",null,null],[17,"NETLINK_ECRYPTFS","","",null,null],[17,"NETLINK_RDMA","","",null,null],[17,"NETLINK_CRYPTO","","",null,null],[17,"NETLINK_INET_DIAG","","",null,null],[17,"MAX_LINKS","","",null,null],[17,"NLM_F_REQUEST","","",null,null],[17,"NLM_F_MULTI","","",null,null],[17,"NLM_F_ACK","","",null,null],[17,"NLM_F_ECHO","","",null,null],[17,"NLM_F_DUMP_INTR","","",null,null],[17,"NLM_F_DUMP_FILTERED","","",null,null],[17,"NLM_F_ROOT","","",null,null],[17,"NLM_F_MATCH","","",null,null],[17,"NLM_F_ATOMIC","","",null,null],[17,"NLM_F_DUMP","","",null,null],[17,"NLM_F_REPLACE","","",null,null],[17,"NLM_F_EXCL","","",null,null],[17,"NLM_F_CREATE","","",null,null],[17,"NLM_F_APPEND","","",null,null],[17,"NETLINK_ADD_MEMBERSHIP","","",null,null],[17,"NETLINK_DROP_MEMBERSHIP","","",null,null],[17,"NETLINK_PKTINFO","","",null,null],[17,"NETLINK_BROADCAST_ERROR","","",null,null],[17,"NETLINK_NO_ENOBUFS","","",null,null],[17,"NETLINK_RX_RING","","",null,null],[17,"NETLINK_TX_RING","","",null,null],[17,"NETLINK_LISTEN_ALL_NSID","","",null,null],[17,"NETLINK_LIST_MEMBERSHIPS","","",null,null],[17,"NETLINK_CAP_ACK","","",null,null],[17,"NLA_F_NESTED","","",null,null],[17,"NLA_F_NET_BYTEORDER","","",null,null],[17,"NLA_TYPE_MASK","","",null,null],[17,"NLA_ALIGNTO","","",null,null],[17,"GENL_UNS_ADMIN_PERM","","",null,null],[17,"GENL_ID_VFS_DQUOT","","",null,null],[17,"GENL_ID_PMCRAID","","",null,null],[17,"TIOCM_LE","","",null,null],[17,"TIOCM_DTR","","",null,null],[17,"TIOCM_RTS","","",null,null],[17,"TIOCM_ST","","",null,null],[17,"TIOCM_SR","","",null,null],[17,"TIOCM_CTS","","",null,null],[17,"TIOCM_CAR","","",null,null],[17,"TIOCM_RNG","","",null,null],[17,"TIOCM_DSR","","",null,null],[17,"TIOCM_CD","","",null,null],[17,"TIOCM_RI","","",null,null],[17,"NF_NETDEV_INGRESS","","",null,null],[17,"NF_NETDEV_NUMHOOKS","","",null,null],[17,"NFPROTO_INET","","",null,null],[17,"NFPROTO_NETDEV","","",null,null],[17,"NFT_TABLE_MAXNAMELEN","","",null,null],[17,"NFT_CHAIN_MAXNAMELEN","","",null,null],[17,"NFT_SET_MAXNAMELEN","","",null,null],[17,"NFT_OBJ_MAXNAMELEN","","",null,null],[17,"NFT_USERDATA_MAXLEN","","",null,null],[17,"NFT_REG_VERDICT","","",null,null],[17,"NFT_REG_1","","",null,null],[17,"NFT_REG_2","","",null,null],[17,"NFT_REG_3","","",null,null],[17,"NFT_REG_4","","",null,null],[17,"__NFT_REG_MAX","","",null,null],[17,"NFT_REG32_00","","",null,null],[17,"NFT_REG32_01","","",null,null],[17,"NFT_REG32_02","","",null,null],[17,"NFT_REG32_03","","",null,null],[17,"NFT_REG32_04","","",null,null],[17,"NFT_REG32_05","","",null,null],[17,"NFT_REG32_06","","",null,null],[17,"NFT_REG32_07","","",null,null],[17,"NFT_REG32_08","","",null,null],[17,"NFT_REG32_09","","",null,null],[17,"NFT_REG32_10","","",null,null],[17,"NFT_REG32_11","","",null,null],[17,"NFT_REG32_12","","",null,null],[17,"NFT_REG32_13","","",null,null],[17,"NFT_REG32_14","","",null,null],[17,"NFT_REG32_15","","",null,null],[17,"NFT_REG_SIZE","","",null,null],[17,"NFT_REG32_SIZE","","",null,null],[17,"NFT_CONTINUE","","",null,null],[17,"NFT_BREAK","","",null,null],[17,"NFT_JUMP","","",null,null],[17,"NFT_GOTO","","",null,null],[17,"NFT_RETURN","","",null,null],[17,"NFT_MSG_NEWTABLE","","",null,null],[17,"NFT_MSG_GETTABLE","","",null,null],[17,"NFT_MSG_DELTABLE","","",null,null],[17,"NFT_MSG_NEWCHAIN","","",null,null],[17,"NFT_MSG_GETCHAIN","","",null,null],[17,"NFT_MSG_DELCHAIN","","",null,null],[17,"NFT_MSG_NEWRULE","","",null,null],[17,"NFT_MSG_GETRULE","","",null,null],[17,"NFT_MSG_DELRULE","","",null,null],[17,"NFT_MSG_NEWSET","","",null,null],[17,"NFT_MSG_GETSET","","",null,null],[17,"NFT_MSG_DELSET","","",null,null],[17,"NFT_MSG_NEWSETELEM","","",null,null],[17,"NFT_MSG_GETSETELEM","","",null,null],[17,"NFT_MSG_DELSETELEM","","",null,null],[17,"NFT_MSG_NEWGEN","","",null,null],[17,"NFT_MSG_GETGEN","","",null,null],[17,"NFT_MSG_TRACE","","",null,null],[17,"NFT_MSG_NEWOBJ","","",null,null],[17,"NFT_MSG_GETOBJ","","",null,null],[17,"NFT_MSG_DELOBJ","","",null,null],[17,"NFT_MSG_GETOBJ_RESET","","",null,null],[17,"NFT_MSG_MAX","","",null,null],[17,"NFT_SET_ANONYMOUS","","",null,null],[17,"NFT_SET_CONSTANT","","",null,null],[17,"NFT_SET_INTERVAL","","",null,null],[17,"NFT_SET_MAP","","",null,null],[17,"NFT_SET_TIMEOUT","","",null,null],[17,"NFT_SET_EVAL","","",null,null],[17,"NFT_SET_POL_PERFORMANCE","","",null,null],[17,"NFT_SET_POL_MEMORY","","",null,null],[17,"NFT_SET_ELEM_INTERVAL_END","","",null,null],[17,"NFT_DATA_VALUE","","",null,null],[17,"NFT_DATA_VERDICT","","",null,null],[17,"NFT_DATA_RESERVED_MASK","","",null,null],[17,"NFT_DATA_VALUE_MAXLEN","","",null,null],[17,"NFT_BYTEORDER_NTOH","","",null,null],[17,"NFT_BYTEORDER_HTON","","",null,null],[17,"NFT_CMP_EQ","","",null,null],[17,"NFT_CMP_NEQ","","",null,null],[17,"NFT_CMP_LT","","",null,null],[17,"NFT_CMP_LTE","","",null,null],[17,"NFT_CMP_GT","","",null,null],[17,"NFT_CMP_GTE","","",null,null],[17,"NFT_RANGE_EQ","","",null,null],[17,"NFT_RANGE_NEQ","","",null,null],[17,"NFT_LOOKUP_F_INV","","",null,null],[17,"NFT_DYNSET_OP_ADD","","",null,null],[17,"NFT_DYNSET_OP_UPDATE","","",null,null],[17,"NFT_DYNSET_F_INV","","",null,null],[17,"NFT_PAYLOAD_LL_HEADER","","",null,null],[17,"NFT_PAYLOAD_NETWORK_HEADER","","",null,null],[17,"NFT_PAYLOAD_TRANSPORT_HEADER","","",null,null],[17,"NFT_PAYLOAD_CSUM_NONE","","",null,null],[17,"NFT_PAYLOAD_CSUM_INET","","",null,null],[17,"NFT_META_LEN","","",null,null],[17,"NFT_META_PROTOCOL","","",null,null],[17,"NFT_META_PRIORITY","","",null,null],[17,"NFT_META_MARK","","",null,null],[17,"NFT_META_IIF","","",null,null],[17,"NFT_META_OIF","","",null,null],[17,"NFT_META_IIFNAME","","",null,null],[17,"NFT_META_OIFNAME","","",null,null],[17,"NFT_META_IIFTYPE","","",null,null],[17,"NFT_META_OIFTYPE","","",null,null],[17,"NFT_META_SKUID","","",null,null],[17,"NFT_META_SKGID","","",null,null],[17,"NFT_META_NFTRACE","","",null,null],[17,"NFT_META_RTCLASSID","","",null,null],[17,"NFT_META_SECMARK","","",null,null],[17,"NFT_META_NFPROTO","","",null,null],[17,"NFT_META_L4PROTO","","",null,null],[17,"NFT_META_BRI_IIFNAME","","",null,null],[17,"NFT_META_BRI_OIFNAME","","",null,null],[17,"NFT_META_PKTTYPE","","",null,null],[17,"NFT_META_CPU","","",null,null],[17,"NFT_META_IIFGROUP","","",null,null],[17,"NFT_META_OIFGROUP","","",null,null],[17,"NFT_META_CGROUP","","",null,null],[17,"NFT_META_PRANDOM","","",null,null],[17,"NFT_CT_STATE","","",null,null],[17,"NFT_CT_DIRECTION","","",null,null],[17,"NFT_CT_STATUS","","",null,null],[17,"NFT_CT_MARK","","",null,null],[17,"NFT_CT_SECMARK","","",null,null],[17,"NFT_CT_EXPIRATION","","",null,null],[17,"NFT_CT_HELPER","","",null,null],[17,"NFT_CT_L3PROTOCOL","","",null,null],[17,"NFT_CT_SRC","","",null,null],[17,"NFT_CT_DST","","",null,null],[17,"NFT_CT_PROTOCOL","","",null,null],[17,"NFT_CT_PROTO_SRC","","",null,null],[17,"NFT_CT_PROTO_DST","","",null,null],[17,"NFT_CT_LABELS","","",null,null],[17,"NFT_CT_PKTS","","",null,null],[17,"NFT_CT_BYTES","","",null,null],[17,"NFT_LIMIT_PKTS","","",null,null],[17,"NFT_LIMIT_PKT_BYTES","","",null,null],[17,"NFT_LIMIT_F_INV","","",null,null],[17,"NFT_QUEUE_FLAG_BYPASS","","",null,null],[17,"NFT_QUEUE_FLAG_CPU_FANOUT","","",null,null],[17,"NFT_QUEUE_FLAG_MASK","","",null,null],[17,"NFT_QUOTA_F_INV","","",null,null],[17,"NFT_REJECT_ICMP_UNREACH","","",null,null],[17,"NFT_REJECT_TCP_RST","","",null,null],[17,"NFT_REJECT_ICMPX_UNREACH","","",null,null],[17,"NFT_REJECT_ICMPX_NO_ROUTE","","",null,null],[17,"NFT_REJECT_ICMPX_PORT_UNREACH","","",null,null],[17,"NFT_REJECT_ICMPX_HOST_UNREACH","","",null,null],[17,"NFT_REJECT_ICMPX_ADMIN_PROHIBITED","","",null,null],[17,"NFT_NAT_SNAT","","",null,null],[17,"NFT_NAT_DNAT","","",null,null],[17,"NFT_TRACETYPE_UNSPEC","","",null,null],[17,"NFT_TRACETYPE_POLICY","","",null,null],[17,"NFT_TRACETYPE_RETURN","","",null,null],[17,"NFT_TRACETYPE_RULE","","",null,null],[17,"NFT_NG_INCREMENTAL","","",null,null],[17,"NFT_NG_RANDOM","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCKATTR_T","","",null,null],[17,"O_LARGEFILE","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_NOATIME","","",null,null],[17,"O_PATH","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_NO_CHECK","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_SECURITY_AUTHENTICATION","","",null,null],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",null,null],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_ATTACH_FILTER","","",null,null],[17,"SO_DETACH_FILTER","","",null,null],[17,"SO_GET_FILTER","","",null,null],[17,"SO_PEERNAME","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_PEERSEC","","",null,null],[17,"SO_PASSSEC","","",null,null],[17,"SO_TIMESTAMPNS","","",null,null],[17,"SCM_TIMESTAMPNS","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_TIMESTAMPING","","",null,null],[17,"SCM_TIMESTAMPING","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_WIFI_STATUS","","",null,null],[17,"SCM_WIFI_STATUS","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_NOFCS","","",null,null],[17,"SO_LOCK_FILTER","","",null,null],[17,"SO_SELECT_ERR_QUEUE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"SO_MAX_PACING_RATE","","",null,null],[17,"SO_BPF_EXTENSIONS","","",null,null],[17,"SO_INCOMING_CPU","","",null,null],[17,"SO_ATTACH_BPF","","",null,null],[17,"SO_DETACH_BPF","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCCONS","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"NCCS","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_PEEKSIGINFO_SHARED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"MINSIGSTKSZ","","",null,null],[17,"CBAUD","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF1","","",null,null],[17,"BS1","","",null,null],[17,"VT1","","",null,null],[17,"VWERASE","","",null,null],[17,"VREPRINT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CIBAUD","","",null,null],[17,"CBAUDEX","","",null,null],[17,"VSWTC","","",null,null],[17,"OLCUC","","",null,null],[17,"NLDLY","","",null,null],[17,"CRDLY","","",null,null],[17,"TABDLY","","",null,null],[17,"BSDLY","","",null,null],[17,"FFDLY","","",null,null],[17,"VTDLY","","",null,null],[17,"XTABS","","",null,null],[17,"B0","","",null,null],[17,"B50","","",null,null],[17,"B75","","",null,null],[17,"B110","","",null,null],[17,"B134","","",null,null],[17,"B150","","",null,null],[17,"B200","","",null,null],[17,"B300","","",null,null],[17,"B600","","",null,null],[17,"B1200","","",null,null],[17,"B1800","","",null,null],[17,"B2400","","",null,null],[17,"B4800","","",null,null],[17,"B9600","","",null,null],[17,"B19200","","",null,null],[17,"B38400","","",null,null],[17,"EXTA","","",null,null],[17,"EXTB","","",null,null],[17,"BOTHER","","",null,null],[17,"B57600","","",null,null],[17,"B115200","","",null,null],[17,"B230400","","",null,null],[17,"B460800","","",null,null],[17,"B500000","","",null,null],[17,"B576000","","",null,null],[17,"B921600","","",null,null],[17,"B1000000","","",null,null],[17,"B1152000","","",null,null],[17,"B1500000","","",null,null],[17,"B2000000","","",null,null],[17,"B2500000","","",null,null],[17,"B3000000","","",null,null],[17,"B3500000","","",null,null],[17,"B4000000","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"EXTPROC","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"FIONREAD","","",null,null],[17,"R15","","",null,null],[17,"R14","","",null,null],[17,"R13","","",null,null],[17,"R12","","",null,null],[17,"RBP","","",null,null],[17,"RBX","","",null,null],[17,"R11","","",null,null],[17,"R10","","",null,null],[17,"R9","","",null,null],[17,"R8","","",null,null],[17,"RAX","","",null,null],[17,"RCX","","",null,null],[17,"RDX","","",null,null],[17,"RSI","","",null,null],[17,"RDI","","",null,null],[17,"ORIG_RAX","","",null,null],[17,"RIP","","",null,null],[17,"CS","","",null,null],[17,"EFLAGS","","",null,null],[17,"RSP","","",null,null],[17,"SS","","",null,null],[17,"FS_BASE","","",null,null],[17,"GS_BASE","","",null,null],[17,"DS","","",null,null],[17,"ES","","",null,null],[17,"FS","","",null,null],[17,"GS","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"SYS_read","","",null,null],[17,"SYS_write","","",null,null],[17,"SYS_open","","",null,null],[17,"SYS_close","","",null,null],[17,"SYS_stat","","",null,null],[17,"SYS_fstat","","",null,null],[17,"SYS_lstat","","",null,null],[17,"SYS_poll","","",null,null],[17,"SYS_lseek","","",null,null],[17,"SYS_mmap","","",null,null],[17,"SYS_mprotect","","",null,null],[17,"SYS_munmap","","",null,null],[17,"SYS_brk","","",null,null],[17,"SYS_rt_sigaction","","",null,null],[17,"SYS_rt_sigprocmask","","",null,null],[17,"SYS_rt_sigreturn","","",null,null],[17,"SYS_ioctl","","",null,null],[17,"SYS_pread64","","",null,null],[17,"SYS_pwrite64","","",null,null],[17,"SYS_readv","","",null,null],[17,"SYS_writev","","",null,null],[17,"SYS_access","","",null,null],[17,"SYS_pipe","","",null,null],[17,"SYS_select","","",null,null],[17,"SYS_sched_yield","","",null,null],[17,"SYS_mremap","","",null,null],[17,"SYS_msync","","",null,null],[17,"SYS_mincore","","",null,null],[17,"SYS_madvise","","",null,null],[17,"SYS_shmget","","",null,null],[17,"SYS_shmat","","",null,null],[17,"SYS_shmctl","","",null,null],[17,"SYS_dup","","",null,null],[17,"SYS_dup2","","",null,null],[17,"SYS_pause","","",null,null],[17,"SYS_nanosleep","","",null,null],[17,"SYS_getitimer","","",null,null],[17,"SYS_alarm","","",null,null],[17,"SYS_setitimer","","",null,null],[17,"SYS_getpid","","",null,null],[17,"SYS_sendfile","","",null,null],[17,"SYS_socket","","",null,null],[17,"SYS_connect","","",null,null],[17,"SYS_accept","","",null,null],[17,"SYS_sendto","","",null,null],[17,"SYS_recvfrom","","",null,null],[17,"SYS_sendmsg","","",null,null],[17,"SYS_recvmsg","","",null,null],[17,"SYS_shutdown","","",null,null],[17,"SYS_bind","","",null,null],[17,"SYS_listen","","",null,null],[17,"SYS_getsockname","","",null,null],[17,"SYS_getpeername","","",null,null],[17,"SYS_socketpair","","",null,null],[17,"SYS_setsockopt","","",null,null],[17,"SYS_getsockopt","","",null,null],[17,"SYS_clone","","",null,null],[17,"SYS_fork","","",null,null],[17,"SYS_vfork","","",null,null],[17,"SYS_execve","","",null,null],[17,"SYS_exit","","",null,null],[17,"SYS_wait4","","",null,null],[17,"SYS_kill","","",null,null],[17,"SYS_uname","","",null,null],[17,"SYS_semget","","",null,null],[17,"SYS_semop","","",null,null],[17,"SYS_semctl","","",null,null],[17,"SYS_shmdt","","",null,null],[17,"SYS_msgget","","",null,null],[17,"SYS_msgsnd","","",null,null],[17,"SYS_msgrcv","","",null,null],[17,"SYS_msgctl","","",null,null],[17,"SYS_fcntl","","",null,null],[17,"SYS_flock","","",null,null],[17,"SYS_fsync","","",null,null],[17,"SYS_fdatasync","","",null,null],[17,"SYS_truncate","","",null,null],[17,"SYS_ftruncate","","",null,null],[17,"SYS_getdents","","",null,null],[17,"SYS_getcwd","","",null,null],[17,"SYS_chdir","","",null,null],[17,"SYS_fchdir","","",null,null],[17,"SYS_rename","","",null,null],[17,"SYS_mkdir","","",null,null],[17,"SYS_rmdir","","",null,null],[17,"SYS_creat","","",null,null],[17,"SYS_link","","",null,null],[17,"SYS_unlink","","",null,null],[17,"SYS_symlink","","",null,null],[17,"SYS_readlink","","",null,null],[17,"SYS_chmod","","",null,null],[17,"SYS_fchmod","","",null,null],[17,"SYS_chown","","",null,null],[17,"SYS_fchown","","",null,null],[17,"SYS_lchown","","",null,null],[17,"SYS_umask","","",null,null],[17,"SYS_gettimeofday","","",null,null],[17,"SYS_getrlimit","","",null,null],[17,"SYS_getrusage","","",null,null],[17,"SYS_sysinfo","","",null,null],[17,"SYS_times","","",null,null],[17,"SYS_ptrace","","",null,null],[17,"SYS_getuid","","",null,null],[17,"SYS_syslog","","",null,null],[17,"SYS_getgid","","",null,null],[17,"SYS_setuid","","",null,null],[17,"SYS_setgid","","",null,null],[17,"SYS_geteuid","","",null,null],[17,"SYS_getegid","","",null,null],[17,"SYS_setpgid","","",null,null],[17,"SYS_getppid","","",null,null],[17,"SYS_getpgrp","","",null,null],[17,"SYS_setsid","","",null,null],[17,"SYS_setreuid","","",null,null],[17,"SYS_setregid","","",null,null],[17,"SYS_getgroups","","",null,null],[17,"SYS_setgroups","","",null,null],[17,"SYS_setresuid","","",null,null],[17,"SYS_getresuid","","",null,null],[17,"SYS_setresgid","","",null,null],[17,"SYS_getresgid","","",null,null],[17,"SYS_getpgid","","",null,null],[17,"SYS_setfsuid","","",null,null],[17,"SYS_setfsgid","","",null,null],[17,"SYS_getsid","","",null,null],[17,"SYS_capget","","",null,null],[17,"SYS_capset","","",null,null],[17,"SYS_rt_sigpending","","",null,null],[17,"SYS_rt_sigtimedwait","","",null,null],[17,"SYS_rt_sigqueueinfo","","",null,null],[17,"SYS_rt_sigsuspend","","",null,null],[17,"SYS_sigaltstack","","",null,null],[17,"SYS_utime","","",null,null],[17,"SYS_mknod","","",null,null],[17,"SYS_uselib","","",null,null],[17,"SYS_personality","","",null,null],[17,"SYS_ustat","","",null,null],[17,"SYS_statfs","","",null,null],[17,"SYS_fstatfs","","",null,null],[17,"SYS_sysfs","","",null,null],[17,"SYS_getpriority","","",null,null],[17,"SYS_setpriority","","",null,null],[17,"SYS_sched_setparam","","",null,null],[17,"SYS_sched_getparam","","",null,null],[17,"SYS_sched_setscheduler","","",null,null],[17,"SYS_sched_getscheduler","","",null,null],[17,"SYS_sched_get_priority_max","","",null,null],[17,"SYS_sched_get_priority_min","","",null,null],[17,"SYS_sched_rr_get_interval","","",null,null],[17,"SYS_mlock","","",null,null],[17,"SYS_munlock","","",null,null],[17,"SYS_mlockall","","",null,null],[17,"SYS_munlockall","","",null,null],[17,"SYS_vhangup","","",null,null],[17,"SYS_modify_ldt","","",null,null],[17,"SYS_pivot_root","","",null,null],[17,"SYS__sysctl","","",null,null],[17,"SYS_prctl","","",null,null],[17,"SYS_arch_prctl","","",null,null],[17,"SYS_adjtimex","","",null,null],[17,"SYS_setrlimit","","",null,null],[17,"SYS_chroot","","",null,null],[17,"SYS_sync","","",null,null],[17,"SYS_acct","","",null,null],[17,"SYS_settimeofday","","",null,null],[17,"SYS_mount","","",null,null],[17,"SYS_umount2","","",null,null],[17,"SYS_swapon","","",null,null],[17,"SYS_swapoff","","",null,null],[17,"SYS_reboot","","",null,null],[17,"SYS_sethostname","","",null,null],[17,"SYS_setdomainname","","",null,null],[17,"SYS_iopl","","",null,null],[17,"SYS_ioperm","","",null,null],[17,"SYS_create_module","","",null,null],[17,"SYS_init_module","","",null,null],[17,"SYS_delete_module","","",null,null],[17,"SYS_get_kernel_syms","","",null,null],[17,"SYS_query_module","","",null,null],[17,"SYS_quotactl","","",null,null],[17,"SYS_nfsservctl","","",null,null],[17,"SYS_getpmsg","","",null,null],[17,"SYS_putpmsg","","",null,null],[17,"SYS_afs_syscall","","",null,null],[17,"SYS_tuxcall","","",null,null],[17,"SYS_security","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_readahead","","",null,null],[17,"SYS_setxattr","","",null,null],[17,"SYS_lsetxattr","","",null,null],[17,"SYS_fsetxattr","","",null,null],[17,"SYS_getxattr","","",null,null],[17,"SYS_lgetxattr","","",null,null],[17,"SYS_fgetxattr","","",null,null],[17,"SYS_listxattr","","",null,null],[17,"SYS_llistxattr","","",null,null],[17,"SYS_flistxattr","","",null,null],[17,"SYS_removexattr","","",null,null],[17,"SYS_lremovexattr","","",null,null],[17,"SYS_fremovexattr","","",null,null],[17,"SYS_tkill","","",null,null],[17,"SYS_time","","",null,null],[17,"SYS_futex","","",null,null],[17,"SYS_sched_setaffinity","","",null,null],[17,"SYS_sched_getaffinity","","",null,null],[17,"SYS_set_thread_area","","",null,null],[17,"SYS_io_setup","","",null,null],[17,"SYS_io_destroy","","",null,null],[17,"SYS_io_getevents","","",null,null],[17,"SYS_io_submit","","",null,null],[17,"SYS_io_cancel","","",null,null],[17,"SYS_get_thread_area","","",null,null],[17,"SYS_lookup_dcookie","","",null,null],[17,"SYS_epoll_create","","",null,null],[17,"SYS_epoll_ctl_old","","",null,null],[17,"SYS_epoll_wait_old","","",null,null],[17,"SYS_remap_file_pages","","",null,null],[17,"SYS_getdents64","","",null,null],[17,"SYS_set_tid_address","","",null,null],[17,"SYS_restart_syscall","","",null,null],[17,"SYS_semtimedop","","",null,null],[17,"SYS_fadvise64","","",null,null],[17,"SYS_timer_create","","",null,null],[17,"SYS_timer_settime","","",null,null],[17,"SYS_timer_gettime","","",null,null],[17,"SYS_timer_getoverrun","","",null,null],[17,"SYS_timer_delete","","",null,null],[17,"SYS_clock_settime","","",null,null],[17,"SYS_clock_gettime","","",null,null],[17,"SYS_clock_getres","","",null,null],[17,"SYS_clock_nanosleep","","",null,null],[17,"SYS_exit_group","","",null,null],[17,"SYS_epoll_wait","","",null,null],[17,"SYS_epoll_ctl","","",null,null],[17,"SYS_tgkill","","",null,null],[17,"SYS_utimes","","",null,null],[17,"SYS_vserver","","",null,null],[17,"SYS_mbind","","",null,null],[17,"SYS_set_mempolicy","","",null,null],[17,"SYS_get_mempolicy","","",null,null],[17,"SYS_mq_open","","",null,null],[17,"SYS_mq_unlink","","",null,null],[17,"SYS_mq_timedsend","","",null,null],[17,"SYS_mq_timedreceive","","",null,null],[17,"SYS_mq_notify","","",null,null],[17,"SYS_mq_getsetattr","","",null,null],[17,"SYS_kexec_load","","",null,null],[17,"SYS_waitid","","",null,null],[17,"SYS_add_key","","",null,null],[17,"SYS_request_key","","",null,null],[17,"SYS_keyctl","","",null,null],[17,"SYS_ioprio_set","","",null,null],[17,"SYS_ioprio_get","","",null,null],[17,"SYS_inotify_init","","",null,null],[17,"SYS_inotify_add_watch","","",null,null],[17,"SYS_inotify_rm_watch","","",null,null],[17,"SYS_migrate_pages","","",null,null],[17,"SYS_openat","","",null,null],[17,"SYS_mkdirat","","",null,null],[17,"SYS_mknodat","","",null,null],[17,"SYS_fchownat","","",null,null],[17,"SYS_futimesat","","",null,null],[17,"SYS_newfstatat","","",null,null],[17,"SYS_unlinkat","","",null,null],[17,"SYS_renameat","","",null,null],[17,"SYS_linkat","","",null,null],[17,"SYS_symlinkat","","",null,null],[17,"SYS_readlinkat","","",null,null],[17,"SYS_fchmodat","","",null,null],[17,"SYS_faccessat","","",null,null],[17,"SYS_pselect6","","",null,null],[17,"SYS_ppoll","","",null,null],[17,"SYS_unshare","","",null,null],[17,"SYS_set_robust_list","","",null,null],[17,"SYS_get_robust_list","","",null,null],[17,"SYS_splice","","",null,null],[17,"SYS_tee","","",null,null],[17,"SYS_sync_file_range","","",null,null],[17,"SYS_vmsplice","","",null,null],[17,"SYS_move_pages","","",null,null],[17,"SYS_utimensat","","",null,null],[17,"SYS_epoll_pwait","","",null,null],[17,"SYS_signalfd","","",null,null],[17,"SYS_timerfd_create","","",null,null],[17,"SYS_eventfd","","",null,null],[17,"SYS_fallocate","","",null,null],[17,"SYS_timerfd_settime","","",null,null],[17,"SYS_timerfd_gettime","","",null,null],[17,"SYS_accept4","","",null,null],[17,"SYS_signalfd4","","",null,null],[17,"SYS_eventfd2","","",null,null],[17,"SYS_epoll_create1","","",null,null],[17,"SYS_dup3","","",null,null],[17,"SYS_pipe2","","",null,null],[17,"SYS_inotify_init1","","",null,null],[17,"SYS_preadv","","",null,null],[17,"SYS_pwritev","","",null,null],[17,"SYS_rt_tgsigqueueinfo","","",null,null],[17,"SYS_perf_event_open","","",null,null],[17,"SYS_recvmmsg","","",null,null],[17,"SYS_fanotify_init","","",null,null],[17,"SYS_fanotify_mark","","",null,null],[17,"SYS_prlimit64","","",null,null],[17,"SYS_name_to_handle_at","","",null,null],[17,"SYS_open_by_handle_at","","",null,null],[17,"SYS_clock_adjtime","","",null,null],[17,"SYS_syncfs","","",null,null],[17,"SYS_sendmmsg","","",null,null],[17,"SYS_setns","","",null,null],[17,"SYS_getcpu","","",null,null],[17,"SYS_process_vm_readv","","",null,null],[17,"SYS_process_vm_writev","","",null,null],[17,"SYS_kcmp","","",null,null],[17,"SYS_finit_module","","",null,null],[17,"SYS_sched_setattr","","",null,null],[17,"SYS_sched_getattr","","",null,null],[17,"SYS_renameat2","","",null,null],[17,"SYS_seccomp","","",null,null],[17,"SYS_getrandom","","",null,null],[17,"SYS_memfd_create","","",null,null],[17,"SYS_kexec_file_load","","",null,null],[17,"SYS_bpf","","",null,null],[17,"SYS_execveat","","",null,null],[17,"SYS_userfaultfd","","",null,null],[17,"SYS_membarrier","","",null,null],[17,"SYS_mlock2","","",null,null],[17,"SYS_copy_file_range","","",null,null],[17,"SYS_preadv2","","",null,null],[17,"SYS_pwritev2","","",null,null],[17,"SYS_pkey_mprotect","","",null,null],[17,"SYS_pkey_alloc","","",null,null],[17,"SYS_pkey_free","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"sigevent"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"spwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"itimerspec"],[3,"mq_attr"],[3,"if_nameindex"],[3,"msginfo"],[3,"mmsghdr"],[3,"sembuf"],[3,"input_event"],[3,"input_id"],[3,"input_absinfo"],[3,"input_keymap_entry"],[3,"input_mask"],[3,"ff_replay"],[3,"ff_trigger"],[3,"ff_envelope"],[3,"ff_constant_effect"],[3,"ff_ramp_effect"],[3,"ff_condition_effect"],[3,"ff_periodic_effect"],[3,"ff_rumble_effect"],[3,"ff_effect"],[3,"dl_phdr_info"],[3,"Elf32_Phdr"],[3,"Elf64_Phdr"],[3,"ucred"],[3,"mntent"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"statfs"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"flock"],[3,"mallinfo"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"statfs64"],[3,"statvfs64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"user_fpregs_struct"],[3,"user_regs_struct"],[3,"user"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"termios2"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"nlmsghdr"],[3,"nlmsgerr"],[3,"nl_pktinfo"],[3,"nl_mmap_req"],[3,"nl_mmap_hdr"],[3,"nlattr"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_rwlockattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"posix_spawn_file_actions_t"],[3,"posix_spawnattr_t"],[3,"genlmsghdr"],[3,"fd_set"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The \"payload\" of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level filter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has already been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The \"error\" level.",0,null],[13,"Warn","","The \"warn\" level.",0,null],[13,"Info","","The \"info\" level.",0,null],[13,"Debug","","The \"debug\" level.",0,null],[13,"Trace","","The \"trace\" level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging framework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"generics":["setloggererror"],"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"generics":["setloggererror"],"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"generics":["box","shutdownloggererror"],"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"generics":["shutdownloggererror"],"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be logged.",2,{"inputs":[{"name":"self"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[10,"log","","Logs the `LogRecord`.",2,{"inputs":[{"name":"self"},{"name":"logrecord"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"ordering"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"generics":["loglevel"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":{"name":"ordering"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"generics":["loglevelfilter"],"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,{"inputs":[{"name":"self"}],"output":{"generics":["loglevel"],"name":"option"}}],[11,"args","","The message body.",3,{"inputs":[{"name":"self"}],"output":{"name":"arguments"}}],[11,"metadata","","Metadata about the log directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"logmetadata"}}],[11,"location","","The location of the log directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"loglocation"}}],[11,"level","","The verbosity level of the message.",3,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"level","","The verbosity level of the message.",4,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"loglocation"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"module_path","","The module path of the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"file","","The source file containing the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"line","","The line containing the message.",5,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Gets the current maximum log level filter.",6,{"inputs":[{"name":"self"}],"output":{"name":"loglevelfilter"}}],[11,"set","","Sets the maximum log level.",6,{"inputs":[{"name":"self"},{"name":"loglevelfilter"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[14,"log","","The standard logging macro.",null,null],[14,"error","","Logs a message at the error level.",null,null],[14,"warn","","Logs a message at the warn level.",null,null],[14,"info","","Logs a message at the info level.",null,null],[14,"debug","","Logs a message at the debug level.",null,null],[14,"trace","","Logs a message at the trace level.",null,null],[14,"log_enabled","","Determines if a message logged at the specified level in that module will be logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["lzw"] = {"doc":"LZW decoder and encoder","items":[[3,"Decoder","lzw","Decoder for a LZW compressed stream (this algorithm is used for GIF files).",null,null],[3,"DecoderEarlyChange","","Decoder for a LZW compressed stream using an “early change” algorithm (used in TIFF files).",null,null],[3,"Encoder","","LZW encoder using the algorithm of GIF files.",null,null],[3,"LsbReader","","Reads bits from a byte stream, LSB first.",null,null],[3,"LsbWriter","","Writes bits to a byte stream, LSB first.",null,null],[3,"MsbReader","","Reads bits from a byte stream, MSB first.",null,null],[3,"MsbWriter","","Writes bits to a byte stream, MSB first.",null,null],[4,"Bits","","Containes either the consumed bytes and reconstructed bits or only the consumed bytes if the supplied buffer was not bit enough",null,null],[13,"Some","","Consumed bytes, reconstructed bits",0,null],[13,"None","","Consumed bytes",0,null],[5,"encode","","Convenience function that reads and compresses all bytes from `R`.",null,{"inputs":[{"name":"r"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new LZW decoder. ",1,{"inputs":[{"name":"r"},{"name":"u8"}],"output":{"name":"decoder"}}],[11,"decode_bytes","","Tries to obtain and decode a code word from `bytes`.",1,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new LZW decoder. ",2,{"inputs":[{"name":"r"},{"name":"u8"}],"output":{"name":"decoderearlychange"}}],[11,"decode_bytes","","Tries to obtain and decode a code word from `bytes`.",2,null],[11,"new","","Creates a new LZW encoder.",3,{"inputs":[{"name":"w"},{"name":"u8"}],"output":{"generics":["encoder"],"name":"result"}}],[11,"encode_bytes","","Compresses `bytes` and writes the result into the writer.",3,null],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new bit reader",4,{"inputs":[],"output":{"name":"lsbreader"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new bit reader",5,{"inputs":[],"output":{"name":"msbreader"}}],[11,"read_bits","","",4,null],[11,"read_bits","","",5,null],[11,"new","","Creates a new bit reader",6,{"inputs":[{"name":"w"}],"output":{"name":"lsbwriter"}}],[11,"write","","",6,null],[11,"flush","","",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Creates a new bit reader",7,{"inputs":[{"name":"w"}],"output":{"name":"msbwriter"}}],[11,"write","","",7,null],[11,"flush","","",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_bits","","",6,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_bits","","",7,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u8"}],"output":{"name":"result"}}],[8,"BitReader","","A bit reader.",null,null],[10,"read_bits","","Returns the next `n` bits.",8,null],[8,"BitWriter","","A bit writer.",null,null],[10,"write_bits","","Writes the next `n` bits.",9,{"inputs":[{"name":"self"},{"name":"u16"},{"name":"u8"}],"output":{"name":"result"}}]],"paths":[[4,"Bits"],[3,"Decoder"],[3,"DecoderEarlyChange"],[3,"Encoder"],[3,"LsbReader"],[3,"MsbReader"],[3,"LsbWriter"],[3,"MsbWriter"],[8,"BitReader"],[8,"BitWriter"]]};
searchIndex["memoffset"] = {"doc":"A crate used for calculating offsets of struct members and their spans.","items":[[14,"offset_of","memoffset","Calculates the offset of the specified field from the start of the struct. This macro supports arbitrary amount of subscripts and recursive member-accesses.",null,null],[14,"span_of","","Produces a range instance representing the sub-slice containing the specified member.",null,null]],"paths":[]};
searchIndex["nodrop"] = {"doc":"The nodrop crate has the following cargo feature flags:","items":[[3,"NoDrop","nodrop","A type holding T that will not call its destructor on drop",null,null],[11,"new","","Create a new NoDrop.",0,{"inputs":[{"name":"t"}],"output":{"name":"nodrop"}}],[11,"into_inner","","Extract the inner value.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}]],"paths":[[3,"NoDrop"]]};
searchIndex["num_cpus"] = {"doc":"A crate with utilities to determine the number of CPUs available on the current system.","items":[[5,"get","num_cpus","Returns the number of available CPUs of the current system.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"get_physical","","Returns the number of physical cores of the current system.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["num_integer"] = {"doc":"Integer trait and functions.","items":[[3,"IterBinomial","num_integer","An iterator over binomial coefficients.",null,null],[5,"div_rem","","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The result is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"binomial","","Calculate the binomial coefficient.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"multinomial","","Calculate the multinomial coefficient.",null,null],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",0,null],[11,"new","","For a given n, iterate over all binomial coefficients binomial(n, k), for k=0...n.",1,{"inputs":[{"name":"t"}],"output":{"name":"iterbinomial"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[8,"Integer"],[3,"IterBinomial"]]};
searchIndex["num_iter"] = {"doc":"External iterators for generic mathematics","items":[[3,"Range","num_iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"rangestep"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["num_rational"] = {"doc":"Rational numbers","items":[[3,"Ratio","num_rational","Represents the ratio between 2 numbers.",null,null],[3,"ParseRatioError","","",null,null],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":null}],[11,"div_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":null}],[11,"mul_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":null}],[11,"rem_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":null}],[11,"sub_assign","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Ratio`. Fails if `denom` is zero.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"from_integer","","Creates a `Ratio` representing the integer `t`.",0,{"inputs":[{"name":"t"}],"output":{"name":"ratio"}}],[11,"new_raw","","Creates a `Ratio` without checking for `denom == 0` or reducing.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"to_integer","","Converts to an integer, rounding towards zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"numer","","Gets an immutable reference to the numerator.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"denom","","Gets an immutable reference to the denominator.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"reduced","","Returns a reduced copy of self.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"recip","","Returns the reciprocal.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"floor","","Rounds towards minus infinity.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"ceil","","Rounds towards plus infinity.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"trunc","","Rounds towards zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"fract","","Returns the fractional part of a number, with division rounded towards zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"pow","","Raises the `Ratio` to the power of an exponent.",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"ratio"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"ratio"}}],[11,"from","","",0,null],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"checked_mul","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"generics":["ratio"],"name":"option"}}],[11,"checked_div","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"generics":["ratio"],"name":"option"}}],[11,"checked_add","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"generics":["ratio"],"name":"option"}}],[11,"checked_sub","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"generics":["ratio"],"name":"option"}}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"is_zero","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",0,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"generics":["ratio","parseratioerror"],"name":"result"}}],[11,"abs","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"abs_sub","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"signum","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"is_positive","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Parses `numer/denom` or just `numer`.",0,{"inputs":[{"name":"str"}],"output":{"generics":["ratio","parseratioerror"],"name":"result"}}],[11,"into","","",0,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"parseratioerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"approximate_float","","",0,{"inputs":[{"name":"f"}],"output":{"generics":["ratio"],"name":"option"}}]],"paths":[[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[8,"Bounded","num_traits","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",0,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",0,{"inputs":[],"output":{"name":"self"}}],[8,"Float","","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the `NaN` value.",1,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",1,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",1,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",1,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",1,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",1,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",1,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",1,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",1,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",1,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",1,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",1,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"PI","","Return Archimedes’ constant.",2,{"inputs":[],"output":{"name":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",2,{"inputs":[],"output":{"name":"self"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,{"inputs":[],"output":{"name":"self"}}],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[5,"zero","","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",null,null],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",null,null],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[8,"WrappingAdd","","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",15,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",16,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",19,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Num","","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",null,null],[16,"FromStrRadixErr","","",21,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",21,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for `Num` types which also implement numeric operations taking the second operand by reference.",null,null],[8,"RefNum","","The trait for references which implement numeric operations, taking the second operand either by value or by reference.",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment operators (like `+=`).",null,null],[8,"NumAssign","","The trait for `Num` types which also implement assignment operators.",null,null],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement assignment operations taking the second operand by reference.",null,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",22,null],[13,"Invalid","","",22,null],[3,"ParseFloatError","","",null,null],[12,"kind","","",23,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"identities","","",null,null],[8,"Zero","num_traits::identities","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,{"inputs":[],"output":{"name":"self"}}],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[5,"zero","","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[0,"sign","num_traits","",null,null],[8,"Signed","num_traits::sign","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",15,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",null,null],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",null,null],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[0,"wrapping","num_traits::ops","",null,null],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",0,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",0,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","Generic trait for floating point numbers",null,null],[10,"nan","","Returns the `NaN` value.",1,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",1,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",1,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",1,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",1,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",1,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",1,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",1,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",1,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",1,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",1,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",1,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",1,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"PI","","Return Archimedes’ constant.",2,{"inputs":[],"output":{"name":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",2,{"inputs":[],"output":{"name":"self"}}],[0,"real","num_traits","",null,null],[8,"Real","num_traits::real","A trait for real number types that do not necessarily have floating-point-specific characteristics such as NaN and infinity.",null,null],[10,"min_value","","Returns the smallest finite value that this type can represent.",24,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",24,{"inputs":[],"output":{"name":"self"}}],[10,"epsilon","","Returns epsilon, a small positive value.",24,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",24,{"inputs":[],"output":{"name":"self"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",24,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",24,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a real number power.",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_degrees","","Converts radians to degrees.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_radians","","Converts degrees to radians.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",24,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",24,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"cast","num_traits","",null,null],[8,"AsPrimitive","num_traits::cast","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",16,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",18,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",19,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",20,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[11,"fmt","num_traits","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}]],"paths":[[8,"Bounded"],[8,"Float"],[8,"FloatConst"],[8,"Zero"],[8,"One"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingSub"],[8,"Saturating"],[8,"Signed"],[8,"AsPrimitive"],[8,"FromPrimitive"],[8,"ToPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[8,"Real"]]};
searchIndex["ordered_float"] = {"doc":"Wrappers for total order on Floats.","items":[[3,"OrderedFloat","ordered_float","A wrapper around Floats providing an implementation of Ord and Hash.",null,null],[12,"0","","",0,null],[3,"NotNaN","","A wrapper around Floats providing an implementation of Ord and Hash.",null,null],[3,"FloatIsNaN","","An error indicating an attempt to construct NotNaN from a NaN",null,null],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"orderedfloat"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"orderedfloat"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"orderedfloat"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"orderedfloat"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"orderedfloat"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"orderedfloat"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"orderedfloat"}}],[11,"into_inner","","Get the value out.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"orderedfloat"}],"output":{"name":"ordering"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"orderedfloat"}],"output":{"name":"bool"}}],[11,"hash","","",0,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"into","","",0,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"notnan"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"notnan"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"notnan"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"notnan"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"notnan"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"notnan"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"notnan"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"notnan"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"notnan"}}],[11,"new","","Create a NotNaN value.",1,{"inputs":[{"name":"t"}],"output":{"generics":["floatisnan"],"name":"result"}}],[11,"unchecked_new","","Create a NotNaN value from a value that is guaranteed to not be NaN",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"into_inner","","Get the value out.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_ref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"notnan"}],"output":{"name":"ordering"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",1,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"into","","",1,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"from","","",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"deref","","",1,null],[11,"add","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"add","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"add_assign","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"add_assign","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"add_assign","","",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"add_assign","","",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"sub_assign","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"sub_assign","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"sub_assign","","",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"sub_assign","","",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"mul","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"mul","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"mul_assign","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"mul_assign","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"mul_assign","","",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"mul_assign","","",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"div","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"div","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"div_assign","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"div_assign","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"div_assign","","",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"div_assign","","",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"rem","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"rem","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"rem_assign","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"rem_assign","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"rem_assign","","",1,{"inputs":[{"name":"self"},{"name":"f64"}],"output":null}],[11,"rem_assign","","",1,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"neg","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"floatisnan"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"floatisnan"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",2,{"inputs":[{"name":"self"}],"output":{"name":"error"}}]],"paths":[[3,"OrderedFloat"],[3,"NotNaN"],[3,"FloatIsNaN"]]};
searchIndex["plane_split"] = {"doc":"Plane splitting.","items":[[3,"BspSplitter","plane_split","Binary Space Partitioning splitter, uses a BSP tree.",null,null],[3,"NaiveSplitter","","Naive plane splitter, has at least O(n^2) complexity.",null,null],[3,"Line","","A generic line.",null,null],[12,"origin","","Arbitrary point on the line.",0,null],[12,"dir","","Normalized direction of the line.",0,null],[3,"Polygon","","A convex flat polygon with 4 points, defined by equation: dot(v, normal) + offset = 0",null,null],[12,"points","","Points making the polygon.",1,null],[12,"normal","","Normalized vector perpendicular to the polygon plane.",1,null],[12,"offset","","Constant offset from the normal plane, specified in the direction opposite to the normal.",1,null],[12,"anchor","","A simple anchoring index to allow association of the produced split polygons with the original one.",1,null],[3,"LineProjection","","The projection of a `Polygon` on a line.",null,null],[12,"markers","","Projected value of each point in the polygon.",2,null],[4,"Intersection","","Polygon intersection results.",null,null],[13,"Coplanar","","Polygons are coplanar, including the case of being on the same plane.",3,null],[13,"Outside","","Polygon planes are intersecting, but polygons are not.",3,null],[13,"Inside","","Polygons are actually intersecting.",3,null],[5,"_make_grid","","Helper method used for benchmarks and tests. Constructs a 3D grid of polygons.",null,{"inputs":[{"name":"usize"}],"output":{"generics":["polygon"],"name":"vec"}}],[11,"cut","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"planecut"}}],[11,"is_aligned","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Create a new BSP splitter.",4,{"inputs":[],"output":{"name":"self"}}],[11,"reset","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"add","","",4,{"inputs":[{"name":"self"},{"name":"polygon"}],"output":null}],[11,"sort","","",4,null],[11,"new","","Create a new `NaiveSplitter`.",5,{"inputs":[],"output":{"name":"self"}}],[11,"reset","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"add","","",5,{"inputs":[{"name":"self"},{"name":"polygon"}],"output":null}],[11,"sort","","",5,null],[8,"Splitter","","Generic plane splitter interface",null,null],[10,"reset","","Reset the splitter results.",6,{"inputs":[{"name":"self"}],"output":null}],[10,"add","","Add a new polygon and return a slice of the subdivisions that avoid collision with any of the previously added polygons.",6,{"inputs":[{"name":"self"},{"name":"polygon"}],"output":null}],[10,"sort","","Sort the produced polygon set by the ascending distance across the specified view vector. Return the sorted slice.",6,null],[11,"solve","","Process a set of polygons at once.",6,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_valid","","Check if the line has consistent parameters.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"matches","","Check if two lines match each other.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"polygon"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"polygon"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"get_bounds","","Get the min/max of the line projection markers.",2,null],[11,"intersect","","Check intersection with another line projection.",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"is_outside","","Return true if the intersection is completely outside.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_inside","","Return true if the intersection cuts the source polygon.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_transformed_rect","","Construct a polygon from a transformed rectangle.",1,{"inputs":[{"name":"typedrect"},{"name":"typedtransform3d"},{"name":"usize"}],"output":{"name":"polygon"}}],[11,"untransform_point","","Bring a point into the local coordinate space, returning the 2D normalized coordinates.",1,{"inputs":[{"name":"self"},{"name":"typedpoint3d"}],"output":{"name":"point2d"}}],[11,"signed_distance_to","","Return the signed distance from this polygon to a point. The distance is negative if the point is on the other side of the polygon from the direction of the normal.",1,{"inputs":[{"name":"self"},{"name":"typedpoint3d"}],"output":{"name":"t"}}],[11,"distance_to_line","","Compute the distance across the line to the polygon plane, starting from the line origin.",1,{"inputs":[{"name":"self"},{"name":"line"}],"output":{"name":"t"}}],[11,"signed_distance_sum_to","","Compute the sum of signed distances to each of the points of another polygon. Useful to know the relation of a polygon that is a product of a split, and we know it doesn't intersect `self`.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"t"}}],[11,"is_valid","","Check if all the points are indeed placed on the plane defined by the normal and offset, and the winding order is consistent.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"are_outside","","Check if a convex shape defined by a set of points is completely outside of this polygon. Merely touching the surface is not considered an intersection.",1,null],[11,"contains","","Check if this polygon contains another one.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"project_on","","Project this polygon onto a 3D vector, returning a line projection. Note: we can think of it as a projection to a ray placed at the origin.",1,{"inputs":[{"name":"self"},{"name":"typedvector3d"}],"output":{"name":"lineprojection"}}],[11,"intersect","","Compute the line of intersection with another polygon.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["line"],"name":"intersection"}}],[11,"split","","Split the polygon along the specified `Line`. Will do nothing if the line doesn't belong to the polygon plane.",1,null]],"paths":[[3,"Line"],[3,"Polygon"],[3,"LineProjection"],[4,"Intersection"],[3,"BspSplitter"],[3,"NaiveSplitter"],[8,"Splitter"]]};
searchIndex["png"] = {"doc":"PNG encoder and decoder This crate contains a PNG encoder and decoder. It supports reading of single lines or whole frames. ## The decoder The most important types for decoding purposes are `Decoder` and `Reader`. They both wrap a `std::io::Read`. `Decoder` serves as a builder for `Reader`. Calling `Decoder::read_info` reads from the `Read` until the image data is reached. ### Using the decoder     use std::fs::File;","items":[[3,"PixelDimensions","png","Pixel dimensions information",null,null],[12,"xppu","","Pixels per unit, X axis",0,null],[12,"yppu","","Pixels per unit, Y axis",0,null],[12,"unit","","Either Meter or Unspecified",0,null],[3,"FrameControl","","Frame control information",null,null],[12,"sequence_number","","Sequence number of the animation chunk, starting from 0",1,null],[12,"width","","Width of the following frame",1,null],[12,"height","","Height of the following frame",1,null],[12,"x_offset","","X position at which to render the following frame",1,null],[12,"y_offset","","Y position at which to render the following frame",1,null],[12,"delay_num","","Frame delay fraction numerator",1,null],[12,"delay_den","","Frame delay fraction denominator",1,null],[12,"dispose_op","","Type of frame area disposal to be done after rendering this frame",1,null],[12,"blend_op","","Type of frame area rendering for this frame",1,null],[3,"AnimationControl","","Animation control information",null,null],[12,"num_frames","","Number of frames",2,null],[12,"num_plays","","Number of times to loop this APNG.  0 indicates infinite looping.",2,null],[3,"Info","","PNG info struct",null,null],[12,"width","","",3,null],[12,"height","","",3,null],[12,"bit_depth","","",3,null],[12,"color_type","","",3,null],[12,"interlaced","","",3,null],[12,"trns","","",3,null],[12,"pixel_dims","","",3,null],[12,"palette","","",3,null],[12,"frame_control","","",3,null],[12,"animation_control","","",3,null],[3,"Transformations","","Output transformations",null,null],[3,"Decoder","","PNG Decoder",null,null],[3,"Reader","","PNG reader (mostly high-level interface)",null,null],[3,"OutputInfo","","Output info",null,null],[12,"width","","",4,null],[12,"height","","",4,null],[12,"color_type","","",4,null],[12,"bit_depth","","",4,null],[12,"line_size","","",4,null],[3,"StreamingDecoder","","PNG StreamingDecoder (low-level interface)",null,null],[3,"Encoder","","PNG Encoder",null,null],[3,"Writer","","PNG writer",null,null],[4,"ColorType","","",null,null],[13,"Grayscale","","",5,null],[13,"RGB","","",5,null],[13,"Indexed","","",5,null],[13,"GrayscaleAlpha","","",5,null],[13,"RGBA","","",5,null],[4,"BitDepth","","Bit depth of the png file",null,null],[13,"One","","",6,null],[13,"Two","","",6,null],[13,"Four","","",6,null],[13,"Eight","","",6,null],[13,"Sixteen","","",6,null],[4,"Unit","","Physical unit of the pixel dimensions",null,null],[13,"Unspecified","","",7,null],[13,"Meter","","",7,null],[4,"Decoded","","Result of the decoding process",null,null],[13,"Nothing","","Nothing decoded yet",8,null],[13,"Header","","",8,null],[13,"ChunkBegin","","",8,null],[13,"ChunkComplete","","",8,null],[13,"PixelDimensions","","",8,null],[13,"AnimationControl","","",8,null],[13,"FrameControl","","",8,null],[13,"ImageData","","Decoded raw image data.",8,null],[13,"PartialChunk","","",8,null],[13,"ImageEnd","","",8,null],[4,"DecodingError","","",null,null],[13,"IoError","","",9,null],[13,"Format","","",9,null],[13,"InvalidSignature","","",9,null],[13,"CrcMismatch","","",9,null],[12,"recover","png::DecodingError","bytes to skip to try to recover from this error",9,null],[12,"crc_val","","Stored CRC32 value",9,null],[12,"crc_sum","","Calculated CRC32 sum",9,null],[12,"chunk","","",9,null],[13,"Other","png","",9,null],[13,"CorruptFlateStream","","",9,null],[4,"EncodingError","","",null,null],[13,"IoError","","",10,null],[13,"Format","","",10,null],[0,"chunk","","Chunk types and functions",null,null],[5,"is_critical","png::chunk","Returns true if the chunk is critical.",null,{"inputs":[{"name":"chunktype"}],"output":{"name":"bool"}}],[5,"is_private","","Returns true if the chunk is private.",null,{"inputs":[{"name":"chunktype"}],"output":{"name":"bool"}}],[5,"reserved_set","","Checks whether the reserved bit of the chunk name is set. If it is set the chunk name is invalid.",null,{"inputs":[{"name":"chunktype"}],"output":{"name":"bool"}}],[5,"safe_to_copy","","Returns true if the chunk is safe to copy if unknown.",null,{"inputs":[{"name":"chunktype"}],"output":{"name":"bool"}}],[6,"ChunkType","","",null,null],[17,"IHDR","","Image header",null,null],[17,"PLTE","","Palette",null,null],[17,"IDAT","","Image data",null,null],[17,"IEND","","Image trailer",null,null],[17,"tRNS","","Transparency",null,null],[17,"bKGD","","Background colour",null,null],[17,"tIME","","Image last-modification time",null,null],[17,"pHYs","","Physical pixel dimensions",null,null],[17,"acTL","","Animation control",null,null],[17,"fcTL","","Frame control",null,null],[17,"fdAT","","Frame data",null,null],[11,"fmt","png","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",9,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",9,{"inputs":[{"name":"error"}],"output":{"name":"decodingerror"}}],[11,"from","","",9,{"inputs":[{"name":"string"}],"output":{"name":"decodingerror"}}],[11,"new","","Creates a new StreamingDecoder",11,{"inputs":[],"output":{"name":"streamingdecoder"}}],[11,"reset","","Resets the StreamingDecoder",11,{"inputs":[{"name":"self"}],"output":null}],[11,"update","","Low level StreamingDecoder interface.",11,null],[11,"set_param","","",12,{"inputs":[{"name":"self"},{"name":"decoder"}],"output":null}],[11,"buffer_size","","Returns the size needed to hold a decoded frame",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","",13,{"inputs":[{"name":"r"}],"output":{"name":"decoder"}}],[11,"read_info","","Reads all meta data until the first IDAT chunk",13,{"inputs":[{"name":"self"}],"output":{"generics":["decodingerror"],"name":"result"}}],[11,"info","","",14,{"inputs":[{"name":"self"}],"output":{"name":"info"}}],[11,"next_frame","","Decodes the next frame into `buf`",14,null],[11,"next_row","","Returns the next processed row of the image",14,{"inputs":[{"name":"self"}],"output":{"generics":["option","decodingerror"],"name":"result"}}],[11,"next_interlaced_row","","Returns the next processed row of the image",14,{"inputs":[{"name":"self"}],"output":{"generics":["option","decodingerror"],"name":"result"}}],[11,"output_color_type","","Returns the color type and the number of bits per sample of the data returned by `Reader::next_row` and Reader::frames`.",14,null],[11,"output_buffer_size","","Returns the number of bytes required to hold a deinterlaced image frame that is decoded using the given input transformations.",14,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"output_line_size","","Returns the number of bytes required to hold a deinterlaced row.",14,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"usize"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",10,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",10,{"inputs":[{"name":"error"}],"output":{"name":"encodingerror"}}],[11,"new","","",15,{"inputs":[{"name":"w"},{"name":"u32"},{"name":"u32"}],"output":{"name":"encoder"}}],[11,"write_header","","",15,{"inputs":[{"name":"self"}],"output":{"generics":["writer","encodingerror"],"name":"result"}}],[11,"set_param","","",5,{"inputs":[{"name":"self"},{"name":"encoder"}],"output":null}],[11,"set_param","","",6,{"inputs":[{"name":"self"},{"name":"encoder"}],"output":null}],[11,"write_chunk","","",16,null],[11,"write_image_data","","Writes the image data.",16,null],[11,"drop","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"colortype"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"colortype"}],"output":{"name":"bool"}}],[11,"samples","","Returns the number of samples used per pixel of `ColorType`",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_u8","","u8 -> Self. Temporary solution until Rust provides a canonical one.",5,{"inputs":[{"name":"u8"}],"output":{"generics":["colortype"],"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bitdepth"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"bitdepth"}],"output":{"name":"bool"}}],[11,"from_u8","","u8 -> Self. Temporary solution until Rust provides a canonical one.",6,{"inputs":[{"name":"u8"}],"output":{"generics":["bitdepth"],"name":"option"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"pixeldimensions"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"unit"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"unit"}],"output":{"name":"bool"}}],[11,"from_u8","","u8 -> Self. Temporary solution until Rust provides a canonical one.",7,{"inputs":[{"name":"u8"}],"output":{"generics":["unit"],"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"animationcontrol"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"info"}}],[11,"size","","Size of the image",3,null],[11,"is_animated","","Returns true if the image is an APNG image.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"animation_control","","Returns the frame control information of the image",3,{"inputs":[{"name":"self"}],"output":{"generics":["animationcontrol"],"name":"option"}}],[11,"frame_control","","Returns the frame control information of the current frame",3,{"inputs":[{"name":"self"}],"output":{"generics":["framecontrol"],"name":"option"}}],[11,"bits_per_pixel","","Returns the bits per pixel",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bytes_per_pixel","","Returns the bytes per pixel",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"raw_bytes","","Returns the number of bytes needed for one deinterlaced image",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"raw_row_length","","Returns the number of bytes needed for one deinterlaced row ",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"raw_row_length_from_width","","Returns the number of bytes needed for one deinterlaced row of width `width`",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"usize"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"transformations"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"le","","",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"gt","","",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"ge","","",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"cmp","","",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"ordering"}}],[11,"hash","","",12,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"IDENTITY","","No transformation",12,null],[18,"STRIP_16","","Strip 16-bit samples to 8 bits",12,null],[18,"STRIP_ALPHA","","Discard the alpha channel",12,null],[18,"PACKING","","Expand 1; 2 and 4-bit samples to bytes",12,null],[18,"PACKSWAP","","Change order of packed pixels to LSB first",12,null],[18,"EXPAND","","Expand paletted images to RGB; expand grayscale images of less than 8-bit depth to 8-bit depth; and expand tRNS chunks to alpha channels.",12,null],[18,"INVERT_MONO","","Invert monochrome images",12,null],[18,"SHIFT","","Normalize pixels to the sBIT depth",12,null],[18,"BGR","","Flip RGB to BGR; RGBA to BGRA",12,null],[18,"SWAP_ALPHA","","Flip RGBA to ARGB or GA to AG",12,null],[18,"SWAP_ENDIAN","","Byte-swap 16-bit samples",12,null],[18,"INVERT_ALPHA","","Change alpha from opacity to transparency",12,null],[18,"STRIP_FILLER","","",12,null],[18,"STRIP_FILLER_BEFORE","","",12,null],[18,"STRIP_FILLER_AFTER","","",12,null],[18,"GRAY_TO_RGB","","",12,null],[18,"EXPAND_16","","",12,null],[18,"SCALE_16","","",12,null],[11,"empty","","Returns an empty set of flags.",12,{"inputs":[],"output":{"name":"transformations"}}],[11,"all","","Returns the set containing all flags.",12,{"inputs":[],"output":{"name":"transformations"}}],[11,"bits","","Returns the raw value of the flags currently stored.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",12,{"inputs":[{"name":"u32"}],"output":{"generics":["transformations"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",12,{"inputs":[{"name":"u32"}],"output":{"name":"transformations"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",12,{"inputs":[{"name":"self"},{"name":"transformations"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"transformations"}}],[11,"bitor_assign","","Adds the set of flags.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"transformations"}}],[11,"bitxor_assign","","Toggles the set of flags.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"transformations"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":{"name":"transformations"}}],[11,"sub_assign","","Disables all flags enabled in the set.",12,{"inputs":[{"name":"self"},{"name":"transformations"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",12,{"inputs":[{"name":"self"}],"output":{"name":"transformations"}}],[11,"extend","","",12,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",12,{"inputs":[{"name":"t"}],"output":{"name":"transformations"}}],[8,"Parameter","","Configuration parameter trait",null,null],[10,"set_param","","",17,{"inputs":[{"name":"self"},{"name":"object"}],"output":null}],[8,"HasParameters","","Object has parameters",null,null],[11,"set","","",18,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"set","","",18,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}]],"paths":[[3,"PixelDimensions"],[3,"FrameControl"],[3,"AnimationControl"],[3,"Info"],[3,"OutputInfo"],[4,"ColorType"],[4,"BitDepth"],[4,"Unit"],[4,"Decoded"],[4,"DecodingError"],[4,"EncodingError"],[3,"StreamingDecoder"],[3,"Transformations"],[3,"Decoder"],[3,"Reader"],[3,"Encoder"],[3,"Writer"],[8,"Parameter"],[8,"HasParameters"]]};
searchIndex["quote"] = {"doc":"Quasi-quoting without a Syntex dependency, intended for use with Macros 1.1.","items":[[3,"Tokens","quote","Tokens produced by a `quote!(...)` invocation.",null,null],[3,"ByteStr","","Wrap a `&str` so it interpolates as a byte-string: `b\"abc\"`.",null,null],[12,"0","","",0,null],[3,"Hex","","Wrap an integer so it interpolates as a hexadecimal.",null,null],[12,"0","","",1,null],[3,"Ident","","An identifier that should be interpolated without quotes.",null,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":{"name":"bool"}}],[11,"new","","Empty tokens.",2,{"inputs":[],"output":{"name":"self"}}],[11,"append","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"append_all","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"append_separated","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"},{"name":"s"}],"output":null}],[11,"append_terminated","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"},{"name":"s"}],"output":null}],[11,"as_str","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_string","","",2,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"parse","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"as_ref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"hash","","",3,null],[11,"new","","",3,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[8,"ToTokens","","Types that can be interpolated inside a `quote!(...)` invocation.",null,null],[10,"to_tokens","","Write `self` to the given `Tokens`.",4,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[14,"quote","","The whole point.",null,null]],"paths":[[3,"ByteStr"],[3,"Hex"],[3,"Tokens"],[3,"Ident"],[8,"ToTokens"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"IsaacRng","rand","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",null,null],[3,"ChaChaRng","","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[3,"XorShiftRng","","An Xorshift[1] random number generator.",null,null],[3,"Generator","","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the open interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",0,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the closed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",1,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current platform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","DEPRECATED: use `seq::sample_iter` instead.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the `Sample` & `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",2,null],[12,"item","","The actual item which is being weighted",2,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample uniformly between two values. This should not be used directly, and is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range` requires. This should not ever be called directly, only via `Range::new`, which will check that `low < high`, so this function doesn't have to repeat the check.",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as a source of randomness.",3,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Range` instance that samples uniformly from `[low, high)`. Panics if `low >= high`.",4,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",null,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"gamma"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)` distribution.",5,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"chisquared"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",6,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"fisherf"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",7,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"studentt"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",8,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers (a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",9,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"standardnormal"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rand","","",9,{"inputs":[{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"normal"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and standard deviation.",10,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"lognormal"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",11,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",12,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"exp1"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rand","","",12,{"inputs":[{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"exp"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",13,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",14,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",15,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",16,{"inputs":[],"output":{"name":"randsample"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"weighted"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `WeightedChoice`.",17,null],[11,"sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[0,"jitter","rand","Non-physical true random number generator based on timing jitter.",null,null],[3,"JitterRng","rand::jitter","A true random number generator based on jitter in the CPU execution time, and jitter in memory access time.",null,null],[4,"TimerError","","An error that can occur when `test_timer` fails.",null,null],[13,"NoTimer","","No timer available.",18,null],[13,"CoarseTimer","","Timer too coarse to use as an entropy source.",18,null],[13,"NotMonotonic","","Timer is not monotonically increasing.",18,null],[13,"TinyVariantions","","Variations of deltas of time too small.",18,null],[13,"TooManyStuck","","Too many stuck results (indicating no added entropy).",18,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"timererror"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"timererror"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",18,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","","Create a new `JitterRng`. Makes use of `std::time` for a timer.",19,{"inputs":[],"output":{"generics":["jitterrng","timererror"],"name":"result"}}],[11,"new_with_timer","","Create a new `JitterRng`. A custom timer can be supplied, making it possible to use `JitterRng` in `no_std` environments.",19,null],[11,"set_rounds","","Configures how many rounds are used to generate each 64-bit value. This must be greater than zero, and has a big impact on performance and output quality.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"test_timer","","Basic quality tests on the timer, by measuring CPU timing jitter a few hundred times.",19,{"inputs":[{"name":"self"}],"output":{"generics":["u32","timererror"],"name":"result"}}],[11,"timer_stats","","Statistical test: return the timer delta of one normal run of the `JitterEntropy` entropy collector.",19,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"i64"}}],[11,"next_u32","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",19,null],[0,"os","rand","Interfaces to the operating system provided random number generators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from the operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",20,{"inputs":[],"output":{"generics":["osrng"],"name":"result"}}],[11,"next_u32","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",20,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will work best with an infinite reader, but this is not required.",null,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `ReadRng` from a `Read`.",21,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",21,null],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it generates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it has generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",22,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by replacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",23,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",22,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been generated exceed the threshold.",22,{"inputs":[{"name":"self"}],"output":null}],[11,"next_u32","","",22,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",22,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",22,null],[11,"reseed","","",22,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and seed. This uses a default value for `generation_threshold`.",22,null],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"reseedwithdefault"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reseed","","",24,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"default","","",24,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[0,"seq","rand","Functions for randomly accessing and sampling sequences.",null,null],[5,"sample_iter","rand::seq","Randomly sample `amount` elements from a finite iterator.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"generics":["vec","vec"],"name":"result"}}],[5,"sample_slice","","Randomly sample exactly `amount` values from `slice`.",null,null],[5,"sample_slice_ref","","Randomly sample exactly `amount` references from `slice`.",null,null],[5,"sample_indices","","Randomly sample exactly `amount` indices from `0..length`.",null,{"inputs":[{"name":"r"},{"name":"usize"},{"name":"usize"}],"output":{"generics":["usize"],"name":"vec"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",null,null],[11,"rand","rand","",0,{"inputs":[{"name":"r"}],"output":{"generics":["f64"],"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"generics":["f64"],"name":"closed01"}}],[11,"rand","","",0,{"inputs":[{"name":"r"}],"output":{"generics":["f32"],"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"generics":["f32"],"name":"closed01"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"chacharng"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default fixed key of 8 zero words.",25,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to a user-provided value. This permits jumping arbitrarily ahead (or backwards) in the pseudorandom stream.",25,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",25,null],[11,"from_seed","","Create a ChaCha generator from a seed, obtained from a variable-length u32 array. Only up to 8 words are used; if less than 8 words are used, the remaining are set to zero.",25,null],[11,"rand","","",25,{"inputs":[{"name":"r"}],"output":{"name":"chacharng"}}],[11,"new_unseeded","","Create an ISAAC random number generator using the default fixed seed.",26,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",26,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",26,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",26,null],[11,"rand","","",26,{"inputs":[{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",27,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",27,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",27,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",27,null],[11,"rand","","",27,{"inputs":[{"name":"r"}],"output":{"name":"isaac64rng"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"xorshiftrng"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",28,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",28,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",28,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",28,null],[11,"rand","","",28,{"inputs":[{"name":"r"}],"output":{"name":"xorshiftrng"}}],[8,"Rand","","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of randomness.",29,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",30,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",30,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open interval `[0, 1)`.",30,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open interval `[0, 1)`.",30,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",30,null],[11,"gen","","Return a random value of a `Rand` type.",30,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",30,{"inputs":[{"name":"self"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",30,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",30,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",30,{"inputs":[{"name":"self"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",30,null],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",30,null],[11,"shuffle","","Shuffle a mutable slice in place.",30,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce the same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",31,{"inputs":[{"name":"self"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",31,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",32,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",33,{"inputs":[{"name":"self"}],"output":{"generics":["char"],"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"stdrng"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",34,{"inputs":[],"output":{"generics":["stdrng"],"name":"result"}}],[11,"next_u32","","",34,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",34,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",34,null],[11,"from_seed","","",34,null],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"threadrng"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_u32","","",35,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",35,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",35,null]],"paths":[[3,"Open01"],[3,"Closed01"],[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[4,"TimerError"],[3,"JitterRng"],[3,"OsRng"],[3,"ReadRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"ChaChaRng"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"XorShiftRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex["rayon"] = {"doc":"","items":[[5,"current_num_threads","rayon","Returns the number of threads in the current registry. If this code is executing within a Rayon thread-pool, then this will be the number of threads for the thread-pool of the current thread. Otherwise, it will be the number of threads for the global thread-pool.",null,{"inputs":[],"output":{"name":"usize"}}],[3,"Configuration","","Contains the rayon thread pool configuration. Use [`ThreadPoolBuilder`] instead.",null,null],[5,"initialize","","Deprecated in favor of `ThreadPoolBuilder::build_global`.",null,{"inputs":[{"name":"configuration"}],"output":{"generics":["box"],"name":"result"}}],[3,"ThreadPool","","Represents a user created [thread-pool].",null,null],[5,"join","","Takes two closures and potentially runs them in parallel. It returns a pair of the results from those closures.",null,null],[5,"scope","","Create a \"fork-join\" scope `s` and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.",null,{"inputs":[{"name":"op"}],"output":{"name":"r"}}],[3,"Scope","","Represents a fork-join scope which can be used to spawn any number of tasks. See [`scope()`] for more information.",null,null],[5,"spawn","","Fires off a task into the Rayon threadpool in the \"static\" or \"global\" scope.  Just like a standard thread, this task is not tied to the current stack frame, and hence it cannot hold any references other than those with `'static` lifetime. If you want to spawn a task that references stack data, use [the `scope()` function][scope] to create a scope.",null,null],[5,"split","","The `split` function takes arbitrary data and a closure that knows how to split it, and turns this into a `ParallelIterator`.",null,{"inputs":[{"name":"d"},{"name":"s"}],"output":{"name":"split"}}],[0,"collections","","This module contains the parallel iterator types for standard collections. You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[0,"binary_heap","rayon::collections","This module contains the parallel iterator types for heaps (`BinaryHeap<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::binary_heap","Parallel iterator over a binary heap",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a binary heap",null,null],[11,"drive_unindexed","","",0,null],[11,"opt_len","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",0,null],[11,"len","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",0,null],[11,"drive_unindexed","","",1,null],[11,"opt_len","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",1,null],[11,"len","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",1,null],[0,"btree_map","rayon::collections","This module contains the parallel iterator types for B-Tree maps (`BTreeMap<K, V>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::btree_map","Parallel iterator over a B-Tree map",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a B-Tree map",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a B-Tree map",null,null],[11,"drive_unindexed","","",2,null],[11,"opt_len","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive_unindexed","","",3,null],[11,"opt_len","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive_unindexed","","",4,null],[11,"opt_len","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[0,"btree_set","rayon::collections","This module contains the parallel iterator types for B-Tree sets (`BTreeSet<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::btree_set","Parallel iterator over a B-Tree set",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a B-Tree set",null,null],[11,"drive_unindexed","","",5,null],[11,"opt_len","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive_unindexed","","",6,null],[11,"opt_len","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[0,"hash_map","rayon::collections","This module contains the parallel iterator types for hash maps (`HashMap<K, V>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::hash_map","Parallel iterator over a hash map",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a hash map",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a hash map",null,null],[11,"drive_unindexed","","",7,null],[11,"opt_len","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive_unindexed","","",8,null],[11,"opt_len","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive_unindexed","","",9,null],[11,"opt_len","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[0,"hash_set","rayon::collections","This module contains the parallel iterator types for hash sets (`HashSet<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::hash_set","Parallel iterator over a hash set",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a hash set",null,null],[11,"drive_unindexed","","",10,null],[11,"opt_len","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive_unindexed","","",11,null],[11,"opt_len","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[0,"linked_list","rayon::collections","This module contains the parallel iterator types for linked lists (`LinkedList<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::linked_list","Parallel iterator over a linked list",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a linked list",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a linked list",null,null],[11,"drive_unindexed","","",12,null],[11,"opt_len","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive_unindexed","","",13,null],[11,"opt_len","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive_unindexed","","",14,null],[11,"opt_len","","",14,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[0,"vec_deque","rayon::collections","This module contains the parallel iterator types for double-ended queues (`VecDeque<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::collections::vec_deque","Parallel iterator over a double-ended queue",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a double-ended queue",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a double-ended queue",null,null],[11,"drive_unindexed","","",15,null],[11,"opt_len","","",15,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",15,null],[11,"len","","",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",15,null],[11,"drive_unindexed","","",16,null],[11,"opt_len","","",16,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",16,null],[11,"len","","",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",16,null],[11,"drive_unindexed","","",17,null],[11,"opt_len","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",17,null],[11,"len","","",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",17,null],[0,"iter","rayon","The `ParallelIterator` module makes it easy to write parallel programs using an iterator-style interface. To get access to all the methods you want, the easiest is to write `use rayon::prelude::*;` at the top of your module, which will import the various traits and methods you need.",null,null],[3,"Chain","rayon::iter","`Chain` is an iterator that joins `b` after `a` in one continuous iterator. This struct is created by the [`chain()`] method on [`ParallelIterator`]",null,null],[3,"Enumerate","","`Enumerate` is an iterator that returns the current count along with the element. This struct is created by the [`enumerate()`] method on [`ParallelIterator`]",null,null],[3,"Filter","","`Filter` takes a predicate `filter_op` and filters out elements that match. This struct is created by the [`filter()`] method on [`ParallelIterator`]",null,null],[3,"FilterMap","","`FilterMap` creates an iterator that uses `filter_op` to both filter and map elements. This struct is created by the [`filter_map()`] method on [`ParallelIterator`].",null,null],[3,"FlatMap","","`FlatMap` maps each element to an iterator, then flattens these iterators together. This struct is created by the [`flat_map()`] method on [`ParallelIterator`]",null,null],[3,"Fold","","`Fold` is an iterator that applies a function over an iterator producing a single value. This struct is created by the [`fold()`] method on [`ParallelIterator`]",null,null],[3,"FoldWith","","`FoldWith` is an iterator that applies a function over an iterator producing a single value. This struct is created by the [`fold_with()`] method on [`ParallelIterator`]",null,null],[3,"Skip","","`Skip` is an iterator that skips over the first `n` elements. This struct is created by the [`skip()`] method on [`ParallelIterator`]",null,null],[3,"Split","","`Split` is a parallel iterator using arbitrary data and a splitting function. This struct is created by the [`split()`] function.",null,null],[3,"Take","","`Take` is an iterator that iterates over the first `n` elements. This struct is created by the [`take()`] method on [`ParallelIterator`]",null,null],[3,"Map","","`Map` is an iterator that transforms the elements of an underlying iterator.",null,null],[3,"MapWith","","`MapWith` is an iterator that transforms the elements of an underlying iterator.",null,null],[3,"Zip","","",null,null],[3,"Rev","","",null,null],[3,"MinLen","","`MinLen` is an iterator that imposes a minimum length on iterator splits. This struct is created by the [`min_len()`] method on [`IndexedParallelIterator`]",null,null],[3,"MaxLen","","`MaxLen` is an iterator that imposes a maximum length on iterator splits. This struct is created by the [`max_len()`] method on [`IndexedParallelIterator`]",null,null],[3,"Cloned","","`Cloned` is an iterator that clones the elements of an underlying iterator.",null,null],[3,"Inspect","","`Inspect` is an iterator that calls a function with a reference to each element before yielding it.",null,null],[3,"WhileSome","","`WhileSome` is an iterator that yields the `Some` elements of an iterator, halting as soon as any `None` is produced.",null,null],[4,"Either","","Represents a value of one of two possible types.",null,null],[13,"Left","","",18,null],[13,"Right","","",18,null],[5,"split","","The `split` function takes arbitrary data and a closure that knows how to split it, and turns this into a `ParallelIterator`.",null,{"inputs":[{"name":"d"},{"name":"s"}],"output":{"name":"split"}}],[11,"drive_unindexed","","",19,null],[11,"opt_len","","",19,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",19,null],[11,"len","","",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",19,null],[11,"drive_unindexed","","",20,null],[11,"opt_len","","",20,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",20,null],[11,"len","","",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",20,null],[11,"drive_unindexed","","",21,null],[11,"drive_unindexed","","",22,null],[11,"drive_unindexed","","",23,null],[0,"internal","","Internal traits and functions used to implement parallel iteration. These should be considered highly unstable: users of parallel iterators should not need to interact with them directly. See `README.md` for a high-level overview.",null,null],[5,"bridge","rayon::iter::internal","",null,null],[5,"bridge_producer_consumer","","",null,null],[5,"bridge_unindexed","","",null,null],[8,"ProducerCallback","","",null,null],[16,"Output","","",24,null],[10,"callback","","",24,null],[8,"Producer","","A producer which will produce a fixed number of items N. This is not queryable through the API; the consumer is expected to track it.",null,null],[16,"Item","","",25,null],[16,"IntoIter","","",25,null],[10,"into_iter","","",25,null],[11,"min_len","","",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"max_len","","",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"split_at","","Split into two producers; one produces items `0..index`, the other `index..N`. Index must be less than or equal to `N`.",25,null],[11,"fold_with","","Iterate the producer, feeding each element to `folder`, and stop when the folder is full (or all elements have been consumed).",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"f"}}],[8,"Consumer","","A consumer which consumes items that are fed to it.",null,null],[16,"Folder","","",26,null],[16,"Reducer","","",26,null],[16,"Result","","",26,null],[10,"split_at","","Divide the consumer into two consumers, one processing items `0..index` and one processing items from `index..`. Also produces a reducer that can be used to reduce the results at the end.",26,null],[10,"into_folder","","Convert the consumer into a folder that can consume items sequentially, eventually producing a final result.",26,null],[10,"full","","Hint whether this `Consumer` would like to stop processing further items, e.g. if a search has been completed.",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Folder","","",null,null],[16,"Result","","",27,null],[10,"consume","","Consume next item and return new sequential state.",27,{"inputs":[{"name":"self"},{"name":"item"}],"output":{"name":"self"}}],[11,"consume_iter","","Consume items from the iterator until full, and return new sequential state.",27,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[10,"complete","","Finish consuming items, produce final result.",27,null],[10,"full","","Hint whether this `Folder` would like to stop processing further items, e.g. if a search has been completed.",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Reducer","","",null,null],[10,"reduce","","Reduce two final results into one; this is executed after a split.",28,{"inputs":[{"name":"self"},{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[8,"UnindexedConsumer","","A stateless consumer can be freely copied.",null,null],[10,"split_off_left","","",29,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_reducer","","",29,null],[8,"UnindexedProducer","","An unindexed producer that doesn't know its exact length. (or can't represent its known length in a `usize`)",null,null],[16,"Item","","",30,null],[10,"split","","Split midway into a new producer if possible, otherwise return `None`.",30,null],[10,"fold_with","","Iterate the producer, feeding each element to `folder`, and stop when the folder is full (or all elements have been consumed).",30,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"f"}}],[11,"drive_unindexed","rayon::iter","",31,null],[11,"drive_unindexed","","",32,null],[11,"drive_unindexed","","",33,null],[11,"opt_len","","",33,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"len","","",33,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",33,null],[11,"with_producer","","",33,null],[11,"drive_unindexed","","",34,null],[11,"drive_unindexed","","",35,null],[11,"opt_len","","",35,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"len","","",35,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"drive","","",35,null],[11,"with_producer","","",35,null],[11,"drive_unindexed","","",36,null],[11,"opt_len","","",36,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",36,null],[11,"len","","",36,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",36,null],[11,"drive_unindexed","","",37,null],[11,"opt_len","","",37,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",37,null],[11,"len","","",37,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",37,null],[11,"drive_unindexed","","",38,null],[11,"opt_len","","",38,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",38,null],[11,"len","","",38,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",38,null],[11,"drive_unindexed","","",39,null],[11,"opt_len","","",39,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",39,null],[11,"len","","",39,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",39,null],[11,"drive_unindexed","","",40,null],[11,"opt_len","","",40,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",40,null],[11,"len","","",40,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",40,null],[11,"drive_unindexed","","",41,null],[11,"opt_len","","",41,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",41,null],[11,"len","","",41,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",41,null],[11,"drive_unindexed","","",42,null],[11,"opt_len","","",42,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",42,null],[11,"len","","",42,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",42,null],[11,"drive_unindexed","","",43,null],[11,"opt_len","","",43,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",43,null],[11,"len","","",43,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",43,null],[11,"drive_unindexed","","",44,null],[8,"IntoParallelIterator","","",null,null],[16,"Iter","","",45,null],[16,"Item","","",45,null],[10,"into_par_iter","","",45,null],[8,"IntoParallelRefIterator","","",null,null],[16,"Iter","","",46,null],[16,"Item","","",46,null],[10,"par_iter","","",46,null],[8,"IntoParallelRefMutIterator","","",null,null],[16,"Iter","","",47,null],[16,"Item","","",47,null],[10,"par_iter_mut","","",47,null],[8,"ParallelIterator","","The `ParallelIterator` interface.",null,null],[16,"Item","","",48,null],[11,"for_each","","Executes `OP` on each item produced by the iterator, in parallel.",48,{"inputs":[{"name":"self"},{"name":"op"}],"output":null}],[11,"for_each_with","","Executes `OP` on the given `init` value with each item produced by the iterator, in parallel.",48,{"inputs":[{"name":"self"},{"name":"t"},{"name":"op"}],"output":null}],[11,"count","","Counts the number of items in this parallel iterator.",48,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"map","","Applies `map_op` to each item of this iterator, producing a new iterator with the results.",48,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_with","","Applies `map_op` to the given `init` value with each item of this iterator, producing a new iterator with the results.",48,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":{"name":"mapwith"}}],[11,"cloned","","Creates an iterator which clones all of its elements.  This may be useful when you have an iterator over `&T`, but you need `T`.",48,{"inputs":[{"name":"self"}],"output":{"name":"cloned"}}],[11,"inspect","","Applies `inspect_op` to a reference to each item of this iterator, producing a new iterator passing through the original items.  This is often useful for debugging to see what's happening in iterator stages.",48,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"inspect"}}],[11,"filter","","Applies `filter_op` to each item of this iterator, producing a new iterator with only the items that gave `true` results.",48,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"filter"}}],[11,"filter_map","","Applies `filter_op` to each item of this iterator to get an `Option`, producing a new iterator with only the items from `Some` results.",48,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"filtermap"}}],[11,"flat_map","","Applies `map_op` to each item of this iterator to get nested iterators, producing a new iterator that flattens these back into one.",48,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"flatmap"}}],[11,"reduce","","Reduces the items in the iterator into one item using `op`. The argument `identity` should be a closure that can produce \"identity\" value which may be inserted into the sequence as needed to create opportunities for parallel execution. So, for example, if you are doing a summation, then `identity()` ought to produce something that represents the zero for your type (but consider just calling `sum()` in that case).",48,null],[11,"reduce_with","","Reduces the items in the iterator into one item using `op`. If the iterator is empty, `None` is returned; otherwise, `Some` is returned.",48,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"option"}}],[11,"fold","","Parallel fold is similar to sequential fold except that the sequence of items may be subdivided before it is folded. Consider a list of numbers like `22 3 77 89 46`. If you used sequential fold to add them (`fold(0, |a,b| a+b)`, you would wind up first adding 0 + 22, then 22 + 3, then 25 + 77, and so forth. The parallel fold works similarly except that it first breaks up your list into sublists, and hence instead of yielding up a single sum at the end, it yields up multiple sums. The number of results is nondeterministic, as is the point where the breaks occur.",48,{"inputs":[{"name":"self"},{"name":"id"},{"name":"f"}],"output":{"name":"fold"}}],[11,"fold_with","","Applies `fold_op` to the given `init` value with each item of this iterator, finally producing the value for further use.",48,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":{"name":"foldwith"}}],[11,"sum","","Sums up the items in the iterator.",48,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"product","","Multiplies all the items in the iterator.",48,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"min","","Computes the minimum of all the items in the iterator. If the iterator is empty, `None` is returned; otherwise, `Some(min)` is returned.",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"min_by","","Computes the minimum of all the items in the iterator with respect to the given comparison function. If the iterator is empty, `None` is returned; otherwise, `Some(min)` is returned.",48,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by_key","","Computes the item that yields the minimum value for the given function. If the iterator is empty, `None` is returned; otherwise, `Some(item)` is returned.",48,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"max","","Computes the maximum of all the items in the iterator. If the iterator is empty, `None` is returned; otherwise, `Some(max)` is returned.",48,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"max_by","","Computes the maximum of all the items in the iterator with respect to the given comparison function. If the iterator is empty, `None` is returned; otherwise, `Some(min)` is returned.",48,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"max_by_key","","Computes the item that yields the maximum value for the given function. If the iterator is empty, `None` is returned; otherwise, `Some(item)` is returned.",48,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[11,"chain","","Takes two iterators and creates a new iterator over both.",48,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"chain"}}],[11,"find_any","","Searches for some item in the parallel iterator that matches the given predicate and returns it. This operation is similar to [`find` on sequential iterators][find] but the item returned may not be the first one in the parallel sequence which matches, since we search the entire sequence in parallel.",48,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"find_first","","Searches for the sequentially first item in the parallel iterator that matches the given predicate and returns it.",48,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"find_last","","Searches for the sequentially last item in the parallel iterator that matches the given predicate and returns it.",48,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[11,"any","","Searches for some item in the parallel iterator that matches the given predicate, and if so returns true.  Once a match is found, we'll attempt to stop process the rest of the items.  Proving that there's no match, returning false, does require visiting every item.",48,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"all","","Tests that every item in the parallel iterator matches the given predicate, and if so returns true.  If a counter-example is found, we'll attempt to stop processing more items, then return false.",48,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"bool"}}],[11,"while_some","","Creates an iterator over the `Some` items of this iterator, halting as soon as any `None` is found.",48,{"inputs":[{"name":"self"}],"output":{"name":"whilesome"}}],[11,"collect","","Create a fresh collection containing all the element produced by this parallel iterator.",48,{"inputs":[{"name":"self"}],"output":{"name":"c"}}],[11,"unzip","","Unzips the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers.",48,null],[11,"partition","","Partitions the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers.  Items for which the `predicate` returns true go into the first container, and the rest go into the second.",48,null],[11,"partition_map","","Partitions and maps the items of a parallel iterator into a pair of arbitrary `ParallelExtend` containers.  `Either::Left` items go into the first container, and `Either::Right` items go into the second.",48,null],[10,"drive_unindexed","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",48,null],[11,"opt_len","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",48,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[8,"IndexedParallelIterator","","An iterator that supports \"random access\" to its data, meaning that you can split it at arbitrary indices and draw data from those points.",null,null],[11,"collect_into","","Collects the results of the iterator into the specified vector. The vector is always truncated before execution begins. If possible, reusing the vector across calls can lead to better performance since it reuses the same backing buffer.",49,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"unzip_into","","Unzips the results of the iterator into the specified vectors. The vectors are always truncated before execution begins. If possible, reusing the vectors across calls can lead to better performance since they reuse the same backing buffer.",49,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"vec"}],"output":null}],[11,"zip","","Iterate over tuples `(A, B)`, where the items `A` are from this iterator and `B` are from the iterator given as argument. Like the `zip` method on ordinary iterators, if the two iterators are of unequal length, you only get the items they have in common.",49,{"inputs":[{"name":"self"},{"name":"z"}],"output":{"name":"zip"}}],[11,"cmp","","Lexicographically compares the elements of this `ParallelIterator` with those of another.",49,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `ParallelIterator` with those of another.",49,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","Determines if the elements of this `ParallelIterator` are equal to those of another",49,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ne","","Determines if the elements of this `ParallelIterator` are unequal to those of another",49,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"lt","","Determines if the elements of this `ParallelIterator` are lexicographically less than those of another.",49,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"le","","Determines if the elements of this `ParallelIterator` are less or equal to those of another.",49,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"gt","","Determines if the elements of this `ParallelIterator` are lexicographically greater than those of another.",49,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ge","","Determines if the elements of this `ParallelIterator` are less or equal to those of another.",49,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"bool"}}],[11,"enumerate","","Yields an index along with each item.",49,{"inputs":[{"name":"self"}],"output":{"name":"enumerate"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",49,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates an iterator that yields the first `n` elements.",49,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"take"}}],[11,"position_any","","Searches for some item in the parallel iterator that matches the given predicate, and returns its index.  Like `ParallelIterator::find_any`, the parallel search will not necessarily find the first match, and once a match is found we'll attempt to stop processing any more.",49,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"position_first","","Searches for the sequentially first item in the parallel iterator that matches the given predicate, and returns its index.",49,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"position_last","","Searches for the sequentially last item in the parallel iterator that matches the given predicate, and returns its index.",49,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["usize"],"name":"option"}}],[11,"rev","","Produces a new iterator with the elements of this iterator in reverse order.",49,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"with_min_len","","Sets the minimum length of iterators desired to process in each thread.  Rayon will not split any smaller than this length, but of course an iterator could already be smaller to begin with.",49,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"minlen"}}],[11,"with_max_len","","Sets the maximum length of iterators desired to process in each thread.  Rayon will try to split at least below this length, unless that would put it below the length from `with_min_len()`. For example, given min=10 and max=15, a length of 16 will not be split any further.",49,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"maxlen"}}],[10,"len","","Produces an exact count of how many items this iterator will produce, presuming no panic occurs.",49,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"drive","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",49,null],[10,"with_producer","","Internal method used to define the behavior of this parallel iterator. You should not need to call this directly.",49,null],[8,"FromParallelIterator","","`FromParallelIterator` implements the conversion from a [`ParallelIterator`]. By implementing `FromParallelIterator` for a type, you define how it will be created from an iterator.",null,null],[10,"from_par_iter","","",50,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[8,"ParallelExtend","","`ParallelExtend` extends an existing collection with items from a [`ParallelIterator`].",null,null],[10,"par_extend","","",51,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[0,"option","rayon","This module contains the parallel iterator types for options (`Option<T>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::option","Parallel iterator over an option",null,null],[3,"Iter","","Parallel iterator over an immutable reference to an option",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to an option",null,null],[11,"drive_unindexed","","",52,null],[11,"opt_len","","",52,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",52,null],[11,"len","","",52,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",52,null],[11,"drive_unindexed","","",53,null],[11,"opt_len","","",53,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",53,null],[11,"len","","",53,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",53,null],[11,"drive_unindexed","","",54,null],[11,"opt_len","","",54,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",54,null],[11,"len","","",54,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",54,null],[0,"prelude","rayon","The rayon prelude imports the various `ParallelIterator` traits. The intention is that one can include `use rayon::prelude::*` and have easy access to the various traits and methods you will need.",null,null],[0,"range","","This module contains the parallel iterator types for ranges (`Range<T>`); this is the type for values created by a `a..b` expression. You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"Iter","rayon::range","Parallel iterator over a range",null,null],[11,"drive_unindexed","","",55,null],[11,"opt_len","","",55,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",55,null],[11,"len","","",55,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",55,null],[11,"drive_unindexed","","",55,null],[11,"opt_len","","",55,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",55,null],[11,"len","","",55,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",55,null],[11,"drive_unindexed","","",55,null],[11,"opt_len","","",55,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",55,null],[11,"len","","",55,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",55,null],[11,"drive_unindexed","","",55,null],[11,"opt_len","","",55,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",55,null],[11,"len","","",55,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",55,null],[11,"drive_unindexed","","",55,null],[11,"opt_len","","",55,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",55,null],[11,"len","","",55,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",55,null],[11,"drive_unindexed","","",55,null],[11,"opt_len","","",55,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",55,null],[11,"len","","",55,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",55,null],[11,"drive_unindexed","","",55,null],[11,"opt_len","","",55,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",55,null],[11,"len","","",55,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",55,null],[11,"drive_unindexed","","",55,null],[11,"opt_len","","",55,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",55,null],[11,"len","","",55,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",55,null],[11,"drive_unindexed","","",55,null],[11,"drive_unindexed","","",55,null],[0,"result","rayon","This module contains the parallel iterator types for results (`Result<T, E>`). You will rarely need to interact with it directly unless you have need to name one of the iterator types.",null,null],[3,"IntoIter","rayon::result","Parallel iterator over a result",null,null],[3,"Iter","","Parallel iterator over an immutable reference to a result",null,null],[3,"IterMut","","Parallel iterator over a mutable reference to a result",null,null],[11,"drive_unindexed","","",56,null],[11,"opt_len","","",56,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",56,null],[11,"len","","",56,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",56,null],[11,"drive_unindexed","","",57,null],[11,"opt_len","","",57,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",57,null],[11,"len","","",57,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",57,null],[11,"drive_unindexed","","",58,null],[11,"opt_len","","",58,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",58,null],[11,"len","","",58,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",58,null],[0,"slice","rayon","This module contains the parallel iterator types for slices (`[T]`). You will rarely need to interact with it directly unless you have need to name one of those types.",null,null],[3,"Iter","rayon::slice","Parallel iterator over immutable items in a slice",null,null],[3,"Chunks","","Parallel iterator over immutable non-overlapping chunks of a slice",null,null],[3,"Windows","","Parallel iterator over immutable overlapping windows of a slice",null,null],[3,"IterMut","","Parallel iterator over mutable items in a slice",null,null],[3,"ChunksMut","","Parallel iterator over mutable non-overlapping chunks of a slice",null,null],[3,"Split","","Parallel iterator over slices separated by a predicate",null,null],[3,"SplitMut","","Parallel iterator over mutable slices separated by a predicate",null,null],[8,"ParallelSlice","","Parallel extensions for slices.",null,null],[10,"as_parallel_slice","","Returns a plain slice, which is used to implement the rest of the parallel methods.",59,null],[11,"par_split","","Returns a parallel iterator over subslices separated by elements that match the separator.",59,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"split"}}],[11,"par_windows","","Returns a parallel iterator over all contiguous windows of length `size`. The windows overlap.",59,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"windows"}}],[11,"par_chunks","","Returns a parallel iterator over at most `size` elements of `self` at a time. The chunks do not overlap.",59,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunks"}}],[8,"ParallelSliceMut","","Parallel extensions for mutable slices.",null,null],[10,"as_parallel_slice_mut","","Returns a plain mutable slice, which is used to implement the rest of the parallel methods.",60,null],[11,"par_split_mut","","Returns a parallel iterator over mutable subslices separated by elements that match the separator.",60,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"splitmut"}}],[11,"par_chunks_mut","","Returns a parallel iterator over at most `size` elements of `self` at a time. The chunks are mutable and do not overlap.",60,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunksmut"}}],[11,"par_sort","","Sorts the slice in parallel.",60,{"inputs":[{"name":"self"}],"output":null}],[11,"par_sort_by","","Sorts the slice in parallel with a comparator function.",60,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"par_sort_by_key","","Sorts the slice in parallel with a key extraction function.",60,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"par_sort_unstable","","Sorts the slice in parallel, but may not preserve the order of equal elements.",60,{"inputs":[{"name":"self"}],"output":null}],[11,"par_sort_unstable_by","","Sorts the slice in parallel with a comparator function, but may not preserve the order of equal elements.",60,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"par_sort_unstable_by_key","","Sorts the slice in parallel with a key extraction function, but may not preserve the order of equal elements.",60,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"drive_unindexed","","",61,null],[11,"opt_len","","",61,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",61,null],[11,"len","","",61,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",61,null],[11,"drive_unindexed","","",62,null],[11,"opt_len","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",62,null],[11,"len","","",62,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",62,null],[11,"drive_unindexed","","",63,null],[11,"opt_len","","",63,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",63,null],[11,"len","","",63,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",63,null],[11,"drive_unindexed","","",64,null],[11,"opt_len","","",64,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",64,null],[11,"len","","",64,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",64,null],[11,"drive_unindexed","","",65,null],[11,"opt_len","","",65,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",65,null],[11,"len","","",65,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",65,null],[11,"drive_unindexed","","",66,null],[11,"drive_unindexed","","",67,null],[0,"str","rayon","This module contains extension methods for `String` that expose parallel iterators, such as `par_split_whitespace()`. You will rarely need to interact with it directly, since if you add `use rayon::prelude::*` to your file, that will include the helper traits defined in this module.",null,null],[3,"Chars","rayon::str","Parallel iterator over the characters of a string",null,null],[3,"Split","","Parallel iterator over substrings separated by a pattern",null,null],[3,"SplitTerminator","","Parallel iterator over substrings separated by a terminator pattern",null,null],[3,"Lines","","Parallel iterator over lines in a string",null,null],[3,"SplitWhitespace","","Parallel iterator over substrings separated by whitespace",null,null],[8,"ParallelString","","Parallel extensions for strings.",null,null],[10,"as_parallel_string","","Returns a plain string slice, which is used to implement the rest of the parallel methods.",68,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"par_chars","","Returns a parallel iterator over the characters of a string.",68,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"par_split","","Returns a parallel iterator over substrings separated by a given character or predicate, similar to `str::split`.",68,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"split"}}],[11,"par_split_terminator","","Returns a parallel iterator over substrings terminated by a given character or predicate, similar to `str::split_terminator`. It's equivalent to `par_split`, except it doesn't produce an empty substring after a trailing terminator.",68,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"splitterminator"}}],[11,"par_lines","","Returns a parallel iterator over the lines of a string, ending with an optional carriage return and with a newline (`\\r\\n` or just `\\n`). The final line ending is optional, and line endings are not included in the output strings.",68,{"inputs":[{"name":"self"}],"output":{"name":"lines"}}],[11,"par_split_whitespace","","Returns a parallel iterator over the sub-slices of a string that are separated by any amount of whitespace.",68,{"inputs":[{"name":"self"}],"output":{"name":"splitwhitespace"}}],[11,"drive_unindexed","","",69,null],[11,"drive_unindexed","","",70,null],[11,"drive_unindexed","","",71,null],[11,"drive_unindexed","","",72,null],[11,"drive_unindexed","","",73,null],[0,"vec","rayon","This module contains the parallel iterator types for vectors (`Vec<T>`). You will rarely need to interact with it directly unless you have need to name one of those types.",null,null],[3,"IntoIter","rayon::vec","Parallel iterator that moves out of a vector.",null,null],[11,"drive_unindexed","","",74,null],[11,"opt_len","","",74,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"drive","","",74,null],[11,"len","","",74,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"with_producer","","",74,null],[11,"new","rayon","Creates and return a valid rayon thread pool configuration, but does not initialize it.",75,{"inputs":[],"output":{"name":"configuration"}}],[11,"build","","Deprecated in favor of `ThreadPoolBuilder::build`.",75,{"inputs":[{"name":"self"}],"output":{"generics":["threadpool","box"],"name":"result"}}],[11,"thread_name","","Deprecated in favor of `ThreadPoolBuilder::thread_name`.",75,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"configuration"}}],[11,"num_threads","","Deprecated in favor of `ThreadPoolBuilder::num_threads`.",75,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"configuration"}}],[11,"panic_handler","","Deprecated in favor of `ThreadPoolBuilder::panic_handler`.",75,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"configuration"}}],[11,"stack_size","","Deprecated in favor of `ThreadPoolBuilder::stack_size`.",75,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"configuration"}}],[11,"breadth_first","","Deprecated in favor of `ThreadPoolBuilder::breadth_first`.",75,{"inputs":[{"name":"self"}],"output":{"name":"configuration"}}],[11,"start_handler","","Deprecated in favor of `ThreadPoolBuilder::start_handler`.",75,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"configuration"}}],[11,"exit_handler","","Deprecated in favor of `ThreadPoolBuilder::exit_handler`.",75,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"configuration"}}],[11,"drop","","",76,null],[11,"default","","",75,{"inputs":[],"output":{"name":"configuration"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"new","","Deprecated in favor of `ThreadPoolBuilder::build`.",76,{"inputs":[{"name":"configuration"}],"output":{"generics":["threadpool","box"],"name":"result"}}],[11,"install","","Executes `op` within the threadpool. Any attempts to use `join`, `scope`, or parallel iterators will then operate within that threadpool.",76,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"r"}}],[11,"current_num_threads","","Returns the (current) number of threads in the thread pool.",76,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"current_thread_index","","If called from a Rayon worker thread in this thread-pool, returns the index of that thread; if not called from a Rayon thread, or called from a Rayon thread that belongs to a different thread-pool, returns `None`.",76,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"current_thread_has_pending_tasks","","Returns true if the current worker thread currently has \"local tasks\" pending. This can be useful as part of a heuristic for deciding whether to spawn a new task or execute code on the current thread, particularly in breadth-first schedulers. However, keep in mind that this is an inherently racy check, as other worker threads may be actively \"stealing\" tasks from our local deque.",76,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"join","","Execute `oper_a` and `oper_b` in the thread-pool and return the results. Equivalent to `self.install(|| join(oper_a, oper_b))`.",76,null],[11,"scope","","Creates a scope that executes within this thread-pool. Equivalent to `self.install(|| scope(...))`.",76,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"r"}}],[11,"spawn","","Spawns an asynchronous task in this thread-pool. This task will run in the implicit, global scope, which means that it may outlast the current stack frame -- therefore, it cannot capture any references onto the stack (you will likely need a `move` closure).",76,null],[11,"spawn","","Spawns a job into the fork-join scope `self`. This job will execute sometime before the fork-join scope completes.  The job is specified as a closure, and this closure receives its own reference to the scope `self` as argument. This can be used to inject new jobs into `self`.",77,null]],"paths":[[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[4,"Either"],[3,"Chain"],[3,"Enumerate"],[3,"Filter"],[3,"FilterMap"],[3,"FlatMap"],[8,"ProducerCallback"],[8,"Producer"],[8,"Consumer"],[8,"Folder"],[8,"Reducer"],[8,"UnindexedConsumer"],[8,"UnindexedProducer"],[3,"Fold"],[3,"FoldWith"],[3,"Skip"],[3,"Split"],[3,"Take"],[3,"Map"],[3,"MapWith"],[3,"Zip"],[3,"Rev"],[3,"MinLen"],[3,"MaxLen"],[3,"Cloned"],[3,"Inspect"],[3,"WhileSome"],[8,"IntoParallelIterator"],[8,"IntoParallelRefIterator"],[8,"IntoParallelRefMutIterator"],[8,"ParallelIterator"],[8,"IndexedParallelIterator"],[8,"FromParallelIterator"],[8,"ParallelExtend"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[8,"ParallelSlice"],[8,"ParallelSliceMut"],[3,"Iter"],[3,"Chunks"],[3,"Windows"],[3,"IterMut"],[3,"ChunksMut"],[3,"Split"],[3,"SplitMut"],[8,"ParallelString"],[3,"Chars"],[3,"Split"],[3,"SplitTerminator"],[3,"Lines"],[3,"SplitWhitespace"],[3,"IntoIter"],[3,"Configuration"],[3,"ThreadPool"],[3,"Scope"]]};
searchIndex["rayon_core"] = {"doc":"Under construction","items":[[3,"ThreadPool","rayon_core","Represents a user created [thread-pool].",null,null],[3,"Scope","","Represents a fork-join scope which can be used to spawn any number of tasks. See [`scope()`] for more information.",null,null],[3,"ThreadPoolBuildError","","Error when initializing a thread pool.",null,null],[3,"ThreadPoolBuilder","","Used to create a new [`ThreadPool`] or to configure the global rayon thread pool. ## Creating a ThreadPool The following creates a thread pool with 22 threads.",null,null],[3,"Configuration","","Contains the rayon thread pool configuration. Use [`ThreadPoolBuilder`] instead.",null,null],[3,"FnContext","","Provides the calling context to a closure called by `join_context`.",null,null],[5,"current_thread_index","","If called from a Rayon worker thread, returns the index of that thread within its current pool; if not called from a Rayon thread, returns `None`.",null,{"inputs":[],"output":{"generics":["usize"],"name":"option"}}],[5,"current_thread_has_pending_tasks","","If called from a Rayon worker thread, indicates whether that thread's local deque still has pending tasks. Otherwise, returns `None`. For more information, see [the `ThreadPool::current_thread_has_pending_tasks()` method][m].",null,{"inputs":[],"output":{"generics":["bool"],"name":"option"}}],[5,"join","","Takes two closures and potentially runs them in parallel. It returns a pair of the results from those closures.",null,null],[5,"join_context","","Identical to `join`, except that the closures have a parameter that provides context for the way the closure has been called, especially indicating whether they're executing on a different thread than where `join_context` was called.  This will occur if the second job is stolen by a different thread, or if `join_context` was called from outside the thread pool to begin with.",null,null],[5,"scope","","Create a \"fork-join\" scope `s` and invokes the closure with a reference to `s`. This closure can then spawn asynchronous tasks into `s`. Those tasks may run asynchronously with respect to the closure; they may themselves spawn additional tasks into `s`. When the closure returns, it will block until all tasks that have been spawned into `s` complete.",null,{"inputs":[{"name":"op"}],"output":{"name":"r"}}],[5,"spawn","","Fires off a task into the Rayon threadpool in the \"static\" or \"global\" scope.  Just like a standard thread, this task is not tied to the current stack frame, and hence it cannot hold any references other than those with `'static` lifetime. If you want to spawn a task that references stack data, use [the `scope()` function][scope] to create a scope.",null,{"inputs":[{"name":"f"}],"output":null}],[5,"current_num_threads","","Returns the number of threads in the current registry. If this code is executing within a Rayon thread-pool, then this will be the number of threads for the thread-pool of the current thread. Otherwise, it will be the number of threads for the global thread-pool.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"initialize","","Deprecated in favor of `ThreadPoolBuilder::build_global`.",null,{"inputs":[{"name":"configuration"}],"output":{"generics":["box"],"name":"result"}}],[11,"spawn","","Spawns a job into the fork-join scope `self`. This job will execute sometime before the fork-join scope completes.  The job is specified as a closure, and this closure receives its own reference to the scope `self` as argument. This can be used to inject new jobs into `self`.",0,{"inputs":[{"name":"self"},{"name":"body"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Deprecated in favor of `ThreadPoolBuilder::build`.",1,{"inputs":[{"name":"configuration"}],"output":{"generics":["threadpool","box"],"name":"result"}}],[11,"install","","Executes `op` within the threadpool. Any attempts to use `join`, `scope`, or parallel iterators will then operate within that threadpool.",1,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"r"}}],[11,"current_num_threads","","Returns the (current) number of threads in the thread pool.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"current_thread_index","","If called from a Rayon worker thread in this thread-pool, returns the index of that thread; if not called from a Rayon thread, or called from a Rayon thread that belongs to a different thread-pool, returns `None`.",1,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"current_thread_has_pending_tasks","","Returns true if the current worker thread currently has \"local tasks\" pending. This can be useful as part of a heuristic for deciding whether to spawn a new task or execute code on the current thread, particularly in breadth-first schedulers. However, keep in mind that this is an inherently racy check, as other worker threads may be actively \"stealing\" tasks from our local deque.",1,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"join","","Execute `oper_a` and `oper_b` in the thread-pool and return the results. Equivalent to `self.install(|| join(oper_a, oper_b))`.",1,null],[11,"scope","","Creates a scope that executes within this thread-pool. Equivalent to `self.install(|| scope(...))`.",1,{"inputs":[{"name":"self"},{"name":"op"}],"output":{"name":"r"}}],[11,"spawn","","Spawns an asynchronous task in this thread-pool. This task will run in the implicit, global scope, which means that it may outlast the current stack frame -- therefore, it cannot capture any references onto the stack (you will likely need a `move` closure).",1,{"inputs":[{"name":"self"},{"name":"op"}],"output":null}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"threadpoolbuilder"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"configuration"}}],[11,"new","","Creates and returns a valid rayon thread pool builder, but does not initialize it.",3,{"inputs":[],"output":{"name":"threadpoolbuilder"}}],[11,"build","","Create a new `ThreadPool` initialized using this configuration.",3,{"inputs":[{"name":"self"}],"output":{"generics":["threadpool","threadpoolbuilderror"],"name":"result"}}],[11,"build_global","","Initializes the global thread pool. This initialization is optional.  If you do not call this function, the thread pool will be automatically initialized with the default configuration. Calling `build_global` is not recommended, except in two scenarios:",3,{"inputs":[{"name":"self"}],"output":{"generics":["threadpoolbuilderror"],"name":"result"}}],[11,"thread_name","","Set a closure which takes a thread index and returns the thread's name.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"num_threads","","Set the number of threads to be used in the rayon threadpool.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"threadpoolbuilder"}}],[11,"panic_handler","","Normally, whenever Rayon catches a panic, it tries to propagate it to someplace sensible, to try and reflect the semantics of sequential execution. But in some cases, particularly with the `spawn()` APIs, there is no obvious place where we should propagate the panic to. In that case, this panic handler is invoked.",3,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"threadpoolbuilder"}}],[11,"stack_size","","Set the stack size of the worker threads",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"breadth_first","","Suggest to worker threads that they execute spawned jobs in a \"breadth-first\" fashion. Typically, when a worker thread is idle or blocked, it will attempt to execute the job from the top of its local deque of work (i.e., the job most recently spawned). If this flag is set to true, however, workers will prefer to execute in a breadth-first fashion -- that is, they will search for jobs at the bottom of their local deque. (At present, workers always steal from the bottom of other worker's deques, regardless of the setting of this flag.)",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"start_handler","","Set a callback to be invoked on thread start.",3,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"threadpoolbuilder"}}],[11,"exit_handler","","Set a callback to be invoked on thread exit.",3,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"threadpoolbuilder"}}],[11,"new","","Creates and return a valid rayon thread pool configuration, but does not initialize it.",4,{"inputs":[],"output":{"name":"configuration"}}],[11,"build","","Deprecated in favor of `ThreadPoolBuilder::build`.",4,{"inputs":[{"name":"self"}],"output":{"generics":["threadpool","box"],"name":"result"}}],[11,"thread_name","","Deprecated in favor of `ThreadPoolBuilder::thread_name`.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"num_threads","","Deprecated in favor of `ThreadPoolBuilder::num_threads`.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"configuration"}}],[11,"panic_handler","","Deprecated in favor of `ThreadPoolBuilder::panic_handler`.",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"configuration"}}],[11,"stack_size","","Deprecated in favor of `ThreadPoolBuilder::stack_size`.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"breadth_first","","Deprecated in favor of `ThreadPoolBuilder::breadth_first`.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"start_handler","","Deprecated in favor of `ThreadPoolBuilder::start_handler`.",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"configuration"}}],[11,"exit_handler","","Deprecated in favor of `ThreadPoolBuilder::exit_handler`.",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":{"name":"configuration"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"migrated","","Returns `true` if the closure was called from a different thread than it was provided from.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[3,"Scope"],[3,"ThreadPool"],[3,"ThreadPoolBuildError"],[3,"ThreadPoolBuilder"],[3,"Configuration"],[3,"FnContext"]]};
searchIndex["rsx_shared"] = {"doc":"","items":[[0,"consts","rsx_shared","",null,null],[17,"DEFAULT_FONT_SIZE","rsx_shared::consts","",null,null],[17,"DEFAULT_FONT_DPI","","",null,null],[0,"traits","rsx_shared","",null,null],[8,"FromPrimitive","rsx_shared::traits","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",1,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",1,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",1,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",1,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",1,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",1,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",1,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",1,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",2,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",0,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"TDOMText","","",null,null],[8,"TDOMTree","","",null,null],[16,"Node","","",3,null],[10,"get_node","","",3,null],[10,"get_node_mut","","",3,null],[10,"get_node_mut_pair","","",3,null],[8,"TDOMNode","","",null,null],[16,"Id","","",4,null],[16,"Data","","",4,null],[16,"Event","","",4,null],[16,"Styles","","",4,null],[16,"ComputedStyles","","",4,null],[16,"LayoutNode","","",4,null],[10,"data","","",4,null],[10,"is_void","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_shadow_host","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_text","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_known","","",4,{"inputs":[{"name":"self"},{"name":"knownelementname"}],"output":{"name":"bool"}}],[10,"computed_styles","","",4,null],[10,"layout_node","","",4,null],[10,"reflow_subtree","","",4,null],[10,"set_computed_client_position","","",4,null],[10,"get_local_bounding_client_rect","","",4,null],[10,"get_global_bounding_client_rect","","",4,null],[10,"get_measured_image","","",4,null],[10,"get_shaped_text","","",4,null],[8,"TCallback","","",null,null],[16,"InvokeOk","","",5,null],[16,"InvokeErr","","",5,null],[10,"call","","",5,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[10,"call_mut","","",5,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[10,"call_once","","",5,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[8,"TEvent","","",null,null],[10,"target","","",6,{"inputs":[{"name":"self"}],"output":{"name":"domnoderawid"}}],[10,"ty","","",6,{"inputs":[{"name":"self"}],"output":{"name":"eventtype"}}],[8,"TUIEvent","","",null,null],[10,"alt_key","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"ctrl_key","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"meta_key","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"shift_key","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"TKeyboardEvent","","",null,null],[16,"KeyCode","","",8,null],[10,"code","","",8,null],[10,"key","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[10,"get_modifier_state","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"repeat","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"TMouseEvent","","",null,null],[16,"MouseButton","","",9,null],[10,"button","","",9,null],[10,"client_x","","",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"client_y","","",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"offset_x","","",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"offset_y","","",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"page_x","","",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"page_y","","",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[8,"TGenericEvent","","",null,null],[8,"TEventManager","","",null,null],[16,"Target","","",10,null],[16,"KeyCode","","",10,null],[16,"MouseButton","","",10,null],[16,"KeyEventData","","",10,null],[16,"MouseEventData","","",10,null],[10,"add_event_listener","","",10,null],[10,"remove_event_listener","","",10,null],[10,"receive_key_event","","",10,null],[10,"receive_mouse_event","","",10,null],[10,"broadcast_events","","",10,{"inputs":[{"name":"self"},{"name":"a"}],"output":null}],[10,"intercept_events","","",10,{"inputs":[{"name":"self"},{"name":"a"},{"name":"f"}],"output":null}],[8,"TFileCache","","",null,null],[16,"File","","",11,null],[16,"ResourceUpdates","","",11,null],[10,"add_file","","",11,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[10,"get_file","","",11,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[10,"take_resource_updates","","",11,null],[8,"TFontCache","","",null,null],[16,"FontInstance","","",12,null],[16,"FontId","","",12,null],[16,"ResourceUpdates","","",12,null],[16,"Glyphs","","",12,null],[10,"add_raw","","",12,{"inputs":[{"name":"self"},{"name":"p"},{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[10,"add_font","","",12,{"inputs":[{"name":"self"},{"name":"p"},{"name":"e"},{"name":"usize"}],"output":{"name":"option"}}],[10,"add_font_with_id","","",12,null],[10,"get_family_name","","",12,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["string"],"name":"option"}}],[10,"get_family_name_for_id","","",12,null],[10,"set_default_font","","",12,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u32"},{"name":"u32"}],"output":null}],[10,"get_default_font","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"get_default_font_with_size","","",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"option"}}],[10,"get_default_font_with_size_and_dpi","","",12,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[10,"get_font","","",12,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[10,"get_font_with_size","","",12,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u32"}],"output":{"name":"option"}}],[10,"get_font_with_size_and_dpi","","",12,{"inputs":[{"name":"self"},{"name":"t"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[10,"shape_text_h","","",12,null],[10,"shape_text_v","","",12,null],[10,"take_resource_updates","","",12,null],[8,"TEncodedFont","","",null,null],[16,"Error","","",13,null],[10,"from_bytes","","",13,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[10,"from_data_uri","","",13,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[10,"bytes","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["rc"],"name":"option"}}],[10,"data_uri","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["rc"],"name":"option"}}],[10,"info","","",13,{"inputs":[{"name":"self"}],"output":{"name":"fontencodeddata"}}],[8,"TImageCache","","",null,null],[16,"Image","","",14,null],[16,"ImageId","","",14,null],[16,"ResourceUpdates","","",14,null],[16,"Dimensions","","",14,null],[10,"add_raw","","",14,{"inputs":[{"name":"self"},{"name":"p"},{"name":"t"}],"output":{"name":"option"}}],[10,"add_image","","",14,{"inputs":[{"name":"self"},{"name":"p"},{"name":"e"}],"output":{"name":"option"}}],[10,"add_image_with_id","","",14,null],[10,"get_image","","",14,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[10,"measure_image","","",14,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"option"}}],[10,"take_resource_updates","","",14,null],[8,"TEncodedImage","","",null,null],[16,"Error","","",15,null],[10,"from_bytes","","",15,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[10,"from_data_uri","","",15,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[10,"format","","",15,{"inputs":[{"name":"self"}],"output":{"generics":["imageencodingformat"],"name":"option"}}],[10,"bytes","","",15,{"inputs":[{"name":"self"}],"output":{"generics":["rc"],"name":"option"}}],[10,"data_uri","","",15,{"inputs":[{"name":"self"}],"output":{"generics":["rc"],"name":"option"}}],[10,"size_info","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"info","","",15,{"inputs":[{"name":"self"}],"output":{"name":"imageencodeddata"}}],[8,"TMediaKey","","",null,null],[8,"TFontKey","","",null,null],[8,"TFontInstanceKey","","",null,null],[8,"TImageKeysAPI","","",null,null],[16,"RootRendererAPI","","",16,null],[16,"ResourceUpdates","","",16,null],[16,"ImageKey","","",16,null],[10,"new","","",16,null],[10,"add_image","","",16,null],[10,"take_resource_updates","","",16,null],[8,"TFontKeysAPI","","",null,null],[16,"RootRendererAPI","","",17,null],[16,"ResourceUpdates","","",17,null],[16,"FontKey","","",17,null],[16,"FontInstanceKey","","",17,null],[16,"GlyphInstance","","",17,null],[10,"new","","",17,null],[10,"add_font","","",17,null],[10,"add_font_instance","","",17,null],[10,"take_resource_updates","","",17,null],[8,"TDimensionsInfo","","",null,null],[16,"ResourceKey","","",18,null],[10,"resource_key","","",18,null],[10,"width","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"height","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[8,"TGlyphInstance","","",null,null],[10,"new","","",19,{"inputs":[{"name":"u32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"self"}}],[8,"TGlyphStore","","",null,null],[16,"FontKey","","",20,null],[16,"FontInstanceKey","","",20,null],[16,"Glyph","","",20,null],[10,"font_key","","",20,null],[10,"font_instance_key","","",20,null],[10,"width_f","","",20,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"height_f","","",20,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[10,"width_64","","",20,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"height_64","","",20,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[10,"glyphs","","",20,null],[8,"TClientRect","","",null,null],[16,"Position","","",21,null],[16,"Size","","",21,null],[10,"position","","",21,null],[10,"size","","",21,null],[10,"offset_from_page","","",21,null],[10,"client_from_page","","",21,null],[10,"contains_point","","",21,null],[8,"TClientPosition","","",null,null],[8,"TClientSize","","",null,null],[8,"TMeasuredImage","","",null,null],[8,"TShapedText","","",null,null],[8,"TLayoutNode","","",null,null],[16,"Styles","","",22,null],[16,"Resources","","",22,null],[16,"TextMeasureMetadata","","",22,null],[16,"ImageMeasureMetadata","","",22,null],[16,"NormalMeasureMetadata","","",22,null],[16,"ReflowDirection","","",22,null],[16,"ClientPosition","","",22,null],[16,"BoundingClientRect","","",22,null],[16,"MeasuredImage","","",22,null],[16,"ShapedText","","",22,null],[10,"make_initial_layout_node","","",22,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[10,"reset_custom_styles","","",22,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[10,"is_tainted","","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"insert_child","","",22,{"inputs":[{"name":"self"},{"name":"self"},{"name":"usize"}],"output":null}],[10,"append_child","","",22,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[10,"remove_child","","",22,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"apply_rules","","",22,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[10,"apply_styles","","",22,null],[10,"mark_dirty","","",22,{"inputs":[{"name":"self"}],"output":null}],[10,"measure_self_as_image","","",22,null],[10,"measure_self_as_text","","",22,null],[10,"measure_self_as_normal","","",22,null],[10,"reflow_subtree","","",22,null],[10,"set_computed_client_position","","",22,null],[10,"get_local_bounding_client_rect","","",22,null],[10,"get_global_bounding_client_rect","","",22,null],[10,"get_measured_image","","",22,null],[10,"get_shaped_text","","",22,null],[8,"TMemoryAPI","","",null,null],[11,"as_ptr","","",23,null],[11,"into_raw","","",23,null],[11,"from_raw","","",23,null],[11,"get_ref","","",23,null],[11,"get_mut","","",23,null],[11,"get_static_ref","","",23,null],[11,"get_static_mut","","",23,null],[11,"drop_raw","","",23,null],[8,"TMemoryAddrAPI","","",null,null],[11,"as_addr","","",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_addr","","",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_addr","","",24,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"get_ref","","",24,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","",24,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"get_static_ref","","",24,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"get_static_mut","","",24,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"drop_addr","","",24,{"inputs":[{"name":"usize"}],"output":null}],[8,"TProp","","",null,null],[8,"TResourceGroup","","",null,null],[16,"Files","","",25,null],[16,"Images","","",25,null],[16,"Fonts","","",25,null],[10,"files","","",25,null],[10,"images","","",25,null],[10,"fonts","","",25,null],[8,"TRuntime","","",null,null],[16,"RootRendererAPI","","",26,null],[16,"DOMResources","","",26,null],[16,"DOMTree","","",26,null],[16,"VirtualEventMetadata","","",26,null],[16,"ReflowMetadata","","",26,null],[16,"BuiltDisplayList","","",26,null],[16,"ResourceUpdates","","",26,null],[10,"new","","",26,null],[10,"should_set_window_position","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"should_set_window_size","","",26,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"should_redraw","","",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"handle_event","","",26,null],[10,"take_resource_updates","","",26,null],[10,"generate_display_list","","",26,null],[8,"TRunner","","",null,null],[16,"Runtime","","",27,null],[10,"run","","",27,{"inputs":[{"name":"f"}],"output":null}],[8,"TStyleDeclarations","","",null,null],[16,"LayoutStyle","","",28,null],[16,"ThemeStyle","","",28,null],[10,"make_user_agent_styles","","",28,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[10,"for_each_layout_style","","",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[10,"for_each_theme_style","","",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[8,"TInheritedStyles","","",null,null],[16,"Styles","","",29,null],[16,"Cursor","","",29,null],[16,"Color","","",29,null],[16,"TextShadow","","",29,null],[16,"FontName","","",29,null],[16,"FontStyle","","",29,null],[16,"FontCaps","","",29,null],[16,"FontWeight","","",29,null],[16,"FontSize","","",29,null],[16,"FontStretch","","",29,null],[16,"Visibility","","",29,null],[10,"inherit_styles","","",29,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[10,"cursor","","",29,null],[10,"color","","",29,null],[10,"font_style","","",29,null],[10,"text_shadows_copy","","",29,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[10,"font_names_copy","","",29,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[10,"font_caps","","",29,null],[10,"font_weight","","",29,null],[10,"font_size","","",29,null],[10,"font_stretch","","",29,null],[10,"visibility","","",29,null],[10,"find_font","","",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"option"}}],[8,"TComputedStyles","","",null,null],[16,"BackgroundColor","","",30,null],[16,"Opacity","","",30,null],[16,"BorderSize","","",30,null],[16,"BorderColor","","",30,null],[16,"BorderStyle","","",30,null],[16,"BoxShadow","","",30,null],[10,"make_initial_computed_styles","","",30,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[10,"reset_custom_styles","","",30,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"apply_rules","","",30,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[10,"apply_styles","","",30,null],[10,"background_color","","",30,null],[10,"opacity","","",30,null],[10,"border_bottom_width","","",30,null],[10,"border_bottom_color","","",30,null],[10,"border_bottom_style","","",30,null],[10,"border_left_width","","",30,null],[10,"border_left_color","","",30,null],[10,"border_left_style","","",30,null],[10,"border_right_width","","",30,null],[10,"border_right_color","","",30,null],[10,"border_right_style","","",30,null],[10,"border_top_width","","",30,null],[10,"border_top_color","","",30,null],[10,"border_top_style","","",30,null],[10,"box_shadows_copy","","",30,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[8,"TAnyPartialEq","","",null,null],[10,"as_any","","",31,{"inputs":[{"name":"self"}],"output":{"name":"any"}}],[10,"eq","","",31,{"inputs":[{"name":"self"},{"name":"tanypartialeq"}],"output":{"name":"bool"}}],[0,"types","rsx_shared","",null,null],[3,"FontResourceData","rsx_shared::types","",null,null],[12,"bytes","","",32,null],[12,"face_index","","",32,null],[3,"FontInstanceResourceData","","",null,null],[12,"size","","",33,null],[12,"dpi","","",33,null],[3,"ImageResourceData","","",null,null],[12,"format","","",34,null],[12,"size","","",34,null],[12,"pixels","","",34,null],[3,"Prop","","",null,null],[3,"DummyComputedCursor","","",null,null],[3,"DummyComputedColor","","",null,null],[3,"DummyComputedTextShadow","","",null,null],[3,"DummyComputedFontName","","",null,null],[3,"DummyComputedFontStyle","","",null,null],[3,"DummyComputedFontCaps","","",null,null],[3,"DummyComputedFontWeight","","",null,null],[3,"DummyComputedFontSize","","",null,null],[3,"DummyComputedFontStretch","","",null,null],[3,"DummyComputedVisibility","","",null,null],[3,"DummyComputedBorderStyle","","",null,null],[3,"DummyComputedBoxShadow","","",null,null],[4,"EventType","","",null,null],[13,"KeyDown","","",35,null],[13,"KeyPress","","",35,null],[13,"KeyUp","","",35,null],[13,"MouseMove","","",35,null],[13,"MouseDown","","",35,null],[13,"MouseUp","","",35,null],[13,"AuxClick","","",35,null],[13,"Click","","",35,null],[13,"DblClick","","",35,null],[13,"ContextMenu","","",35,null],[13,"Wheel","","",35,null],[13,"Select","","",35,null],[13,"MouseEnter","","",35,null],[13,"MouseLeave","","",35,null],[13,"MouseOver","","",35,null],[13,"MouseOut","","",35,null],[4,"KnownAttributeName","","",null,null],[13,"Accesskey","","",36,null],[13,"Class","","",36,null],[13,"CntEditable","","",36,null],[13,"Contextmenu","","",36,null],[13,"Dir","","",36,null],[13,"Draggable","","",36,null],[13,"Dropzone","","",36,null],[13,"Hidden","","",36,null],[13,"Id","","",36,null],[13,"Lang","","",36,null],[13,"Spellcheck","","",36,null],[13,"Src","","",36,null],[13,"Style","","",36,null],[13,"Tabindex","","",36,null],[13,"Title","","",36,null],[13,"Translate","","",36,null],[4,"KnownElementName","","",null,null],[13,"Root","","",37,null],[13,"Address","","",37,null],[13,"Article","","",37,null],[13,"Aside","","",37,null],[13,"Footer","","",37,null],[13,"Header","","",37,null],[13,"Nav","","",37,null],[13,"Section","","",37,null],[13,"Hgroup","","",37,null],[13,"H1","","",37,null],[13,"H2","","",37,null],[13,"H3","","",37,null],[13,"H4","","",37,null],[13,"H5","","",37,null],[13,"H6","","",37,null],[13,"Main","","",37,null],[13,"Div","","",37,null],[13,"Span","","",37,null],[13,"P","","",37,null],[13,"Ol","","",37,null],[13,"Ul","","",37,null],[13,"Li","","",37,null],[13,"Dl","","",37,null],[13,"Dt","","",37,null],[13,"Dd","","",37,null],[13,"Figure","","",37,null],[13,"Figcaption","","",37,null],[13,"Hr","","",37,null],[13,"Pre","","",37,null],[13,"Blockquote","","",37,null],[13,"A","","",37,null],[13,"Bold","","",37,null],[13,"Italic","","",37,null],[13,"Underline","","",37,null],[13,"Strikethrough","","",37,null],[13,"Emphasis","","",37,null],[13,"Mark","","",37,null],[13,"Quotation","","",37,null],[13,"Citation","","",37,null],[13,"Code","","",37,null],[13,"Data","","",37,null],[13,"Time","","",37,null],[13,"Sub","","",37,null],[13,"Sup","","",37,null],[13,"Br","","",37,null],[13,"Wbr","","",37,null],[13,"Image","","",37,null],[13,"Area","","",37,null],[13,"Map","","",37,null],[13,"Audio","","",37,null],[13,"Video","","",37,null],[13,"Track","","",37,null],[13,"Button","","",37,null],[13,"Datalist","","",37,null],[13,"Fieldset","","",37,null],[13,"Form","","",37,null],[13,"Input","","",37,null],[13,"Label","","",37,null],[13,"Legend","","",37,null],[13,"Meter","","",37,null],[13,"Optgroup","","",37,null],[13,"Option","","",37,null],[13,"Output","","",37,null],[13,"Progress","","",37,null],[13,"Select","","",37,null],[13,"Textarea","","",37,null],[13,"Fragment","","",37,null],[13,"View","","",37,null],[13,"Text","","",37,null],[13,"TextInput","","",37,null],[13,"ScrollView","","",37,null],[13,"Picker","","",37,null],[13,"Slider","","",37,null],[13,"Switch","","",37,null],[13,"FlatList","","",37,null],[13,"SectionList","","",37,null],[4,"VirtualEventType","","",null,null],[13,"KeyDown","","",38,null],[13,"KeyPress","","",38,null],[13,"KeyUp","","",38,null],[13,"MouseMove","","",38,null],[13,"MouseDown","","",38,null],[13,"MouseUp","","",38,null],[13,"AuxClick","","",38,null],[13,"Click","","",38,null],[13,"DblClick","","",38,null],[13,"ContextMenu","","",38,null],[13,"Wheel","","",38,null],[13,"Select","","",38,null],[4,"Closure","","",null,null],[13,"Headless","","",39,null],[12,"f","rsx_shared::types::Closure","",39,null],[13,"Fn","rsx_shared::types","",39,null],[12,"f","rsx_shared::types::Closure","",39,null],[13,"FnMut","rsx_shared::types","",39,null],[12,"f","rsx_shared::types::Closure","",39,null],[4,"FontEncodedData","rsx_shared::types","",null,null],[13,"Bytes","","",40,null],[12,"bytes","rsx_shared::types::FontEncodedData","",40,null],[13,"DataUri","rsx_shared::types","",40,null],[12,"data_uri","rsx_shared::types::FontEncodedData","",40,null],[4,"ImagePixelFormat","rsx_shared::types","",null,null],[13,"Gray","","",41,null],[13,"RGB","","",41,null],[13,"Palette","","",41,null],[13,"GrayA","","",41,null],[13,"RGBA","","",41,null],[13,"BGRA","","",41,null],[4,"ImageEncodingFormat","","",null,null],[13,"PNG","","",42,null],[13,"JPEG","","",42,null],[13,"GIF","","",42,null],[13,"WEBP","","",42,null],[13,"PNM","","",42,null],[13,"TIFF","","",42,null],[13,"TGA","","",42,null],[13,"BMP","","",42,null],[13,"ICO","","",42,null],[13,"HDR","","",42,null],[4,"ImageEncodedData","","",null,null],[13,"Bytes","","",43,null],[12,"format","rsx_shared::types::ImageEncodedData","",43,null],[12,"bytes","","",43,null],[13,"DataUri","rsx_shared::types","",43,null],[12,"data_uri","rsx_shared::types::ImageEncodedData","",43,null],[4,"SharedUnit","rsx_shared::types","",null,null],[13,"None","","",44,null],[13,"Point","","",44,null],[13,"Percent","","",44,null],[13,"Auto","","",44,null],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"eventtype"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",35,{"inputs":[{"name":"self"},{"name":"eventtype"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",35,{"inputs":[{"name":"self"},{"name":"eventtype"}],"output":{"name":"ordering"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"eventtype"}}],[11,"hash","","",35,null],[11,"from_u64","","",35,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_i64","","",35,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"to_u64","","",35,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_i64","","",35,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_tokens","","",35,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_custom_tokens","","",35,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"knownattributename"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",36,{"inputs":[{"name":"self"},{"name":"knownattributename"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",36,{"inputs":[{"name":"self"},{"name":"knownattributename"}],"output":{"name":"ordering"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"knownattributename"}}],[11,"hash","","",36,null],[11,"from_u64","","",36,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_i64","","",36,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"to_u64","","",36,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_i64","","",36,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_tokens","","",36,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_custom_tokens","","",36,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"knownelementname"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",37,{"inputs":[{"name":"self"},{"name":"knownelementname"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",37,{"inputs":[{"name":"self"},{"name":"knownelementname"}],"output":{"name":"ordering"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"knownelementname"}}],[11,"hash","","",37,null],[11,"from_u64","","",37,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_i64","","",37,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"to_u64","","",37,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_i64","","",37,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_tokens","","",37,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_custom_tokens","","",37,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"virtualeventtype"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",38,{"inputs":[{"name":"self"},{"name":"virtualeventtype"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",38,{"inputs":[{"name":"self"},{"name":"virtualeventtype"}],"output":{"name":"ordering"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"virtualeventtype"}}],[11,"hash","","",38,null],[11,"from_u64","","",38,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_i64","","",38,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"to_u64","","",38,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"to_i64","","",38,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"to_tokens","","",38,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_custom_tokens","","",38,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"eventtype"}],"output":{"name":"bool"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"virtualeventtype"}],"output":{"name":"bool"}}],[11,"headless","","",39,{"inputs":[{"name":"headlessclosureid"}],"output":{"name":"self"}}],[11,"new","","",39,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"new_mut","","",39,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",39,null],[11,"from","","",39,{"inputs":[{"name":"headlessclosureid"}],"output":{"name":"self"}}],[11,"from","","",39,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",39,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"call","","",39,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"call_mut","","",39,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"call_once","","",39,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"prop"}}],[11,"new","","",45,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"deref","","",45,null],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"imagepixelformat"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"imagepixelformat"}],"output":{"name":"bool"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"imagepixelformat"}}],[11,"to_tokens","","",41,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_custom_tokens","","",41,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"as_ref","","",41,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",41,{"inputs":[{"name":"colortype"}],"output":{"name":"self"}}],[11,"into","","",41,{"inputs":[{"name":"self"}],"output":{"name":"colortype"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"imageencodingformat"}],"output":{"name":"bool"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"imageencodingformat"}}],[11,"to_tokens","","",42,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_custom_tokens","","",42,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"as_ref","","",42,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",42,{"inputs":[{"name":"imageformat"}],"output":{"name":"self"}}],[11,"into","","",42,{"inputs":[{"name":"self"}],"output":{"name":"imageformat"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"imageencodeddata"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"imageencodeddata"}],"output":{"name":"bool"}}],[11,"new","","",43,{"inputs":[{"name":"imageencodingformat"},{"name":"rc"}],"output":{"name":"self"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"imageresourcedata"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"imageresourcedata"}],"output":{"name":"bool"}}],[11,"new","","",34,null],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"fontencodeddata"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"fontencodeddata"}],"output":{"name":"bool"}}],[11,"new","","",40,{"inputs":[{"name":"rc"}],"output":{"name":"self"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"fontresourcedata"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"fontresourcedata"}],"output":{"name":"bool"}}],[11,"new","","",32,{"inputs":[{"name":"rc"},{"name":"usize"}],"output":{"name":"self"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"fontinstanceresourcedata"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"fontinstanceresourcedata"}],"output":{"name":"bool"}}],[11,"new","","",33,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"dummycomputedcursor"}],"output":{"name":"bool"}}],[11,"default","","",46,{"inputs":[],"output":{"name":"dummycomputedcursor"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"dummycomputedcursor"}}],[11,"as_ref","","",46,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"dummycomputedcolor"}],"output":{"name":"bool"}}],[11,"default","","",47,{"inputs":[],"output":{"name":"dummycomputedcolor"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"dummycomputedcolor"}}],[11,"into","","",47,null],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"dummycomputedtextshadow"}],"output":{"name":"bool"}}],[11,"default","","",48,{"inputs":[],"output":{"name":"dummycomputedtextshadow"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"dummycomputedtextshadow"}}],[11,"into","","",48,null],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"dummycomputedfontname"}],"output":{"name":"bool"}}],[11,"default","","",49,{"inputs":[],"output":{"name":"dummycomputedfontname"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"dummycomputedfontname"}}],[11,"as_ref","","",49,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"dummycomputedfontstyle"}],"output":{"name":"bool"}}],[11,"default","","",50,{"inputs":[],"output":{"name":"dummycomputedfontstyle"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"dummycomputedfontstyle"}}],[11,"as_ref","","",50,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"dummycomputedfontcaps"}],"output":{"name":"bool"}}],[11,"default","","",51,{"inputs":[],"output":{"name":"dummycomputedfontcaps"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"dummycomputedfontcaps"}}],[11,"as_ref","","",51,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"dummycomputedfontweight"}],"output":{"name":"bool"}}],[11,"default","","",52,{"inputs":[],"output":{"name":"dummycomputedfontweight"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"dummycomputedfontweight"}}],[11,"try_into","","",52,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"dummycomputedfontsize"}],"output":{"name":"bool"}}],[11,"default","","",53,{"inputs":[],"output":{"name":"dummycomputedfontsize"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"dummycomputedfontsize"}}],[11,"try_into","","",53,{"inputs":[{"name":"self"}],"output":{"generics":["sharedunit"],"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"dummycomputedfontstretch"}],"output":{"name":"bool"}}],[11,"default","","",54,{"inputs":[],"output":{"name":"dummycomputedfontstretch"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"dummycomputedfontstretch"}}],[11,"as_ref","","",54,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"dummycomputedvisibility"}],"output":{"name":"bool"}}],[11,"default","","",55,{"inputs":[],"output":{"name":"dummycomputedvisibility"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"dummycomputedvisibility"}}],[11,"into","","",55,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"dummycomputedborderstyle"}],"output":{"name":"bool"}}],[11,"default","","",56,{"inputs":[],"output":{"name":"dummycomputedborderstyle"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"dummycomputedborderstyle"}}],[11,"as_ref","","",56,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"dummycomputedboxshadow"}],"output":{"name":"bool"}}],[11,"default","","",57,{"inputs":[],"output":{"name":"dummycomputedboxshadow"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"dummycomputedboxshadow"}}],[11,"into","","",57,null],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"sharedunit"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"sharedunit"}],"output":{"name":"bool"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"sharedunit"}}],[11,"to_tokens","","",44,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_custom_tokens","","",44,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"point","","",44,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"percent","","",44,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"as_ref","","",44,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",44,{"inputs":[{"name":"styleunit"}],"output":{"name":"self"}}],[6,"DOMNodeRawId","","",null,null],[6,"EventTypeId","","",null,null],[6,"KnownAttributeNameId","","",null,null],[6,"KnownElementNameId","","",null,null],[6,"VirtualEventTypeId","","",null,null],[6,"HeadlessClosureId","","",null,null],[17,"VIRTUAL_KEY_DOWN","","",null,null],[17,"VIRTUAL_KEY_PRESS","","",null,null],[17,"VIRTUAL_KEY_UP","","",null,null],[17,"VIRTUAL_MOUSE_MOVE","","",null,null],[17,"VIRTUAL_MOUSE_DOWN","","",null,null],[17,"VIRTUAL_MOUSE_UP","","",null,null],[17,"VIRTUAL_AUX_CLICK","","",null,null],[17,"VIRTUAL_CLICK","","",null,null],[17,"VIRTUAL_DBL_CLICK","","",null,null],[17,"VIRTUAL_CONTEXT_MENU","","",null,null],[17,"VIRTUAL_WHEEL","","",null,null],[17,"VIRTUAL_SELECT","","",null,null],[11,"eq","rsx_shared::traits","",31,{"inputs":[{"name":"self"},{"name":"tanypartialeq"}],"output":{"name":"bool"}}],[11,"apply_rules","","",22,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"as_ptr","","",23,null],[11,"into_raw","","",23,null],[11,"from_raw","","",23,null],[11,"get_ref","","",23,null],[11,"get_mut","","",23,null],[11,"get_static_ref","","",23,null],[11,"get_static_mut","","",23,null],[11,"drop_raw","","",23,null],[11,"as_addr","","",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"into_addr","","",24,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_addr","","",24,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"get_ref","","",24,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","",24,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"get_static_ref","","",24,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"get_static_mut","","",24,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"drop_addr","","",24,{"inputs":[{"name":"usize"}],"output":null}],[11,"apply_rules","","",30,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}]],"paths":[[8,"FromPrimitive"],[8,"ToPrimitive"],[8,"NumCast"],[8,"TDOMTree"],[8,"TDOMNode"],[8,"TCallback"],[8,"TEvent"],[8,"TUIEvent"],[8,"TKeyboardEvent"],[8,"TMouseEvent"],[8,"TEventManager"],[8,"TFileCache"],[8,"TFontCache"],[8,"TEncodedFont"],[8,"TImageCache"],[8,"TEncodedImage"],[8,"TImageKeysAPI"],[8,"TFontKeysAPI"],[8,"TDimensionsInfo"],[8,"TGlyphInstance"],[8,"TGlyphStore"],[8,"TClientRect"],[8,"TLayoutNode"],[8,"TMemoryAPI"],[8,"TMemoryAddrAPI"],[8,"TResourceGroup"],[8,"TRuntime"],[8,"TRunner"],[8,"TStyleDeclarations"],[8,"TInheritedStyles"],[8,"TComputedStyles"],[8,"TAnyPartialEq"],[3,"FontResourceData"],[3,"FontInstanceResourceData"],[3,"ImageResourceData"],[4,"EventType"],[4,"KnownAttributeName"],[4,"KnownElementName"],[4,"VirtualEventType"],[4,"Closure"],[4,"FontEncodedData"],[4,"ImagePixelFormat"],[4,"ImageEncodingFormat"],[4,"ImageEncodedData"],[4,"SharedUnit"],[3,"Prop"],[3,"DummyComputedCursor"],[3,"DummyComputedColor"],[3,"DummyComputedTextShadow"],[3,"DummyComputedFontName"],[3,"DummyComputedFontStyle"],[3,"DummyComputedFontCaps"],[3,"DummyComputedFontWeight"],[3,"DummyComputedFontSize"],[3,"DummyComputedFontStretch"],[3,"DummyComputedVisibility"],[3,"DummyComputedBorderStyle"],[3,"DummyComputedBoxShadow"]]};
searchIndex["scoped_threadpool"] = {"doc":"This crate provides a stable, safe and scoped threadpool.","items":[[3,"Pool","scoped_threadpool","A threadpool that acts as a handle to a number of threads spawned at construction.",null,null],[3,"Scope","","Handle to the scope during which the threadpool is borrowed.",null,null],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Construct a threadpool with the given number of threads. Minimum value is `1`.",0,{"inputs":[{"name":"u32"}],"output":{"name":"pool"}}],[11,"scoped","","Borrows the pool and allows executing jobs on other threads during that scope via the argument of the closure.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"thread_count","","Returns the number of threads inside this pool.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"execute","","Execute a job on the threadpool.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"join_all","","Blocks until all currently queued jobs have run to completion.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"Pool"],[3,"Scope"]]};
searchIndex["scopeguard"] = {"doc":"A scope guard will run a given closure when it goes out of scope, even if the code between panics. (as long as panic doesn't abort)","items":[[3,"ScopeGuard","scopeguard","`ScopeGuard` is a scope guard that may own a protected value.",null,null],[4,"Always","","Always run on scope exit.",null,null],[5,"guard","","Create a new `ScopeGuard` owning `v` and with deferred closure `dropfn`.",null,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"generics":["always"],"name":"scopeguard"}}],[8,"Strategy","","",null,null],[10,"should_run","","Return `true` if the guard’s associated code should run (in the context where this method is called).",0,{"inputs":[],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"should_run","","",1,{"inputs":[],"output":{"name":"bool"}}],[11,"with_strategy","","Create a `ScopeGuard` that owns `v` (accessible through deref) and calls `dropfn` when its destructor runs.",2,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"name":"scopeguard"}}],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"defer","","Macro to create a `ScopeGuard` (always run).",null,null],[14,"defer_on_unwind","","Macro to create a `ScopeGuard` (run on unwinding from panic).",null,null]],"paths":[[8,"Strategy"],[4,"Always"],[3,"ScopeGuard"]]};
searchIndex["self_tokenize_macro"] = {"doc":"","items":[[5,"self_tokenize","self_tokenize_macro","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"default_quote","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
searchIndex["self_tokenize_trait"] = {"doc":"","items":[[8,"ToTokens","self_tokenize_trait","Types that can be interpolated inside a `quote!(...)` invocation.",null,null],[10,"to_tokens","","Write `self` to the given `Tokens`.",0,null],[3,"Tokens","","Tokens produced by a `quote!(...)` invocation.",null,null],[8,"ToCustomTokens","","",null,null],[10,"to_custom_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":{"name":"bool"}}],[11,"as_ref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"tokens"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"to_tokens","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"new","","Empty tokens.",2,{"inputs":[],"output":{"name":"tokens"}}],[11,"append","","For use by `ToTokens` implementations.",2,null],[11,"append_all","","For use by `ToTokens` implementations.",2,null],[11,"append_separated","","For use by `ToTokens` implementations.",2,null],[11,"append_terminated","","For use by `ToTokens` implementations.",2,null],[11,"as_str","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_string","","",2,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"parse","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}]],"paths":[[8,"ToTokens"],[8,"ToCustomTokens"],[3,"Tokens"]]};
searchIndex["serde"] = {"doc":"Serde","items":[[0,"ser","serde","Generic data structure serialization framework.",null,null],[3,"Impossible","serde::ser","Helper type for implementing a `Serializer` that does not support serializing one of the compound types.",null,null],[11,"serialize_element","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_element","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_key","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_value","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"serialize_field","","",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"end","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"Error","","Trait used by `Serialize` implementations to generically construct errors belonging to the `Serializer` against which they are currently running.",null,null],[10,"custom","","Used when a [`Serialize`] implementation encounters any error while serializing a type.",1,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"Serialize","","A data structure that can be serialized into any data format supported by Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",3,null],[16,"Error","","The error type when some error occurs during serialization.",3,null],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",3,null],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",3,null],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",3,null],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",3,null],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",3,null],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",3,null],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",3,null],[10,"serialize_bool","","Serialize a `bool` value.",3,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"serialize_i8","","Serialize an `i8` value.",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"serialize_i16","","Serialize an `i16` value.",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"serialize_i32","","Serialize an `i32` value.",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"serialize_i64","","Serialize an `i64` value.",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"serialize_u8","","Serialize a `u8` value.",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"serialize_u16","","Serialize a `u16` value.",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"serialize_u32","","Serialize a `u32` value.",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"serialize_u64","","Serialize a `u64` value.",3,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"serialize_f32","","Serialize an `f32` value.",3,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"serialize_f64","","Serialize an `f64` value.",3,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"serialize_char","","Serialize a character.",3,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"serialize_str","","Serialize a `&str`.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",3,null],[10,"serialize_none","","Serialize a [`None`] value.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_some","","Serialize a [`Some(T)`] value.",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_unit","","Serialize a `()` value.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"collect_seq","","Collect an iterator as a sequence.",3,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_map","","Collect an iterator as a map.",3,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"SerializeSeq","","Returned from `Serializer::serialize_seq`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",4,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",4,null],[10,"serialize_element","","Serialize a sequence element.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a sequence.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTuple","","Returned from `Serializer::serialize_tuple`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",5,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",5,null],[10,"serialize_element","","Serialize a tuple element.",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTupleStruct","","Returned from `Serializer::serialize_tuple_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",6,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",6,null],[10,"serialize_field","","Serialize a tuple struct field.",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple struct.",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeTupleVariant","","Returned from `Serializer::serialize_tuple_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",7,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",7,null],[10,"serialize_field","","Serialize a tuple variant field.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a tuple variant.",7,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeMap","","Returned from `Serializer::serialize_map`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",8,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",8,null],[10,"serialize_key","","Serialize a map key.",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_value","","Serialize a map value.",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_entry","","Serialize a map entry consisting of a key and a value.",8,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a map.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeStruct","","Returned from `Serializer::serialize_struct`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",9,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",9,null],[10,"serialize_field","","Serialize a struct field.",9,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"skip_field","","Indicate that a struct field has been skipped.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a struct.",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"SerializeStructVariant","","Returned from `Serializer::serialize_struct_variant`.",null,null],[16,"Ok","","Must match the `Ok` type of our `Serializer`.",10,null],[16,"Error","","Must match the `Error` type of our `Serializer`.",10,null],[10,"serialize_field","","Serialize a struct variant field.",10,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"skip_field","","Indicate that a struct variant field has been skipped.",10,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"end","","Finish serializing a struct variant.",10,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"de","serde","Generic data structure deserialization framework.",null,null],[3,"IgnoredAny","serde::de","An efficient way of discarding data from a deserializer.",null,null],[4,"Unexpected","","`Unexpected` represents an unexpected invocation of any one of the `Visitor` trait methods.",null,null],[13,"Bool","","The input contained a boolean value that was not expected.",11,null],[13,"Unsigned","","The input contained an unsigned integer `u8`, `u16`, `u32` or `u64` that was not expected.",11,null],[13,"Signed","","The input contained a signed integer `i8`, `i16`, `i32` or `i64` that was not expected.",11,null],[13,"Float","","The input contained a floating point `f32` or `f64` that was not expected.",11,null],[13,"Char","","The input contained a `char` that was not expected.",11,null],[13,"Str","","The input contained a `&str` or `String` that was not expected.",11,null],[13,"Bytes","","The input contained a `&[u8]` or `Vec<u8>` that was not expected.",11,null],[13,"Unit","","The input contained a unit `()` that was not expected.",11,null],[13,"Option","","The input contained an `Option<T>` that was not expected.",11,null],[13,"NewtypeStruct","","The input contained a newtype struct that was not expected.",11,null],[13,"Seq","","The input contained a sequence that was not expected.",11,null],[13,"Map","","The input contained a map that was not expected.",11,null],[13,"Enum","","The input contained an enum that was not expected.",11,null],[13,"UnitVariant","","The input contained a unit variant that was not expected.",11,null],[13,"NewtypeVariant","","The input contained a newtype variant that was not expected.",11,null],[13,"TupleVariant","","The input contained a tuple variant that was not expected.",11,null],[13,"StructVariant","","The input contained a struct variant that was not expected.",11,null],[13,"Other","","A message stating what uncategorized thing the input contained that was not expected.",11,null],[0,"value","","Building blocks for deserializing basic values using the `IntoDeserializer` trait.",null,null],[3,"Error","serde::de::value","A minimal representation of all possible errors that can occur using the `IntoDeserializer` trait.",null,null],[3,"UnitDeserializer","","A deserializer holding a `()`.",null,null],[3,"BoolDeserializer","","A deserializer holding a `bool`.",null,null],[3,"I8Deserializer","","A deserializer holding an `i8`.",null,null],[3,"I16Deserializer","","A deserializer holding an `i16`.",null,null],[3,"I32Deserializer","","A deserializer holding an `i32`.",null,null],[3,"I64Deserializer","","A deserializer holding an `i64`.",null,null],[3,"IsizeDeserializer","","A deserializer holding an `isize`.",null,null],[3,"U8Deserializer","","A deserializer holding a `u8`.",null,null],[3,"U16Deserializer","","A deserializer holding a `u16`.",null,null],[3,"U64Deserializer","","A deserializer holding a `u64`.",null,null],[3,"UsizeDeserializer","","A deserializer holding a `usize`.",null,null],[3,"F32Deserializer","","A deserializer holding an `f32`.",null,null],[3,"F64Deserializer","","A deserializer holding an `f64`.",null,null],[3,"CharDeserializer","","A deserializer holding a `char`.",null,null],[3,"U32Deserializer","","A deserializer holding a `u32`.",null,null],[3,"StrDeserializer","","A deserializer holding a `&str`.",null,null],[3,"BorrowedStrDeserializer","","A deserializer holding a `&str` with a lifetime tied to another deserializer.",null,null],[3,"StringDeserializer","","A deserializer holding a `String`.",null,null],[3,"CowStrDeserializer","","A deserializer holding a `Cow<str>`.",null,null],[3,"BorrowedBytesDeserializer","","A deserializer holding a `&[u8]` with a lifetime tied to another deserializer.",null,null],[3,"SeqDeserializer","","A deserializer that iterates over a sequence.",null,null],[3,"SeqAccessDeserializer","","A deserializer holding a `SeqAccess`.",null,null],[3,"MapDeserializer","","A deserializer that iterates over a map.",null,null],[3,"MapAccessDeserializer","","A deserializer holding a `MapAccess`.",null,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"custom","","",12,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"custom","","",12,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"unitdeserializer"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",13,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",13,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",13,null],[11,"deserialize_enum","","",13,null],[11,"deserialize_identifier","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",13,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"booldeserializer"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",14,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",14,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",14,null],[11,"deserialize_enum","","",14,null],[11,"deserialize_identifier","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",14,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"i8deserializer"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",15,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",15,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",15,null],[11,"deserialize_enum","","",15,null],[11,"deserialize_identifier","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",15,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"i16deserializer"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",16,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",16,null],[11,"deserialize_enum","","",16,null],[11,"deserialize_identifier","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",16,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"i32deserializer"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",17,null],[11,"deserialize_enum","","",17,null],[11,"deserialize_identifier","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",17,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"i64deserializer"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",18,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",18,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",18,null],[11,"deserialize_enum","","",18,null],[11,"deserialize_identifier","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",18,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"isizedeserializer"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",19,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",19,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",19,null],[11,"deserialize_enum","","",19,null],[11,"deserialize_identifier","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",19,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u8deserializer"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",20,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",20,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",20,null],[11,"deserialize_enum","","",20,null],[11,"deserialize_identifier","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",20,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u16deserializer"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",21,null],[11,"deserialize_enum","","",21,null],[11,"deserialize_identifier","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",21,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"u64deserializer"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",22,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",22,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",22,null],[11,"deserialize_enum","","",22,null],[11,"deserialize_identifier","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",22,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"usizedeserializer"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",23,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",23,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",23,null],[11,"deserialize_enum","","",23,null],[11,"deserialize_identifier","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",23,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"f32deserializer"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",24,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",24,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",24,null],[11,"deserialize_enum","","",24,null],[11,"deserialize_identifier","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",24,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"f64deserializer"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",25,null],[11,"deserialize_enum","","",25,null],[11,"deserialize_identifier","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",25,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"chardeserializer"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",26,null],[11,"deserialize_enum","","",26,null],[11,"deserialize_identifier","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",26,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"u32deserializer"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",27,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",27,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",27,null],[11,"deserialize_identifier","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_any","","",27,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",27,null],[11,"variant_seed","","",27,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"strdeserializer"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_any","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",28,null],[11,"deserialize_bool","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",28,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",28,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",28,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",28,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",28,null],[11,"deserialize_identifier","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",28,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",28,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"borrowedstrdeserializer"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new borrowed deserializer from the given string.",29,{"inputs":[{"name":"str"}],"output":{"name":"borrowedstrdeserializer"}}],[11,"deserialize_any","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",29,null],[11,"deserialize_bool","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",29,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",29,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",29,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",29,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",29,null],[11,"deserialize_identifier","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",29,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",29,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"stringdeserializer"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_any","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",30,null],[11,"deserialize_bool","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",30,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",30,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",30,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",30,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",30,null],[11,"deserialize_identifier","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",30,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",30,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"cowstrdeserializer"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize_any","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",31,null],[11,"deserialize_bool","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",31,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",31,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",31,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",31,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",31,null],[11,"deserialize_identifier","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",31,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant_seed","","",31,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"borrowedbytesdeserializer"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new borrowed deserializer from the given byte slice.",32,null],[11,"deserialize_any","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",32,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",32,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",32,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",32,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",32,null],[11,"deserialize_identifier","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",32,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",32,null],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"seqdeserializer"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `SeqDeserializer<I, E>`.",33,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"end","","Check for remaining elements after passing a `SeqDeserializer` to `Visitor::visit_seq`.",33,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deserialize_any","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",33,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",33,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",33,null],[11,"deserialize_enum","","",33,null],[11,"deserialize_identifier","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_element_seed","","",33,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","",33,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"seqaccessdeserializer"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `SeqAccessDeserializer<A>`.",34,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"deserialize_any","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",34,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",34,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",34,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",34,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",34,null],[11,"deserialize_enum","","",34,null],[11,"deserialize_identifier","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",34,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a new `MapDeserializer<I, E>`.",35,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"end","","Check for remaining elements after passing a `MapDeserializer` to `Visitor::visit_map`.",35,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deserialize_any","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",35,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",35,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",35,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",35,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",35,null],[11,"deserialize_enum","","",35,null],[11,"deserialize_identifier","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",35,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_key_seed","","",35,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["option"],"name":"result"}}],[11,"next_value_seed","","",35,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"next_entry_seed","","",35,{"inputs":[{"name":"self"},{"name":"tk"},{"name":"tv"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","",35,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"next_element_seed","","",35,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","",35,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"mapaccessdeserializer"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `MapAccessDeserializer<A>`.",36,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"deserialize_any","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_byte_buf","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","",36,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","",36,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","",36,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","",36,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","",36,null],[11,"deserialize_enum","","",36,null],[11,"deserialize_identifier","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_ignored_any","","",36,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"clone","serde::de","",37,{"inputs":[{"name":"self"}],"output":{"name":"ignoredany"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",37,{"inputs":[],"output":{"name":"ignoredany"}}],[11,"expecting","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_bool","","",37,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_i64","","",37,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_u64","","",37,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f64","","",37,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_str","","",37,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_none","","",37,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_some","","",37,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","",37,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_unit","","",37,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_seq","","",37,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_map","","",37,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_bytes","","",37,null],[11,"deserialize","","",37,{"inputs":[{"name":"d"}],"output":{"generics":["ignoredany"],"name":"result"}}],[8,"Error","","The `Error` trait allows `Deserialize` implementations to create descriptive error messages belonging to the `Deserializer` against which they are currently running.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",38,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"invalid_type","","Raised when a `Deserialize` receives a type different from what it was expecting.",38,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Deserialize` receives a value of the right type but that is wrong for some other reason.",38,{"inputs":[{"name":"unexpected"},{"name":"expected"}],"output":{"name":"self"}}],[11,"invalid_length","","Raised when deserializing a sequence or map and the input data contains too many or too few elements.",38,{"inputs":[{"name":"usize"},{"name":"expected"}],"output":{"name":"self"}}],[11,"unknown_variant","","Raised when a `Deserialize` enum type received a variant with an unrecognized name.",38,null],[11,"unknown_field","","Raised when a `Deserialize` struct type received a field with an unrecognized name.",38,null],[11,"missing_field","","Raised when a `Deserialize` struct type expected to receive a required field with a particular name but that field was not present in the input.",38,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the same field.",38,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Expected","","`Expected` represents an explanation of what data a `Visitor` was expecting to receive.",null,null],[10,"fmt","","Format an explanation of what data was being expected. Same signature as the `Display` and `Debug` traits.",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Deserialize","","A data structure that can be deserialized from any data format supported by Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",40,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"DeserializeOwned","","A data structure that can be deserialized without borrowing any data from the deserializer.",null,null],[8,"DeserializeSeed","","`DeserializeSeed` is the stateful form of the `Deserialize` trait. If you ever find yourself looking for a way to pass data into a `Deserialize` impl, this trait is the way to do it.",null,null],[16,"Value","","The type produced by using this seed.",41,null],[10,"deserialize","","Equivalent to the more common `Deserialize::deserialize` method, except with some initial piece of data (the seed) passed in.",41,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",42,null],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",42,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",42,null],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",42,null],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",null,null],[16,"Value","","The value produced by this visitor.",43,null],[10,"expecting","","Format a message stating what data this Visitor expects to receive.",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"visit_bool","","The input contains a boolean.",43,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_i8","","The input contains an `i8`.",43,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"visit_i16","","The input contains an `i16`.",43,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"visit_i32","","The input contains an `i32`.",43,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"visit_i64","","The input contains an `i64`.",43,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_u8","","The input contains a `u8`.",43,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"visit_u16","","The input contains a `u16`.",43,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"visit_u32","","The input contains a `u32`.",43,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"visit_u64","","The input contains a `u64`.",43,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f32","","The input contains an `f32`.",43,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"visit_f64","","The input contains an `f64`.",43,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_char","","The input contains a `char`.",43,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"visit_str","","The input contains a string. The lifetime of the string is ephemeral and it may be destroyed after this method returns.",43,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_borrowed_str","","The input contains a string that lives at least as long as the `Deserializer`.",43,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_string","","The input contains a string and ownership of the string is being given to the `Visitor`.",43,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"result"}}],[11,"visit_bytes","","The input contains a byte array. The lifetime of the byte array is ephemeral and it may be destroyed after this method returns.",43,null],[11,"visit_borrowed_bytes","","The input contains a byte array that lives at least as long as the `Deserializer`.",43,null],[11,"visit_byte_buf","","The input contains a byte array and ownership of the byte array is being given to the `Visitor`.",43,{"inputs":[{"name":"self"},{"generics":["u8"],"name":"vec"}],"output":{"name":"result"}}],[11,"visit_none","","The input contains an optional that is absent.",43,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_some","","The input contains an optional that is present.",43,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_unit","","The input contains a unit `()`.",43,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","The input contains a newtype struct.",43,{"inputs":[{"name":"self"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_seq","","The input contains a sequence of elements.",43,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_map","","The input contains a key-value map.",43,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[11,"visit_enum","","The input contains an enum.",43,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"result"}}],[8,"SeqAccess","","Provides a `Visitor` access to each element of a sequence in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",44,null],[10,"next_element_seed","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",44,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["option"],"name":"result"}}],[11,"next_element","","This returns `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there are no more remaining items.",44,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","Returns the number of elements remaining in the sequence, if known.",44,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[8,"MapAccess","","Provides a `Visitor` access to each entry of a map in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",45,null],[10,"next_key_seed","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",45,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"generics":["option"],"name":"result"}}],[10,"next_value_seed","","This returns a `Ok(value)` for the next value in the map.",45,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"next_entry_seed","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",45,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"generics":["option"],"name":"result"}}],[11,"next_key","","This returns `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no more remaining entries.",45,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"next_value","","This returns a `Ok(value)` for the next value in the map.",45,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"next_entry","","This returns `Ok(Some((key, value)))` for the next (key-value) pair in the map, or `Ok(None)` if there are no more remaining items.",45,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"size_hint","","Returns the number of entries remaining in the map, if known.",45,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[8,"EnumAccess","","Provides a `Visitor` access to the data of an enum in the input.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",46,null],[16,"Variant","","The `Visitor` that will be used to deserialize the content of the enum variant.",46,null],[10,"variant_seed","","`variant` is called to identify which variant to deserialize.",46,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"variant","","`variant` is called to identify which variant to deserialize.",46,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[8,"VariantAccess","","`VariantAccess` is a visitor that is created by the `Deserializer` and passed to the `Deserialize` to deserialize the content of a particular enum variant.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization. Must match the error type of our `EnumAccess`.",47,null],[10,"unit_variant","","Called when deserializing a variant with no values.",47,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"newtype_variant_seed","","Called when deserializing a variant with a single value.",47,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"newtype_variant","","Called when deserializing a variant with a single value.",47,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"tuple_variant","","Called when deserializing a tuple-like variant.",47,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"struct_variant","","Called when deserializing a struct-like variant.",47,null],[8,"IntoDeserializer","","Converts an existing value into a `Deserializer` from which other values can be deserialized.",null,null],[16,"Deserializer","","The type of the deserializer being converted into.",48,null],[10,"into_deserializer","","Convert this value into a deserializer.",48,null],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"unexpected"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"unexpected"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"unexpected"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Serialize","serde","A data structure that can be serialized into any data format supported by Serde.",null,null],[10,"serialize","","Serialize this value into the given Serde serializer.",2,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serializer","","A data format that can serialize any data structure supported by Serde.",null,null],[16,"Ok","","The output type produced by this `Serializer` during successful serialization. Most serializers that produce text or binary output should set `Ok = ()` and serialize into an [`io::Write`] or buffer contained within the `Serializer` instance. Serializers that build in-memory data structures may be simplified by using `Ok` to propagate the data structure around.",3,null],[16,"Error","","The error type when some error occurs during serialization.",3,null],[16,"SerializeSeq","","Type returned from [`serialize_seq`] for serializing the content of the sequence.",3,null],[16,"SerializeTuple","","Type returned from [`serialize_tuple`] for serializing the content of the tuple.",3,null],[16,"SerializeTupleStruct","","Type returned from [`serialize_tuple_struct`] for serializing the content of the tuple struct.",3,null],[16,"SerializeTupleVariant","","Type returned from [`serialize_tuple_variant`] for serializing the content of the tuple variant.",3,null],[16,"SerializeMap","","Type returned from [`serialize_map`] for serializing the content of the map.",3,null],[16,"SerializeStruct","","Type returned from [`serialize_struct`] for serializing the content of the struct.",3,null],[16,"SerializeStructVariant","","Type returned from [`serialize_struct_variant`] for serializing the content of the struct variant.",3,null],[10,"serialize_bool","","Serialize a `bool` value.",3,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"serialize_i8","","Serialize an `i8` value.",3,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"serialize_i16","","Serialize an `i16` value.",3,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"serialize_i32","","Serialize an `i32` value.",3,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"serialize_i64","","Serialize an `i64` value.",3,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"serialize_u8","","Serialize a `u8` value.",3,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"serialize_u16","","Serialize a `u16` value.",3,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"serialize_u32","","Serialize a `u32` value.",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"serialize_u64","","Serialize a `u64` value.",3,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"serialize_f32","","Serialize an `f32` value.",3,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"serialize_f64","","Serialize an `f64` value.",3,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"serialize_char","","Serialize a character.",3,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"serialize_str","","Serialize a `&str`.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_bytes","","Serialize a chunk of raw byte data.",3,null],[10,"serialize_none","","Serialize a [`None`] value.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_some","","Serialize a [`Some(T)`] value.",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_unit","","Serialize a `()` value.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"serialize_unit_struct","","Serialize a unit struct like `struct Unit` or `PhantomData<T>`.",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_unit_variant","","Serialize a unit variant like `E::A` in `enum E { A, B }`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"}],"output":{"name":"result"}}],[10,"serialize_newtype_struct","","Serialize a newtype struct like `struct Millimeters(u8)`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_newtype_variant","","Serialize a newtype variant like `E::N` in `enum E { N(u8) }`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_seq","","Begin to serialize a variably sized sequence. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[10,"serialize_tuple","","Begin to serialize a statically sized sequence whose length will be known at deserialization time without looking at the serialized data. This call must be followed by zero or more calls to `serialize_element`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_struct","","Begin to serialize a tuple struct like `struct Rgb(u8, u8, u8)`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_tuple_variant","","Begin to serialize a tuple variant like `E::T` in `enum E { T(u8, u8) }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_map","","Begin to serialize a map. This call must be followed by zero or more calls to `serialize_key` and `serialize_value`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"generics":["usize"],"name":"option"}],"output":{"name":"result"}}],[10,"serialize_struct","","Begin to serialize a struct like `struct Rgb { r: u8, g: u8, b: u8 }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[10,"serialize_struct_variant","","Begin to serialize a struct variant like `E::S` in `enum E { S { r: u8, g: u8, b: u8 } }`. This call must be followed by zero or more calls to `serialize_field`, then a call to `end`.",3,{"inputs":[{"name":"self"},{"name":"str"},{"name":"u32"},{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"collect_seq","","Collect an iterator as a sequence.",3,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_map","","Collect an iterator as a map.",3,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"result"}}],[11,"collect_str","","Serialize a string produced by an implementation of `Display`.",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"is_human_readable","","Determine whether `Serialize` implementations should serialize in human-readable form.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Deserialize","","A data structure that can be deserialized from any data format supported by Serde.",null,null],[10,"deserialize","","Deserialize this value from the given Serde deserializer.",40,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","A data format that can deserialize any data structure supported by Serde.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",42,null],[10,"deserialize_any","","Require the `Deserializer` to figure out how to drive the visitor based on what data type is in the input.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bool","","Hint that the `Deserialize` type is expecting a `bool` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i8","","Hint that the `Deserialize` type is expecting an `i8` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i16","","Hint that the `Deserialize` type is expecting an `i16` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i32","","Hint that the `Deserialize` type is expecting an `i32` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_i64","","Hint that the `Deserialize` type is expecting an `i64` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u8","","Hint that the `Deserialize` type is expecting a `u8` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u16","","Hint that the `Deserialize` type is expecting a `u16` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u32","","Hint that the `Deserialize` type is expecting a `u32` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_u64","","Hint that the `Deserialize` type is expecting a `u64` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f32","","Hint that the `Deserialize` type is expecting a `f32` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_f64","","Hint that the `Deserialize` type is expecting a `f64` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_char","","Hint that the `Deserialize` type is expecting a `char` value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_str","","Hint that the `Deserialize` type is expecting a string value and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_string","","Hint that the `Deserialize` type is expecting a string value and would benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_bytes","","Hint that the `Deserialize` type is expecting a byte array and does not benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_byte_buf","","Hint that the `Deserialize` type is expecting a byte array and would benefit from taking ownership of buffered data owned by the `Deserializer`.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_option","","Hint that the `Deserialize` type is expecting an optional value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit","","Hint that the `Deserialize` type is expecting a unit value.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_unit_struct","","Hint that the `Deserialize` type is expecting a unit struct with a particular name.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_newtype_struct","","Hint that the `Deserialize` type is expecting a newtype struct with a particular name.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_seq","","Hint that the `Deserialize` type is expecting a sequence of values.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple","","Hint that the `Deserialize` type is expecting a sequence of values and knows how many values there are without looking at the serialized data.",42,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_tuple_struct","","Hint that the `Deserialize` type is expecting a tuple struct with a particular name and number of fields.",42,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_map","","Hint that the `Deserialize` type is expecting a map of key-value pairs.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_struct","","Hint that the `Deserialize` type is expecting a struct with a particular name and fields.",42,null],[10,"deserialize_enum","","Hint that the `Deserialize` type is expecting an enum value with a particular name and possible variants.",42,null],[10,"deserialize_identifier","","Hint that the `Deserialize` type is expecting the name of a struct field or the discriminant of an enum variant.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[10,"deserialize_ignored_any","","Hint that the `Deserialize` type needs to deserialize a value whose type doesn't matter because it is ignored.",42,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"result"}}],[11,"is_human_readable","","Determine whether `Deserialize` implementations should expect to deserialize their human-readable form.",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[14,"forward_to_deserialize_any","","Helper macro when implementing the `Deserializer` part of a new data format for Serde.",null,null]],"paths":[[3,"Impossible"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"],[4,"Unexpected"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"BorrowedStrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapDeserializer"],[3,"MapAccessDeserializer"],[3,"IgnoredAny"],[8,"Error"],[8,"Expected"],[8,"Deserialize"],[8,"DeserializeSeed"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"IntoDeserializer"]]};
searchIndex["serde_derive"] = {"doc":"This crate provides Serde's two derive macros.","items":[[5,"derive_serialize","serde_derive","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[5,"derive_deserialize","","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
searchIndex["serde_derive_internals"] = {"doc":"","items":[[3,"Ctxt","serde_derive_internals","",null,null],[0,"ast","","",null,null],[3,"Container","serde_derive_internals::ast","",null,null],[12,"ident","","",0,null],[12,"attrs","","",0,null],[12,"body","","",0,null],[12,"generics","","",0,null],[3,"Variant","","",null,null],[12,"ident","","",1,null],[12,"attrs","","",1,null],[12,"style","","",1,null],[12,"fields","","",1,null],[3,"Field","","",null,null],[12,"ident","","",2,null],[12,"attrs","","",2,null],[12,"ty","","",2,null],[4,"Body","","",null,null],[13,"Enum","","",3,null],[13,"Struct","","",3,null],[4,"Style","","",null,null],[13,"Struct","","",4,null],[13,"Tuple","","",4,null],[13,"Newtype","","",4,null],[13,"Unit","","",4,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"from_ast","","",0,{"inputs":[{"name":"ctxt"},{"name":"deriveinput"}],"output":{"name":"container"}}],[11,"all_fields","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["iterator"],"name":"box"}}],[11,"has_getter","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"attr","serde_derive_internals","",null,null],[3,"Name","serde_derive_internals::attr","",null,null],[3,"Container","","Represents container (e.g. struct) attribute information",null,null],[3,"Variant","","Represents variant attribute information",null,null],[3,"Field","","Represents field attribute information",null,null],[4,"RenameRule","","",null,null],[13,"None","","Don't apply a default rename rule.",5,null],[13,"LowerCase","","Rename direct children to \"lowercase\" style.",5,null],[13,"UPPERCASE","","Rename direct children to \"UPPERCASE\" style.",5,null],[13,"PascalCase","","Rename direct children to \"PascalCase\" style, as typically used for enum variants.",5,null],[13,"CamelCase","","Rename direct children to \"camelCase\" style.",5,null],[13,"SnakeCase","","Rename direct children to \"snake_case\" style, as commonly used for fields.",5,null],[13,"ScreamingSnakeCase","","Rename direct children to \"SCREAMING_SNAKE_CASE\" style, as commonly used for constants.",5,null],[13,"KebabCase","","Rename direct children to \"kebab-case\" style.",5,null],[13,"ScreamingKebabCase","","Rename direct children to \"SCREAMING-KEBAB-CASE\" style.",5,null],[4,"EnumTag","","Styles of representing an enum.",null,null],[13,"External","","The default.",6,null],[13,"Internal","","`#[serde(tag = \"type\")]`",6,null],[12,"tag","serde_derive_internals::attr::EnumTag","",6,null],[13,"Adjacent","serde_derive_internals::attr","`#[serde(tag = \"t\", content = \"c\")]`",6,null],[12,"tag","serde_derive_internals::attr::EnumTag","",6,null],[12,"content","","",6,null],[13,"None","serde_derive_internals::attr","`#[serde(untagged)]`",6,null],[4,"Identifier","","Whether this enum represents the fields of a struct or the variants of an enum.",null,null],[13,"No","","It does not.",7,null],[13,"Field","","This enum represents the fields of a struct. All of the variants must be unit variants, except possibly one which is annotated with `#[serde(other)]` and is a newtype variant.",7,null],[13,"Variant","","This enum represents the variants of an enum. All of the variants must be unit variants.",7,null],[4,"Default","","Represents the default to use for a field when deserializing.",null,null],[13,"None","","Field must always be specified because it does not have a default.",8,null],[13,"Default","","The default is given by `std::default::Default::default()`.",8,null],[13,"Path","","The default is given by this function.",8,null],[5,"get_serde_meta_items","","",null,{"inputs":[{"name":"attribute"}],"output":{"generics":["vec"],"name":"option"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize_name","","Return the container name for the container when serializing.",9,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"deserialize_name","","Return the container name for the container when deserializing.",9,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"identifier"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_some","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_ast","","Extract out the `#[serde(...)]` attributes from an item.",10,{"inputs":[{"name":"ctxt"},{"name":"deriveinput"}],"output":{"name":"self"}}],[11,"name","","",10,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"rename_all","","",10,{"inputs":[{"name":"self"}],"output":{"name":"renamerule"}}],[11,"deny_unknown_fields","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",10,{"inputs":[{"name":"self"}],"output":{"name":"default"}}],[11,"ser_bound","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"de_bound","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"tag","","",10,{"inputs":[{"name":"self"}],"output":{"name":"enumtag"}}],[11,"from_type","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["ty"],"name":"option"}}],[11,"into_type","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["ty"],"name":"option"}}],[11,"remote","","",10,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"identifier","","",10,{"inputs":[{"name":"self"}],"output":{"name":"identifier"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_ast","","",11,{"inputs":[{"name":"ctxt"},{"name":"variant"}],"output":{"name":"self"}}],[11,"name","","",11,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"rename_by_rule","","",11,{"inputs":[{"name":"self"},{"name":"renamerule"}],"output":null}],[11,"rename_all","","",11,{"inputs":[{"name":"self"}],"output":{"name":"renamerule"}}],[11,"skip_deserializing","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_serializing","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"other","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"serialize_with","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"deserialize_with","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"default"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"default"}],"output":{"name":"bool"}}],[11,"from_ast","","Extract out the `#[serde(...)]` attributes from a struct field.",12,{"inputs":[{"name":"ctxt"},{"name":"usize"},{"name":"field"},{"generics":["variant"],"name":"option"},{"name":"default"}],"output":{"name":"self"}}],[11,"name","","",12,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"rename_by_rule","","",12,{"inputs":[{"name":"self"},{"name":"renamerule"}],"output":null}],[11,"skip_serializing","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_deserializing","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"skip_serializing_if","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"default","","",12,{"inputs":[{"name":"self"}],"output":{"name":"default"}}],[11,"serialize_with","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"deserialize_with","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"ser_bound","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"de_bound","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"borrowed_lifetimes","","",12,{"inputs":[{"name":"self"}],"output":{"name":"btreeset"}}],[11,"getter","","",12,{"inputs":[{"name":"self"}],"output":{"generics":["path"],"name":"option"}}],[11,"default","serde_derive_internals","",13,{"inputs":[],"output":{"name":"ctxt"}}],[11,"new","","",13,{"inputs":[],"output":{"name":"self"}}],[11,"error","","",13,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"check","","",13,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"result"}}],[11,"drop","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","serde_derive_internals::attr","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"renamerule"}],"output":{"name":"bool"}}],[11,"apply_to_variant","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"apply_to_field","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"name":"result"}}]],"paths":[[3,"Container"],[3,"Variant"],[3,"Field"],[4,"Body"],[4,"Style"],[4,"RenameRule"],[4,"EnumTag"],[4,"Identifier"],[4,"Default"],[3,"Name"],[3,"Container"],[3,"Variant"],[3,"Field"],[3,"Ctxt"]]};
searchIndex["smallvec"] = {"doc":"Small vectors in various sizes. These store a certain number of elements inline, and fall back to the heap for larger allocations.  This can be a useful optimization for improving cache locality and reducing allocator traffic for workloads that fit within the inline buffer.","items":[[3,"Drain","smallvec","An iterator that removes the items from a `SmallVec` and yields them by value.",null,null],[3,"SmallVec","","A `Vec`-like container that can store a small number of elements inline.",null,null],[3,"IntoIter","","An iterator that consumes a `SmallVec` and yields its items by value.",null,null],[8,"VecLike","","Common operations implemented by both `Vec` and `SmallVec`.",null,null],[10,"push","","Append an element to the vector.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[8,"ExtendFromSlice","","Trait to be implemented by a collection that can be extended from a slice",null,null],[10,"extend_from_slice","","Extends a collection from a slice of its element type",1,null],[8,"Array","","Types that can be used as the backing store for a SmallVec",null,null],[16,"Item","","The type of the array's elements.",2,null],[10,"size","","Returns the number of items the array can hold.",2,{"inputs":[],"output":{"name":"usize"}}],[10,"ptr","","Returns a pointer to the first element of the array.",2,null],[10,"ptr_mut","","Returns a mutable pointer to the first element of the array.",2,null],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next_back","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Construct an empty vector",4,{"inputs":[],"output":{"name":"smallvec"}}],[11,"with_capacity","","Construct an empty vector with enough capacity pre-allocated to store at least `n` elements.",4,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_vec","","Construct a new `SmallVec` from a `Vec<A::Item>` without copying elements.",4,{"inputs":[{"name":"vec"}],"output":{"name":"smallvec"}}],[11,"from_buf","","Constructs a new `SmallVec` on the stack from an `A` without copying elements.",4,{"inputs":[{"name":"a"}],"output":{"name":"smallvec"}}],[11,"set_len","","Sets the length of a vector.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"inline_size","","The maximum number of elements this vector can hold inline",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"len","","The number of elements stored in the vector",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector is empty",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"capacity","","The number of items the vector can hold without reallocating",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"spilled","","Returns `true` if the data has spilled into a separate heap-allocated buffer.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Empty the vector and return an iterator over its former contents.",4,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"push","","Append an item to the vector.",4,null],[11,"pop","","Remove an item from the end of the vector and return it, or None if empty.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"grow","","Re-allocate to set the capacity to `new_cap`.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve","","Reserve capacity for `additional` more elements to be inserted.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","Reserve the minumum capacity for `additional` more elements to be inserted.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrink the capacity of the vector as much as possible.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"truncate","","Shorten the vector, keeping the first `len` elements and dropping the rest.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"as_slice","","Extracts a slice containing the entire vector.",4,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",4,null],[11,"swap_remove","","Remove the element at position `index`, replacing it with the last element.",4,null],[11,"clear","","Remove all elements from the vector.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"remove","","Remove and return the element at position `index`, shifting all elements after it to the left.",4,null],[11,"insert","","Insert an element at position `index`, shifting all elements after it to the right.",4,null],[11,"insert_many","","Insert multiple elements at position `index`, shifting all following elements toward the back.",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"i"}],"output":null}],[11,"into_vec","","Convert a SmallVec to a Vec, without reallocating if the SmallVec has already spilled onto the heap.",4,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"retain","","Retains only the elements specified by the predicate.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"dedup","","Removes consecutive duplicate elements.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"dedup_by","","Removes consecutive duplicate elements using the given equality relation.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"dedup_by_key","","Removes consecutive elements that map to the same key.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"from_slice","","Copy the elements from a slice into a new `SmallVec`.",4,null],[11,"insert_from_slice","","Copy elements from a slice into the vector at position `index`, shifting any following elements toward the back.",4,null],[11,"extend_from_slice","","Copy elements from a slice and append them to the vector.",4,null],[11,"deref","","",4,null],[11,"deref_mut","","",4,null],[11,"as_ref","","",4,null],[11,"as_mut","","",4,null],[11,"borrow","","",4,null],[11,"borrow_mut","","",4,null],[11,"write","","",4,null],[11,"write_all","","",4,null],[11,"flush","","",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"from","","",4,null],[11,"from","","",4,{"inputs":[{"name":"vec"}],"output":{"name":"smallvec"}}],[11,"from","","",4,{"inputs":[{"name":"a"}],"output":{"name":"smallvec"}}],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"index","","",4,null],[11,"index_mut","","",4,null],[11,"extend_from_slice","","",4,null],[11,"push","","",4,null],[11,"from_iter","","",4,{"inputs":[{"name":"i"}],"output":{"name":"smallvec"}}],[11,"extend","","",4,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"smallvec"}}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"smallvec"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"smallvec"}],"output":{"name":"ordering"}}],[11,"hash","","",4,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_iter","","",4,null]],"paths":[[8,"VecLike"],[8,"ExtendFromSlice"],[8,"Array"],[3,"Drain"],[3,"SmallVec"],[3,"IntoIter"]]};
searchIndex["syn"] = {"doc":"","items":[[3,"Attribute","syn","Doc-comments are promoted to attributes that have `is_sugared_doc` = true",null,null],[12,"style","","",0,null],[12,"value","","",0,null],[12,"is_sugared_doc","","",0,null],[3,"Field","","A field of a struct or enum variant.",null,null],[12,"ident","","Name of the field, if any.",1,null],[12,"vis","","Visibility of the field.",1,null],[12,"attrs","","Attributes tagged on the field.",1,null],[12,"ty","","Type of the field.",1,null],[3,"Variant","","An enum variant.",null,null],[12,"ident","","Name of the variant.",2,null],[12,"attrs","","Attributes tagged on the variant.",2,null],[12,"data","","Type of variant.",2,null],[12,"discriminant","","Explicit discriminant, e.g. `Foo = 1`",2,null],[3,"Generics","","Represents lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",null,null],[12,"lifetimes","","",3,null],[12,"ty_params","","",3,null],[12,"where_clause","","",3,null],[3,"Lifetime","","",null,null],[12,"ident","","",4,null],[3,"LifetimeDef","","A lifetime definition, e.g. `'a: 'b+'c+'d`",null,null],[12,"attrs","","",5,null],[12,"lifetime","","",5,null],[12,"bounds","","",5,null],[3,"TyParam","","A generic type parameter, e.g. `T: Into<String>`.",null,null],[12,"attrs","","",6,null],[12,"ident","","",6,null],[12,"bounds","","",6,null],[12,"default","","",6,null],[3,"WhereBoundPredicate","","A type bound.",null,null],[12,"bound_lifetimes","","Any lifetimes from a `for` binding",7,null],[12,"bounded_ty","","The type being bounded",7,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",7,null],[3,"WhereClause","","A `where` clause in a definition",null,null],[12,"predicates","","",8,null],[3,"WhereEqPredicate","","An equality predicate (unsupported).",null,null],[12,"lhs_ty","","",9,null],[12,"rhs_ty","","",9,null],[3,"WhereRegionPredicate","","A lifetime predicate.",null,null],[12,"lifetime","","",10,null],[12,"bounds","","",10,null],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Turbofish","","Returned by `TyGenerics::as_turbofish`.",null,null],[3,"TyGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Ident","","",null,null],[3,"ByteStrLit","","",null,null],[12,"value","","",11,null],[12,"style","","",11,null],[3,"FloatLit","","",null,null],[12,"value","","",12,null],[12,"suffix","","",12,null],[3,"IntLit","","",null,null],[12,"value","","",13,null],[12,"suffix","","",13,null],[3,"StrLit","","",null,null],[12,"value","","",14,null],[12,"style","","",14,null],[3,"Delimited","","",null,null],[12,"delim","","The type of delimiter",15,null],[12,"tts","","The delimited sequence of token trees",15,null],[3,"Mac","","Represents a macro invocation. The Path indicates which macro is being invoked, and the vector of token-trees contains the source of the macro invocation.",null,null],[12,"path","","",16,null],[12,"tts","","",16,null],[3,"DeriveInput","","Struct or enum sent to a `proc_macro_derive` macro.",null,null],[12,"ident","","Name of the struct or enum.",17,null],[12,"vis","","Visibility of the struct or enum.",17,null],[12,"attrs","","Attributes tagged on the whole struct or enum.",17,null],[12,"generics","","Generics required to complete the definition.",17,null],[12,"body","","Data within the struct or enum.",17,null],[3,"AngleBracketedParameterData","","A path like `Foo<'a, T>`",null,null],[12,"lifetimes","","The lifetime parameters for this path segment.",18,null],[12,"types","","The type parameters for this path segment, if present.",18,null],[12,"bindings","","Bindings (equality constraints) on associated types, if present.",18,null],[3,"BareFnArg","","An argument in a function type.",null,null],[12,"name","","",19,null],[12,"ty","","",19,null],[3,"BareFnTy","","",null,null],[12,"unsafety","","",20,null],[12,"abi","","",20,null],[12,"lifetimes","","",20,null],[12,"inputs","","",20,null],[12,"output","","",20,null],[12,"variadic","","",20,null],[3,"MutTy","","",null,null],[12,"ty","","",21,null],[12,"mutability","","",21,null],[3,"ParenthesizedParameterData","","A path like `Foo(A,B) -> C`",null,null],[12,"inputs","","`(A, B)`",22,null],[12,"output","","`C`",22,null],[3,"Path","","A \"Path\" is essentially Rust's notion of a name.",null,null],[12,"global","","A `::foo` path, is relative to the crate root rather than current module (like paths in an import).",23,null],[12,"segments","","The segments in the path: the things separated by `::`.",23,null],[3,"PathSegment","","A segment of a path: an identifier, an optional lifetime, and a set of types.",null,null],[12,"ident","","The identifier portion of this path segment.",24,null],[12,"parameters","","Type/lifetime parameters attached to this path. They come in two flavors: `Path<A,B,C>` and `Path(A,B) -> C`. Note that this is more than just simple syntactic sugar; the use of parens affects the region binding rules, so we preserve the distinction.",24,null],[3,"PolyTraitRef","","",null,null],[12,"bound_lifetimes","","The `'a` in `<'a> Foo<&'a T>`",25,null],[12,"trait_ref","","The `Foo<&'a T>` in `<'a> Foo<&'a T>`",25,null],[3,"QSelf","","The explicit Self type in a \"qualified path\". The actual path, including the trait and the associated item, is stored separately. `position` represents the index of the associated item qualified with this Self type.",null,null],[12,"ty","","",26,null],[12,"position","","",26,null],[3,"TypeBinding","","Bind a type to an associated type: `A=Foo`.",null,null],[12,"ident","","",27,null],[12,"ty","","",27,null],[4,"AttrStyle","","Distinguishes between Attributes that decorate items and Attributes that are contained as statements within items. These two cases need to be distinguished for pretty-printing.",null,null],[13,"Outer","","Attribute of the form `#![...]`.",28,null],[13,"Inner","","Attribute of the form `#[...]`.",28,null],[4,"MetaItem","","A compile-time attribute item.",null,null],[13,"Word","","Word meta item.",29,null],[13,"List","","List meta item.",29,null],[13,"NameValue","","Name-value meta item.",29,null],[4,"NestedMetaItem","","Possible values inside of compile-time attribute lists.",null,null],[13,"MetaItem","","A full `MetaItem`.",30,null],[13,"Literal","","A Rust literal.",30,null],[4,"ConstExpr","","",null,null],[13,"Call","","A function call",31,null],[13,"Binary","","A binary operation (For example: `a + b`, `a * b`)",31,null],[13,"Unary","","A unary operation (For example: `!x`, `*x`)",31,null],[13,"Lit","","A literal (For example: `1`, `\"foo\"`)",31,null],[13,"Cast","","A cast (`foo as f64`)",31,null],[13,"Path","","Variable reference, possibly containing `::` and/or type parameters, e.g. foo::bar::.",31,null],[13,"Index","","An indexing operation (`foo[2]`)",31,null],[13,"Paren","","No-op: used solely so we can pretty-print faithfully",31,null],[13,"Other","","If compiling with full support for expression syntax, any expression is allowed",31,null],[4,"VariantData","","Data stored within an enum variant or struct.",null,null],[13,"Struct","","Struct variant, e.g. `Point { x: f64, y: f64 }`.",32,null],[13,"Tuple","","Tuple variant, e.g. `Some(T)`.",32,null],[13,"Unit","","Unit variant, e.g. `None`.",32,null],[4,"Visibility","","Visibility level of an item.",null,null],[13,"Public","","Public, i.e. `pub`.",33,null],[13,"Crate","","Crate-visible, i.e. `pub(crate)`.",33,null],[13,"Restricted","","Restricted, e.g. `pub(some::module)`.",33,null],[13,"Inherited","","Inherited, i.e. private.",33,null],[4,"TraitBoundModifier","","A modifier on a bound, currently this is only used for `?Sized`, where the modifier is `Maybe`. Negative bounds should also be handled here.",null,null],[13,"None","","",34,null],[13,"Maybe","","",34,null],[4,"TyParamBound","","The AST represents all type param bounds as types. `typeck::collect::compute_bounds` matches these against the \"special\" built-in traits (see `middle::lang_items`) and detects Copy, Send and Sync.",null,null],[13,"Trait","","",35,null],[13,"Region","","",35,null],[4,"WherePredicate","","A single predicate in a `where` clause",null,null],[13,"BoundPredicate","","A type binding, e.g. `for<'c> Foo: Send+Clone+'c`",36,null],[13,"RegionPredicate","","A lifetime predicate, e.g. `'a: 'b+'c`",36,null],[13,"EqPredicate","","An equality predicate (unsupported)",36,null],[4,"FloatTy","","",null,null],[13,"F32","","",37,null],[13,"F64","","",37,null],[13,"Unsuffixed","","",37,null],[4,"IntTy","","",null,null],[13,"Isize","","",38,null],[13,"I8","","",38,null],[13,"I16","","",38,null],[13,"I32","","",38,null],[13,"I64","","",38,null],[13,"Usize","","",38,null],[13,"U8","","",38,null],[13,"U16","","",38,null],[13,"U32","","",38,null],[13,"U64","","",38,null],[13,"Unsuffixed","","",38,null],[4,"Lit","","Literal kind.",null,null],[13,"Str","","A string literal (`\"foo\"`)",39,null],[13,"ByteStr","","A byte string (`b\"foo\"`)",39,null],[13,"Byte","","A byte char (`b'f'`)",39,null],[13,"Char","","A character literal (`'a'`)",39,null],[13,"Int","","An integer literal (`1`)",39,null],[13,"Float","","A float literal (`1f64` or `1E10f64` or `1.0E10`)",39,null],[13,"Bool","","A boolean literal",39,null],[4,"StrStyle","","",null,null],[13,"Cooked","","A regular string, like `\"foo\"`",40,null],[13,"Raw","","A raw string, like `r##\"foo\"##`",40,null],[4,"BinOpToken","","",null,null],[13,"Plus","","",41,null],[13,"Minus","","",41,null],[13,"Star","","",41,null],[13,"Slash","","",41,null],[13,"Percent","","",41,null],[13,"Caret","","",41,null],[13,"And","","",41,null],[13,"Or","","",41,null],[13,"Shl","","",41,null],[13,"Shr","","",41,null],[4,"DelimToken","","A delimiter token",null,null],[13,"Paren","","A round parenthesis: `(` or `)`",42,null],[13,"Bracket","","A square bracket: `[` or `]`",42,null],[13,"Brace","","A curly brace: `{` or `}`",42,null],[4,"Token","","",null,null],[13,"Eq","","",43,null],[13,"Lt","","",43,null],[13,"Le","","",43,null],[13,"EqEq","","",43,null],[13,"Ne","","",43,null],[13,"Ge","","",43,null],[13,"Gt","","",43,null],[13,"AndAnd","","",43,null],[13,"OrOr","","",43,null],[13,"Not","","",43,null],[13,"Tilde","","",43,null],[13,"BinOp","","",43,null],[13,"BinOpEq","","",43,null],[13,"At","","",43,null],[13,"Dot","","",43,null],[13,"DotDot","","",43,null],[13,"DotDotDot","","",43,null],[13,"Comma","","",43,null],[13,"Semi","","",43,null],[13,"Colon","","",43,null],[13,"ModSep","","",43,null],[13,"RArrow","","",43,null],[13,"LArrow","","",43,null],[13,"FatArrow","","",43,null],[13,"Pound","","",43,null],[13,"Dollar","","",43,null],[13,"Question","","",43,null],[13,"Literal","","",43,null],[13,"Ident","","",43,null],[13,"Underscore","","",43,null],[13,"Lifetime","","",43,null],[13,"DocComment","","",43,null],[4,"TokenTree","","When the main rust parser encounters a syntax-extension invocation, it parses the arguments to the invocation as a token-tree. This is a very loose structure, such that all sorts of different AST-fragments can be passed to syntax extensions using a uniform type.",null,null],[13,"Token","","A single token",44,null],[13,"Delimited","","A delimited sequence of token trees",44,null],[4,"Body","","Body of a derived struct or enum.",null,null],[13,"Enum","","It's an enum.",45,null],[13,"Struct","","It's a struct.",45,null],[4,"BinOp","","",null,null],[13,"Add","","The `+` operator (addition)",46,null],[13,"Sub","","The `-` operator (subtraction)",46,null],[13,"Mul","","The `*` operator (multiplication)",46,null],[13,"Div","","The `/` operator (division)",46,null],[13,"Rem","","The `%` operator (modulus)",46,null],[13,"And","","The `&&` operator (logical and)",46,null],[13,"Or","","The `||` operator (logical or)",46,null],[13,"BitXor","","The `^` operator (bitwise xor)",46,null],[13,"BitAnd","","The `&` operator (bitwise and)",46,null],[13,"BitOr","","The `|` operator (bitwise or)",46,null],[13,"Shl","","The `<<` operator (shift left)",46,null],[13,"Shr","","The `>>` operator (shift right)",46,null],[13,"Eq","","The `==` operator (equality)",46,null],[13,"Lt","","The `<` operator (less than)",46,null],[13,"Le","","The `<=` operator (less than or equal to)",46,null],[13,"Ne","","The `!=` operator (not equal to)",46,null],[13,"Ge","","The `>=` operator (greater than or equal to)",46,null],[13,"Gt","","The `>` operator (greater than)",46,null],[4,"UnOp","","",null,null],[13,"Deref","","The `*` operator for dereferencing",47,null],[13,"Not","","The `!` operator for logical inversion",47,null],[13,"Neg","","The `-` operator for negation",47,null],[4,"Abi","","",null,null],[13,"Named","","",48,null],[13,"Rust","","",48,null],[4,"FunctionRetTy","","",null,null],[13,"Default","","Return type is not specified.",49,null],[13,"Ty","","Everything else",49,null],[4,"Mutability","","",null,null],[13,"Mutable","","",50,null],[13,"Immutable","","",50,null],[4,"PathParameters","","Parameters of a path segment.",null,null],[13,"AngleBracketed","","The `<'a, A, B, C>` in `foo::bar::baz::<'a, A, B, C>`",51,null],[13,"Parenthesized","","The `(A, B)` and `C` in `Foo(A, B) -> C`",51,null],[4,"Ty","","The different kinds of types recognized by the compiler",null,null],[13,"Slice","","A variable-length array (`[T]`)",52,null],[13,"Array","","A fixed length array (`[T; n]`)",52,null],[13,"Ptr","","A raw pointer (`*const T` or `*mut T`)",52,null],[13,"Rptr","","A reference (`&'a T` or `&'a mut T`)",52,null],[13,"BareFn","","A bare function (e.g. `fn(usize) -> bool`)",52,null],[13,"Never","","The never type (`!`)",52,null],[13,"Tup","","A tuple (`(A, B, C, D, ...)`)",52,null],[13,"Path","","A path (`module::module::...::Type`), optionally \"qualified\", e.g. `<Vec<T> as SomeTrait>::SomeType`.",52,null],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",52,null],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",52,null],[13,"Paren","","No-op; kept solely so that we can pretty-print faithfully",52,null],[13,"Infer","","TyKind::Infer means the type should be inferred instead of it having been specified. This can appear anywhere in a type.",52,null],[13,"Mac","","A macro in the type position.",52,null],[4,"Unsafety","","",null,null],[13,"Unsafe","","",53,null],[13,"Normal","","",53,null],[5,"parse_derive_input","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["deriveinput","string"],"name":"result"}}],[5,"parse_type","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["ty","string"],"name":"result"}}],[5,"parse_path","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["path","string"],"name":"result"}}],[5,"parse_where_clause","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["whereclause","string"],"name":"result"}}],[5,"parse_token_trees","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["vec","string"],"name":"result"}}],[5,"parse_ident","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["ident","string"],"name":"result"}}],[5,"parse_ty_param_bound","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["typarambound","string"],"name":"result"}}],[5,"parse_outer_attr","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["attribute","string"],"name":"result"}}],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",29,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",30,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"name","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"attrstyle"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"attrstyle"}],"output":{"name":"bool"}}],[11,"hash","","",28,null],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"metaitem"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"bool"}}],[11,"hash","","",29,null],[11,"name","","Name of the item.",29,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"nestedmetaitem"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"nestedmetaitem"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"nestedmetaitem"}],"output":{"name":"bool"}}],[11,"hash","","",30,null],[11,"to_tokens","","",31,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"constexpr"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":{"name":"bool"}}],[11,"hash","","",31,null],[11,"to_tokens","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",32,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",33,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"variant"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"variantdata"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"hash","","",32,null],[11,"fields","","Slice containing the fields stored in the variant.",32,null],[11,"fields_mut","","Mutable slice containing the fields stored in the variant.",32,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"visibility"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"hash","","",33,null],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",54,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",55,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",56,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",4,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",5,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",6,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",35,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",8,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",36,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",7,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",10,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",9,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"generics"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"generics"}}],[11,"hash","","",3,null],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",3,null],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like `::<X, Y>`.",55,{"inputs":[{"name":"self"}],"output":{"name":"turbofish"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"new","","",4,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"new","","",5,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"typaram"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"from","","",6,{"inputs":[{"name":"ident"}],"output":{"name":"self"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"typarambound"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"hash","","",35,null],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"traitboundmodifier"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"traitboundmodifier"}],"output":{"name":"bool"}}],[11,"hash","","",34,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"whereclause"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"whereclause"}}],[11,"hash","","",8,null],[11,"none","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"wherepredicate"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"hash","","",36,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"whereboundpredicate"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",7,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"whereregionpredicate"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",10,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"whereeqpredicate"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",9,null],[11,"to_tokens","","",57,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"hash","","",57,null],[11,"cmp","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"le","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"gt","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"ge","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"new","","",57,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",57,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",57,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",57,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",57,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"as_ref","","",57,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"to_tokens","","",39,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"lit"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"hash","","",39,null],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"strstyle"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"hash","","",40,null],[11,"from","","",39,{"inputs":[{"name":"string"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"str"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"lit"}}],[11,"from","","",39,null],[11,"from","","",39,{"inputs":[{"name":"char"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"bool"}],"output":{"name":"lit"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"intty"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"intty"}],"output":{"name":"bool"}}],[11,"hash","","",38,null],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"floatty"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"floatty"}],"output":{"name":"bool"}}],[11,"hash","","",37,null],[11,"from","","",39,{"inputs":[{"name":"isize"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"i8"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"i16"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"i32"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"i64"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"usize"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"u8"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"u16"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"u32"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"u64"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"f32"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"f64"}],"output":{"name":"lit"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"strlit"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bytestrlit"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"intlit"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"floatlit"}}],[11,"to_tokens","","",16,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",44,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",15,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",43,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",41,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"mac"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"bool"}}],[11,"hash","","",16,null],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"tokentree"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"hash","","",44,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"delimited"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"hash","","",43,null],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"binoptoken"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"binoptoken"}],"output":{"name":"bool"}}],[11,"hash","","",41,null],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"delimtoken"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"delimtoken"}],"output":{"name":"bool"}}],[11,"hash","","",42,null],[11,"to_tokens","","",17,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"deriveinput"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":{"name":"bool"}}],[11,"hash","","",17,null],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"body"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"hash","","",45,null],[11,"op","","",46,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"assign_op","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",46,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"op","","",47,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_tokens","","",47,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"binop"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"binop"}],"output":{"name":"bool"}}],[11,"hash","","",46,null],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"unop"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"unop"}],"output":{"name":"bool"}}],[11,"hash","","",47,null],[11,"to_tokens","","",52,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",50,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",23,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",24,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",51,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",18,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",27,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",22,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",25,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",20,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",19,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",53,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",48,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"hash","","",52,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"mutty"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"hash","","",21,null],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"mutability"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"mutability"}],"output":{"name":"bool"}}],[11,"hash","","",50,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"hash","","",23,null],[11,"from","","",23,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"pathsegment"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"hash","","",24,null],[11,"from","","",24,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"pathparameters"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"hash","","",51,null],[11,"none","","",51,{"inputs":[],"output":{"name":"self"}}],[11,"is_empty","","",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"anglebracketedparameterdata"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"anglebracketedparameterdata"}}],[11,"hash","","",18,null],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"typebinding"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"hash","","",27,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"parenthesizedparameterdata"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"hash","","",22,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"polytraitref"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"hash","","",25,null],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"qself"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"hash","","",26,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"barefnty"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"hash","","",20,null],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"unsafety"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"unsafety"}],"output":{"name":"bool"}}],[11,"hash","","",53,null],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"abi"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"hash","","",48,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"barefnarg"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":{"name":"bool"}}],[11,"hash","","",19,null],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"functionretty"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"hash","","",49,null],[0,"visit","","AST walker. Each overridden visit method has full control over what happens with its node, it can do its own traversal of the node's children, call `visit::walk_*` to apply the default traversal algorithm, or prevent deeper traversal by doing nothing.",null,null],[5,"walk_opt_ident","syn::visit","",null,{"inputs":[{"name":"v"},{"name":"option"}],"output":null}],[5,"walk_lifetime_def","","",null,{"inputs":[{"name":"v"},{"name":"lifetimedef"}],"output":null}],[5,"walk_poly_trait_ref","","",null,{"inputs":[{"name":"v"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[5,"walk_derive_input","","",null,{"inputs":[{"name":"v"},{"name":"deriveinput"}],"output":null}],[5,"walk_variant","","",null,{"inputs":[{"name":"v"},{"name":"variant"},{"name":"generics"}],"output":null}],[5,"walk_ty","","",null,{"inputs":[{"name":"v"},{"name":"ty"}],"output":null}],[5,"walk_path","","",null,{"inputs":[{"name":"v"},{"name":"path"}],"output":null}],[5,"walk_path_segment","","",null,{"inputs":[{"name":"v"},{"name":"pathsegment"}],"output":null}],[5,"walk_path_parameters","","",null,{"inputs":[{"name":"v"},{"name":"pathparameters"}],"output":null}],[5,"walk_assoc_type_binding","","",null,{"inputs":[{"name":"v"},{"name":"typebinding"}],"output":null}],[5,"walk_ty_param_bound","","",null,{"inputs":[{"name":"v"},{"name":"typarambound"}],"output":null}],[5,"walk_generics","","",null,{"inputs":[{"name":"v"},{"name":"generics"}],"output":null}],[5,"walk_fn_ret_ty","","",null,{"inputs":[{"name":"v"},{"name":"functionretty"}],"output":null}],[5,"walk_variant_data","","",null,{"inputs":[{"name":"v"},{"name":"variantdata"}],"output":null}],[5,"walk_field","","",null,{"inputs":[{"name":"v"},{"name":"field"}],"output":null}],[5,"walk_const_expr","","",null,{"inputs":[{"name":"v"},{"name":"constexpr"}],"output":null}],[5,"walk_mac","","",null,{"inputs":[{"name":"v"},{"name":"mac"}],"output":null}],[8,"Visitor","","Each method of the Visitor trait is a hook to be potentially overridden.  Each method's default implementation recursively visits the substructure of the input via the corresponding `walk` method; e.g. the `visit_mod` method by default calls `visit::walk_mod`.",null,null],[11,"visit_ident","","",58,{"inputs":[{"name":"self"},{"name":"ident"}],"output":null}],[11,"visit_derive_input","","",58,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":null}],[11,"visit_ty","","",58,{"inputs":[{"name":"self"},{"name":"ty"}],"output":null}],[11,"visit_generics","","",58,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"visit_ty_param_bound","","",58,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":null}],[11,"visit_poly_trait_ref","","",58,{"inputs":[{"name":"self"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[11,"visit_variant_data","","",58,{"inputs":[{"name":"self"},{"name":"variantdata"},{"name":"ident"},{"name":"generics"}],"output":null}],[11,"visit_field","","",58,{"inputs":[{"name":"self"},{"name":"field"}],"output":null}],[11,"visit_variant","","",58,{"inputs":[{"name":"self"},{"name":"variant"},{"name":"generics"}],"output":null}],[11,"visit_lifetime","","",58,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":null}],[11,"visit_lifetime_def","","",58,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":null}],[11,"visit_path","","",58,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"visit_path_segment","","",58,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":null}],[11,"visit_path_parameters","","",58,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":null}],[11,"visit_assoc_type_binding","","",58,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":null}],[11,"visit_attribute","","",58,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"visit_fn_ret_ty","","",58,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":null}],[11,"visit_const_expr","","",58,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":null}],[11,"visit_lit","","",58,{"inputs":[{"name":"self"},{"name":"lit"}],"output":null}],[11,"visit_mac","","",58,{"inputs":[{"name":"self"},{"name":"mac"}],"output":null}],[0,"parse","syn","This module contains a set of exported nom parsers which can be used to parse custom grammars when used alongside the `synom` crate.",null,null],[4,"IResult","syn::parse","The result of a parser.",null,null],[13,"Done","","Parsing succeeded. The first field contains the rest of the unparsed data and the second field contains the parse result.",59,null],[13,"Error","","Parsing failed.",59,null],[5,"lit","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","lit"],"name":"iresult"}}],[5,"string","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","strlit"],"name":"iresult"}}],[5,"byte_string","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","bytestrlit"],"name":"iresult"}}],[5,"byte","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","u8"],"name":"iresult"}}],[5,"character","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","char"],"name":"iresult"}}],[5,"float","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","floatlit"],"name":"iresult"}}],[5,"int","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","intlit"],"name":"iresult"}}],[5,"boolean","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","bool"],"name":"iresult"}}],[5,"ty","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","ty"],"name":"iresult"}}],[5,"path","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","path"],"name":"iresult"}}],[5,"tt","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","tokentree"],"name":"iresult"}}],[5,"ident","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","ident"],"name":"iresult"}}],[5,"lifetime","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","lifetime"],"name":"iresult"}}],[11,"expect","","Unwraps the result, asserting the the parse is complete. Panics with a message based on the given string if the parse failed or is incomplete.",59,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"o"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"iresult"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}]],"paths":[[3,"Attribute"],[3,"Field"],[3,"Variant"],[3,"Generics"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"TyParam"],[3,"WhereBoundPredicate"],[3,"WhereClause"],[3,"WhereEqPredicate"],[3,"WhereRegionPredicate"],[3,"ByteStrLit"],[3,"FloatLit"],[3,"IntLit"],[3,"StrLit"],[3,"Delimited"],[3,"Mac"],[3,"DeriveInput"],[3,"AngleBracketedParameterData"],[3,"BareFnArg"],[3,"BareFnTy"],[3,"MutTy"],[3,"ParenthesizedParameterData"],[3,"Path"],[3,"PathSegment"],[3,"PolyTraitRef"],[3,"QSelf"],[3,"TypeBinding"],[4,"AttrStyle"],[4,"MetaItem"],[4,"NestedMetaItem"],[4,"ConstExpr"],[4,"VariantData"],[4,"Visibility"],[4,"TraitBoundModifier"],[4,"TyParamBound"],[4,"WherePredicate"],[4,"FloatTy"],[4,"IntTy"],[4,"Lit"],[4,"StrStyle"],[4,"BinOpToken"],[4,"DelimToken"],[4,"Token"],[4,"TokenTree"],[4,"Body"],[4,"BinOp"],[4,"UnOp"],[4,"Abi"],[4,"FunctionRetTy"],[4,"Mutability"],[4,"PathParameters"],[4,"Ty"],[4,"Unsafety"],[3,"ImplGenerics"],[3,"TyGenerics"],[3,"Turbofish"],[3,"Ident"],[8,"Visitor"],[4,"IResult"]]};
searchIndex["synom"] = {"doc":"Adapted from `nom` by removing the `IResult::Incomplete` variant which:","items":[[4,"IResult","synom","The result of a parser.",null,null],[13,"Done","","Parsing succeeded. The first field contains the rest of the unparsed data and the second field contains the parse result.",0,null],[13,"Error","","Parsing failed.",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"iresult"}}],[11,"expect","","Unwraps the result, asserting the the parse is complete. Panics with a message based on the given string if the parse failed or is incomplete.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"o"}}],[14,"punct","","Parse a piece of punctuation like \"+\" or \"+=\".",null,null],[14,"keyword","","Parse a keyword like \"fn\" or \"struct\".",null,null],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",null,null],[14,"opt_vec","","Turn a failed parse into an empty vector. The argument parser must itself return a vector.",null,null],[14,"epsilon","","Parses nothing and always succeeds.",null,null],[14,"separated_list","","Zero or more values separated by some separator. Does not allow a trailing seperator.",null,null],[14,"terminated_list","","Zero or more values separated by some separator. A trailing separator is allowed.",null,null],[14,"named","","Define a function from a parser combination.",null,null],[14,"call","","Invoke the given parser function with the passed in arguments.",null,null],[14,"map","","Transform the result of a parser by applying a function or closure.",null,null],[14,"not","","Parses successfully if the given parser fails to parse. Does not consume any of the input.",null,null],[14,"cond","","Conditionally execute the given parser.",null,null],[14,"cond_reduce","","Fail to parse if condition is false, otherwise parse the given parser.",null,null],[14,"preceded","","Parse two things, returning the value of the second.",null,null],[14,"terminated","","Parse two things, returning the value of the first.",null,null],[14,"many0","","Parse zero or more values using the given parser.",null,null],[14,"peek","","Parse a value without consuming it from the input data.",null,null],[14,"take_until","","Parse the part of the input up to but not including the given string. Fail to parse if the given string is not present in the input.",null,null],[14,"tag","","Parse the given string from exactly the current position in the input. You almost always want `punct!` or `keyword!` instead of this.",null,null],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",null,null],[14,"value","","Produce the given value without parsing anything. Useful as an argument to `switch!`.",null,null],[14,"delimited","","Value surrounded by a pair of delimiters.",null,null],[14,"separated_nonempty_list","","One or more values separated by some separator. Does not allow a trailing separator.",null,null],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",null,null],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",null,null],[14,"do_parse","","Run a series of parsers, one after another, optionally assigning the results a name. Fail if any of the parsers fails.",null,null]],"paths":[[4,"IResult"]]};
searchIndex["thread_profiler"] = {"doc":"","items":[[5,"write_profile","thread_profiler","",null,{"inputs":[{"name":"str"}],"output":null}],[5,"register_thread_with_profiler","","",null,{"inputs":[{"name":"string"}],"output":null}],[14,"profile_scope","","",null,null]],"paths":[]};
searchIndex["time"] = {"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",null,null],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library implementation",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where nanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month, day, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time value, including any adjustment for Daylight Saving Time. This is the number of seconds east of UTC. For example, for U.S. Pacific Daylight Time, the value is `-7*60*60 = -25200`.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 109 - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["tm","parseerror"],"name":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and nanoseconds since 1970-01-01T00:00:00Z.",null,{"inputs":[],"output":{"name":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter in nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter in seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}],[5,"tzset","","",null,{"inputs":[],"output":null}],[5,"empty_tm","","",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"inputs":[],"output":{"name":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"inputs":[{"name":"str"},{"name":"tm"}],"output":{"generics":["string","parseerror"],"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",4,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 263 microseconds in either direction).",4,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 263 nanoseconds in either direction).",4,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["duration"],"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["duration"],"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",4,{"inputs":[{"name":"stdduration"}],"output":{"generics":["duration","outofrangeerror"],"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",4,{"inputs":[{"name":"self"}],"output":{"generics":["stdduration","outofrangeerror"],"name":"result"}}],[11,"neg","","",4,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"add","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"div","","",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"outofrangeerror"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"new","","",0,{"inputs":[{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"duration"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"precisetime"}}],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",6,{"inputs":[],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of `self` to the value of `later`.",6,{"inputs":[{"name":"self"},{"name":"precisetime"}],"output":{"name":"duration"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"steadytime"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",7,{"inputs":[],"output":{"name":"steadytime"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"add","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"ordering"}}],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"to_local","","Convert time to the local timezone",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"to_utc","","Convert time to the UTC",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C, in the local timezone.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"strftime","","Formats the time according to the format string.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["tmfmt","parseerror"],"name":"result"}}],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is compatible with ISO 8601.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex["unicode_xid"] = {"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is based on.",null,null],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",null,null],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[8,"UnicodeXID"]]};
searchIndex["unreachable"] = {"doc":"unreachable","items":[[5,"unreachable","unreachable","Hint to the optimizer that any code path which calls this function is statically unreachable and can be removed.",null,null],[8,"UncheckedOptionExt","","An extension trait for `Option<T>` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap","","Get the value out of this Option without checking for None.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"unchecked_unwrap_none","","Assert that this Option is a None to the optimizer.",0,{"inputs":[{"name":"self"}],"output":null}],[8,"UncheckedResultExt","","An extension trait for `Result<T, E>` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap_ok","","Get the value out of this Result without checking for Err.",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"unchecked_unwrap_err","","Get the error out of this Result without checking for Ok.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}]],"paths":[[8,"UncheckedOptionExt"],[8,"UncheckedResultExt"]]};
searchIndex["void"] = {"doc":"Void","items":[[4,"Void","void","The empty type for cases which can't occur.",null,null],[5,"unreachable","","A safe version of `intrinsincs::unreachable`.",null,null],[8,"ResultVoidExt","","Extensions to `Result<T, Void>`",null,null],[10,"void_unwrap","","Get the value out of a wrapper.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"ResultVoidErrExt","","Extensions to `Result<Void, E>`",null,null],[10,"void_unwrap_err","","Get the error out of a wrapper.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"void"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["ordering"],"name":"option"}}]],"paths":[[8,"ResultVoidExt"],[8,"ResultVoidErrExt"],[4,"Void"]]};
searchIndex["webrender"] = {"doc":"A GPU based renderer for the web.","items":[[0,"channel","webrender::api","",null,null],[3,"Payload","webrender::api::channel","",null,null],[12,"epoch","","An epoch used to get the proper payload for a pipeline id frame request.",0,null],[12,"pipeline_id","","A pipeline id to key the payload with, along with the epoch.",0,null],[12,"display_list_data","","",0,null],[8,"PayloadSenderHelperMethods","","A helper to handle the interface difference between `IpcBytesSender` and `Sender<Vec<u8>>`.",null,null],[10,"send_payload","","",1,{"inputs":[{"name":"self"},{"name":"payload"}],"output":{"generics":["error"],"name":"result"}}],[8,"PayloadReceiverHelperMethods","","",null,null],[10,"recv_payload","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["payload","error"],"name":"result"}}],[6,"PayloadSender","","Handles the channel implementation when in process channels are enabled.",null,null],[6,"PayloadReceiver","","",null,null],[3,"MsgReceiver","","",null,null],[3,"MsgSender","","",null,null],[5,"payload_channel","","",null,{"inputs":[],"output":{"generics":["error"],"name":"result"}}],[5,"msg_channel","","",null,{"inputs":[],"output":{"generics":["error"],"name":"result"}}],[3,"BoxShadowDisplayItem","webrender::api","",null,null],[12,"box_bounds","","",3,null],[12,"offset","","",3,null],[12,"color","","",3,null],[12,"blur_radius","","",3,null],[12,"spread_radius","","",3,null],[12,"border_radius","","",3,null],[12,"clip_mode","","",3,null],[3,"ScrollLayerPixel","","Geometry in a layer's scrollable parent coordinate space (logical pixels).",null,null],[3,"BlobImageRequest","","",null,null],[12,"key","","",4,null],[12,"tile","","",4,null],[4,"BorderDetails","","",null,null],[13,"Normal","","",5,null],[13,"Image","","",5,null],[13,"Gradient","","",5,null],[13,"RadialGradient","","",5,null],[3,"FontInstanceOptions","","",null,null],[12,"render_mode","","",6,null],[12,"subpx_dir","","",6,null],[12,"flags","","",6,null],[12,"bg_color","","When bg_color.a is != 0 and render_mode is FontRenderMode::Subpixel, the text will be rendered with bg_color.r/g/b as an opaque estimated background color.",6,null],[3,"AddImage","","",null,null],[12,"key","","",7,null],[12,"descriptor","","",7,null],[12,"data","","",7,null],[12,"tiling","","",7,null],[3,"ResourceId","","",null,null],[12,"0","","",8,null],[6,"ScrollToWorldTransform","","",null,null],[3,"ZoomFactor","","Represents a zoom factor.",null,null],[3,"HitTestResult","","",null,null],[12,"items","","",9,null],[3,"IdNamespace","","",null,null],[12,"0","","",10,null],[3,"YuvImageDisplayItem","","",null,null],[12,"yuv_data","","",11,null],[12,"color_space","","",11,null],[12,"image_rendering","","",11,null],[4,"RepeatMode","","",null,null],[13,"Stretch","","",12,null],[13,"Repeat","","",12,null],[13,"Round","","",12,null],[13,"Space","","",12,null],[3,"PipelineId","","From the point of view of WR, `PipelineId` is completely opaque and generic as long as it's clonable, serializable, comparable, and hashable.",null,null],[12,"0","","",13,null],[12,"1","","",13,null],[4,"AddFont","","",null,null],[13,"Raw","","",14,null],[13,"Native","","",14,null],[3,"RenderApi","","",null,null],[6,"TileOffset","","",null,null],[4,"YuvData","","",null,null],[13,"NV12","","",15,null],[13,"PlanarYCbCr","","",15,null],[13,"InterleavedYCbCr","","",15,null],[6,"LayerPrimitiveInfo","","",null,null],[6,"LayoutPoint","","",null,null],[3,"ImageDescriptor","","",null,null],[12,"format","","",16,null],[12,"width","","",16,null],[12,"height","","",16,null],[12,"stride","","",16,null],[12,"offset","","",16,null],[12,"is_opaque","","",16,null],[6,"WorldVector2D","","",null,null],[3,"BorderSide","","",null,null],[12,"color","","",17,null],[12,"style","","",17,null],[6,"DevicePixelScale","","Scaling ratio from world pixels to device pixels.",null,null],[4,"ScrollEventPhase","","",null,null],[13,"Start","","The user started scrolling.",18,null],[13,"Move","","The user performed a scroll. The Boolean flag indicates whether the user's fingers are down, if a touchpad is in use. (If false, the event is a touchpad fling.)",18,null],[13,"End","","The user ended scrolling.",18,null],[3,"AuxIter","","",null,null],[4,"BorderRadiusKind","","",null,null],[13,"Uniform","","",19,null],[13,"NonUniform","","",19,null],[3,"GlyphKey","","",null,null],[12,"index","","",20,null],[12,"subpixel_offset","","",20,null],[6,"DeviceRect","","",null,null],[6,"LayerToWorldTransform","","",null,null],[6,"DeviceIntRect","","",null,null],[6,"BlobImageData","","",null,null],[3,"ExternalEvent","","An opaque pointer-sized value.",null,null],[6,"LayoutPixel","","Geometry in a stacking context's local coordinate space (logical pixels).",null,null],[6,"LayerVector2D","","",null,null],[3,"ImageMask","","",null,null],[12,"image","","",21,null],[12,"rect","","",21,null],[12,"repeat","","",21,null],[4,"TransformStyle","","",null,null],[13,"Flat","","",22,null],[13,"Preserve3D","","",22,null],[3,"NinePatchDescriptor","","",null,null],[12,"width","","",23,null],[12,"height","","",23,null],[12,"slice","","",23,null],[3,"BorderDisplayItem","","",null,null],[12,"widths","","",24,null],[12,"details","","",24,null],[3,"Tiles","","Offset in number of tiles.",null,null],[6,"WorldVector3D","","",null,null],[4,"ExternalImageType","","",null,null],[13,"Texture2DHandle","","",25,null],[13,"Texture2DArrayHandle","","",25,null],[13,"TextureRectHandle","","",25,null],[13,"TextureExternalHandle","","",25,null],[13,"ExternalBuffer","","",25,null],[3,"AddFontInstance","","",null,null],[12,"key","","",26,null],[12,"font_key","","",26,null],[12,"glyph_size","","",26,null],[12,"options","","",26,null],[12,"platform_options","","",26,null],[12,"variations","","",26,null],[8,"BlobImageRenderer","","",null,null],[10,"add","","",27,null],[10,"update","","",27,null],[10,"delete","","",27,null],[10,"request","","",27,null],[10,"resolve","","",27,{"inputs":[{"name":"self"},{"name":"blobimagerequest"}],"output":{"generics":["rasterizedblobimage","blobimageerror"],"name":"result"}}],[10,"delete_font","","",27,null],[10,"delete_font_instance","","",27,null],[6,"DeviceIntSize","","",null,null],[3,"Gradient","","",null,null],[12,"start_point","","",28,null],[12,"end_point","","",28,null],[12,"extend_mode","","",28,null],[6,"ScrollLayerRect","","",null,null],[3,"BlobImageDescriptor","","",null,null],[12,"width","","",29,null],[12,"height","","",29,null],[12,"offset","","",29,null],[12,"format","","",29,null],[3,"ComplexClipRegion","","",null,null],[12,"rect","","The boundaries of the rectangle.",30,null],[12,"radii","","Border radii of this rectangle.",30,null],[12,"mode","","Whether we are clipping inside or outside the region.",30,null],[6,"LayerPoint3D","","",null,null],[6,"LayoutVector2D","","",null,null],[3,"GlyphOptions","","",null,null],[12,"render_mode","","",31,null],[3,"DevicePixel","","Geometry in the coordinate system of the render target (screen or intermediate surface) in physical pixels.",null,null],[4,"ScrollClamping","","",null,null],[13,"ToContentBounds","","",32,null],[13,"NoClamping","","",32,null],[6,"LayoutPrimitiveInfo","","",null,null],[4,"FontTemplate","","",null,null],[13,"Raw","","",33,null],[13,"Native","","",33,null],[3,"RadialGradientDisplayItem","","",null,null],[12,"gradient","","",34,null],[12,"tile_size","","",34,null],[12,"tile_spacing","","",34,null],[4,"YuvFormat","","",null,null],[13,"NV12","","",35,null],[13,"PlanarYCbCr","","",35,null],[13,"InterleavedYCbCr","","",35,null],[6,"ScrollLayerSize","","",null,null],[3,"PropertyBindingId","","",null,null],[3,"Shadow","","",null,null],[12,"offset","","",36,null],[12,"color","","",36,null],[12,"blur_radius","","",36,null],[3,"PushStackingContextDisplayItem","","",null,null],[12,"stacking_context","","",37,null],[6,"LayerPoint","","",null,null],[6,"WorldRect","","",null,null],[4,"FontHinting","","",null,null],[13,"None","","",38,null],[13,"Mono","","",38,null],[13,"Light","","",38,null],[13,"Normal","","",38,null],[13,"LCD","","",38,null],[6,"BlobImageResult","","",null,null],[4,"ImageData","","",null,null],[13,"Raw","","",39,null],[13,"Blob","","",39,null],[13,"External","","",39,null],[6,"TileSize","","",null,null],[6,"WorldToLayerTransform","","",null,null],[3,"RectangleDisplayItem","","",null,null],[12,"color","","",40,null],[4,"PropertyBinding","","A binding property can either be a specific value (the normal, non-animated case) or point to a binding location to fetch the current value from.",null,null],[13,"Value","","",41,null],[13,"Binding","","",41,null],[3,"LayerPixel","","Geometry in a layer's local coordinate space (logical pixels).",null,null],[6,"LayoutVector3D","","",null,null],[3,"GradientDisplayItem","","",null,null],[12,"gradient","","",42,null],[12,"tile_size","","",42,null],[12,"tile_spacing","","",42,null],[4,"DebugCommand","","",null,null],[13,"EnableProfiler","","Display the frame profiler on screen.",43,null],[13,"EnableTextureCacheDebug","","Display all texture cache pages on screen.",43,null],[13,"EnableRenderTargetDebug","","Display intermediate render targets on screen.",43,null],[13,"EnableAlphaRectsDebug","","Display alpha primitive rects.",43,null],[13,"EnableGpuTimeQueries","","Display GPU timing results.",43,null],[13,"EnableGpuSampleQueries","","Display GPU overdraw results",43,null],[13,"FetchDocuments","","Fetch current documents and display lists.",43,null],[13,"FetchPasses","","Fetch current passes and batches.",43,null],[13,"FetchClipScrollTree","","Fetch clip-scroll tree.",43,null],[13,"FetchRenderTasks","","Fetch render tasks.",43,null],[13,"FetchScreenshot","","Fetch screenshot.",43,null],[13,"SaveCapture","","Save a capture of all the documents state.",43,null],[13,"LoadCapture","","Load a capture of all the documents state.",43,null],[13,"EnableDualSourceBlending","","Configure if dual-source blending is used, if available.",43,null],[3,"WorldPixel","","Geometry in the document's coordinate space (logical pixels).",null,null],[6,"ItemTag","","A tag that can be used to identify items during hit testing. If the tag is missing then the item doesn't take part in hit testing at all. This is composed of two numbers. In Servo, the first is an identifier while the second is used to select the cursor that should be used during mouse movement. In Gecko, the first is a scrollframe identifier, while the second is used to store various flags that APZ needs to properly process input events.",null,null],[6,"LayerRectAu","","",null,null],[3,"LineDisplayItem","","",null,null],[12,"orientation","","",44,null],[12,"wavy_line_thickness","","",44,null],[12,"color","","",44,null],[12,"style","","",44,null],[6,"DeviceIntLength","","",null,null],[6,"GlyphIndex","","",null,null],[3,"ClipDisplayItem","","",null,null],[12,"id","","",45,null],[12,"image_mask","","",45,null],[3,"GradientBorder","","",null,null],[12,"gradient","","",46,null],[12,"outset","","",46,null],[3,"ImageBorder","","",null,null],[12,"image_key","","",47,null],[12,"patch","","",47,null],[12,"fill","","Controls whether the center of the 9 patch image is rendered or ignored.",47,null],[12,"outset","","",47,null],[12,"repeat_horizontal","","",47,null],[12,"repeat_vertical","","",47,null],[3,"Epoch","","",null,null],[12,"0","","",48,null],[5,"as_scroll_parent_vector","","",null,{"inputs":[{"name":"typedvector2d"}],"output":{"generics":["f32","scrolllayerpixel"],"name":"typedvector2d"}}],[6,"WorldSize","","",null,null],[6,"DisplayItem","","",null,null],[3,"FontInstanceFlags","","",null,null],[4,"YuvColorSpace","","",null,null],[13,"Rec601","","",49,null],[13,"Rec709","","",49,null],[3,"FontInstancePlatformOptions","","",null,null],[12,"lcd_filter","","",50,null],[12,"hinting","","",50,null],[3,"ImageKey","","",null,null],[12,"0","","",51,null],[12,"1","","",51,null],[3,"DisplayItemRef","","",null,null],[6,"LayerPointAu","","",null,null],[4,"SubpixelDirection","","",null,null],[13,"None","","",52,null],[13,"Horizontal","","",52,null],[13,"Vertical","","",52,null],[3,"ResourceUpdates","","The resource updates for a given transaction (they must be applied in the same frame).",null,null],[12,"updates","","",53,null],[3,"PropertyBindingKey","","A unique key that is used for connecting animated property values to bindings in the display list.",null,null],[12,"id","","",54,null],[4,"MixBlendMode","","",null,null],[13,"Normal","","",55,null],[13,"Multiply","","",55,null],[13,"Screen","","",55,null],[13,"Overlay","","",55,null],[13,"Darken","","",55,null],[13,"Lighten","","",55,null],[13,"ColorDodge","","",55,null],[13,"ColorBurn","","",55,null],[13,"HardLight","","",55,null],[13,"SoftLight","","",55,null],[13,"Difference","","",55,null],[13,"Exclusion","","",55,null],[13,"Hue","","",55,null],[13,"Saturation","","",55,null],[13,"Color","","",55,null],[13,"Luminosity","","",55,null],[6,"DevicePoint","","",null,null],[3,"DisplayListBuilder","","",null,null],[12,"data","","",56,null],[12,"pipeline_id","","",56,null],[4,"LineStyle","","",null,null],[13,"Solid","","",57,null],[13,"Dotted","","",57,null],[13,"Dashed","","",57,null],[13,"Wavy","","",57,null],[3,"GlyphDimensions","","",null,null],[12,"left","","",58,null],[12,"top","","",58,null],[12,"width","","",58,null],[12,"height","","",58,null],[12,"advance","","",58,null],[6,"WorldPoint","","",null,null],[3,"BuiltDisplayList","","A display list.",null,null],[4,"ScrollLocation","","",null,null],[13,"Delta","","Scroll by a certain amount.",59,null],[13,"Start","","Scroll to very top of element.",59,null],[13,"End","","Scroll to very bottom of element.",59,null],[3,"StickyOffsetBounds","","The minimum and maximum allowable offset for a sticky frame in a single dimension.",null,null],[12,"min","","The minimum offset for this frame, typically a negative value, which specifies how far in the negative direction the sticky frame can offset its contents in this dimension.",60,null],[12,"max","","The maximum offset for this frame, typically a positive value, which specifies how far in the positive direction the sticky frame can offset its contents in this dimension.",60,null],[3,"FontKey","","",null,null],[12,"0","","",61,null],[12,"1","","",61,null],[4,"SubpixelOffset","","",null,null],[13,"Zero","","",62,null],[13,"Quarter","","",62,null],[13,"Half","","",62,null],[13,"ThreeQuarters","","",62,null],[4,"ExtendMode","","",null,null],[13,"Clamp","","",63,null],[13,"Repeat","","",63,null],[6,"LayerTransform","","",null,null],[4,"ResourceUpdate","","",null,null],[13,"AddImage","","",64,null],[13,"UpdateImage","","",64,null],[13,"DeleteImage","","",64,null],[13,"AddFont","","",64,null],[13,"DeleteFont","","",64,null],[13,"AddFontInstance","","",64,null],[13,"DeleteFontInstance","","",64,null],[3,"ScrollFrameDisplayItem","","",null,null],[12,"id","","",65,null],[12,"image_mask","","",65,null],[12,"scroll_sensitivity","","",65,null],[6,"LayerVector3D","","",null,null],[3,"ItemRange","","",null,null],[4,"ImageFormat","","",null,null],[13,"Invalid","","",66,null],[13,"A8","","",66,null],[13,"BGRA8","","",66,null],[13,"RGBAF32","","",66,null],[13,"RG8","","",66,null],[4,"ScrollPolicy","","",null,null],[13,"Scrollable","","",67,null],[13,"Fixed","","",67,null],[3,"RadialGradient","","",null,null],[12,"start_center","","",68,null],[12,"start_radius","","",68,null],[12,"end_center","","",68,null],[12,"end_radius","","",68,null],[12,"ratio_xy","","",68,null],[12,"extend_mode","","",68,null],[6,"PipelineSourceId","","This type carries no valuable semantics for WR. However, it reflects the fact that clients (Servo) may generate pipelines by different semi-independent sources. These pipelines still belong to the same `IdNamespace` and the same `DocumentId`. Having this extra Id field enables them to generate `PipelineId` without collision.",null,null],[3,"ColorF","","Represents RGBA screen colors with floating point numbers.",null,null],[12,"r","","",69,null],[12,"g","","",69,null],[12,"b","","",69,null],[12,"a","","",69,null],[3,"Transaction","","A Transaction is a group of commands to apply atomically to a document.",null,null],[6,"ScrollLayerPoint","","",null,null],[6,"LayerSizeAu","","",null,null],[3,"PremultipliedColorF","","Represents pre-multiplied RGBA colors with floating point numbers.",null,null],[12,"r","","",70,null],[12,"g","","",70,null],[12,"b","","",70,null],[12,"a","","",70,null],[4,"ImageRendering","","",null,null],[13,"Auto","","",71,null],[13,"CrispEdges","","",71,null],[13,"Pixelated","","",71,null],[8,"BlobImageResources","","",null,null],[10,"get_font_data","","",72,{"inputs":[{"name":"self"},{"name":"fontkey"}],"output":{"name":"fonttemplate"}}],[10,"get_image","","",72,{"inputs":[{"name":"self"},{"name":"imagekey"}],"output":{"name":"option"}}],[3,"DocumentId","","",null,null],[12,"0","","",73,null],[12,"1","","",73,null],[4,"LineOrientation","","",null,null],[13,"Vertical","","",74,null],[13,"Horizontal","","",74,null],[3,"HitTestFlags","","",null,null],[6,"DeviceSize","","",null,null],[3,"IframeDisplayItem","","",null,null],[12,"pipeline_id","","",75,null],[6,"LayerRect","","",null,null],[3,"ColorU","","Represents RGBA screen colors with one byte per channel.",null,null],[12,"r","","",76,null],[12,"g","","",76,null],[12,"b","","",76,null],[12,"a","","",76,null],[4,"ApiMsg","","",null,null],[13,"UpdateResources","","Add/remove/update images and fonts.",77,null],[13,"GetGlyphDimensions","","Gets the glyph dimensions",77,null],[13,"GetGlyphIndices","","Gets the glyph indices from a string",77,null],[13,"CloneApi","","Adds a new document namespace.",77,null],[13,"AddDocument","","Adds a new document with given initial size.",77,null],[13,"UpdateDocument","","A message targeted at a particular document.",77,null],[13,"DeleteDocument","","Deletes an existing document.",77,null],[13,"ExternalEvent","","An opaque handle that must be passed to the render notifier. It is used by Gecko to forward gecko-specific messages to the render thread preserving the ordering within the other messages.",77,null],[13,"ClearNamespace","","Removes all resources associated with a namespace.",77,null],[13,"MemoryPressure","","Flush from the caches anything that isn't necessary, to free some memory.",77,null],[13,"DebugCommand","","Change debugging options.",77,null],[13,"ShutDown","","",77,null],[3,"ImageDisplayItem","","",null,null],[12,"image_key","","",78,null],[12,"stretch_size","","",78,null],[12,"tile_spacing","","",78,null],[12,"image_rendering","","",78,null],[4,"ClipId","","",null,null],[13,"Clip","","",79,null],[13,"ClipExternalId","","",79,null],[13,"DynamicallyAddedNode","","",79,null],[3,"StickyFrameDisplayItem","","",null,null],[12,"id","","",80,null],[12,"margins","","The margins that should be maintained between the edge of the parent viewport and this sticky frame. A margin of None indicates that the sticky frame should not stick at all to that particular edge of the viewport.",80,null],[12,"vertical_offset_bounds","","The minimum and maximum vertical offsets for this sticky frame. Ignoring these constraints, the sticky frame will continue to stick to the edge of the viewport as its original position is scrolled out of view. Constraints specify a maximum and minimum offset from the original position relative to non-sticky content within the same scrolling frame.",80,null],[12,"horizontal_offset_bounds","","The minimum and maximum horizontal offsets for this sticky frame. Ignoring these constraints, the sticky frame will continue to stick to the edge of the viewport as its original position is scrolled out of view. Constraints specify a maximum and minimum offset from the original position relative to non-sticky content within the same scrolling frame.",80,null],[12,"previously_applied_offset","","The amount of offset that has already been applied to the sticky frame. A positive y component this field means that a top-sticky item was in a scrollframe that has been scrolled down, such that the sticky item's position needed to be offset downwards by `previously_applied_offset.y`. A negative y component corresponds to the upward offset applied due to bottom-stickiness. The x-axis works analogously.",80,null],[3,"PropertyValue","","The current value of an animated property. This is supplied by the calling code.",null,null],[12,"key","","",81,null],[12,"value","","",81,null],[4,"FontRenderMode","","",null,null],[13,"Mono","","",82,null],[13,"Alpha","","",82,null],[13,"Subpixel","","",82,null],[4,"BoxShadowClipMode","","",null,null],[13,"Outset","","",83,null],[13,"Inset","","",83,null],[6,"LayerToWorldScale","","Scaling ratio from layer to world. Used for cases where we know the layer is in world space, or specifically want to treat it this way.",null,null],[4,"BlobImageError","","",null,null],[13,"Oom","","",84,null],[13,"InvalidKey","","",84,null],[13,"InvalidData","","",84,null],[13,"Other","","",84,null],[6,"DeviceVector2D","","",null,null],[3,"DynamicProperties","","When using `generate_frame()`, a list of `PropertyValue` structures can optionally be supplied to provide the current value of any animated properties.",null,null],[12,"transforms","","",85,null],[12,"floats","","",85,null],[6,"LayoutRect","","",null,null],[3,"SaveState","","",null,null],[3,"StackingContext","","",null,null],[12,"scroll_policy","","",86,null],[12,"transform","","",86,null],[12,"transform_style","","",86,null],[12,"perspective","","",86,null],[12,"mix_blend_mode","","",86,null],[4,"FontLCDFilter","","",null,null],[13,"None","","",87,null],[13,"Default","","",87,null],[13,"Light","","",87,null],[13,"Legacy","","",87,null],[3,"BuiltDisplayListDescriptor","","Describes the memory layout of a display list.",null,null],[6,"LayoutSize","","",null,null],[3,"GlyphInstance","","",null,null],[12,"index","","",88,null],[12,"point","","",88,null],[3,"GradientStop","","",null,null],[12,"offset","","",89,null],[12,"color","","",89,null],[3,"BorderWidths","","",null,null],[12,"left","","",90,null],[12,"top","","",90,null],[12,"right","","",90,null],[12,"bottom","","",90,null],[3,"FontVariation","","",null,null],[12,"tag","","",91,null],[12,"value","","",91,null],[4,"ScrollSensitivity","","",null,null],[13,"ScriptAndInputEvents","","",92,null],[13,"Script","","",92,null],[6,"LayerToScrollTransform","","",null,null],[5,"as_scroll_parent_rect","","",null,{"inputs":[{"name":"typedrect"}],"output":{"generics":["f32","scrolllayerpixel"],"name":"typedrect"}}],[3,"TextDisplayItem","","",null,null],[12,"font_key","","",93,null],[12,"color","","",93,null],[12,"glyph_options","","",93,null],[17,"YUV_COLOR_SPACES","","",null,null],[3,"RasterizedBlobImage","","",null,null],[12,"width","","",94,null],[12,"height","","",94,null],[12,"data","","",94,null],[3,"RadialGradientBorder","","",null,null],[12,"gradient","","",95,null],[12,"outset","","",95,null],[3,"FontInstanceKey","","",null,null],[12,"0","","",96,null],[12,"1","","",96,null],[6,"ScrollLayerVector2D","","",null,null],[6,"DeviceIntPoint","","",null,null],[4,"FilterOp","","",null,null],[13,"Blur","","",97,null],[13,"Brightness","","",97,null],[13,"Contrast","","",97,null],[13,"Grayscale","","",97,null],[13,"HueRotate","","",97,null],[13,"Invert","","",97,null],[13,"Opacity","","",97,null],[13,"Saturate","","",97,null],[13,"Sepia","","",97,null],[13,"DropShadow","","",97,null],[3,"PrimitiveInfo","","",null,null],[12,"rect","","",98,null],[12,"local_clip","","",98,null],[12,"is_backface_visible","","",98,null],[12,"tag","","",98,null],[3,"ScrollLayerState","","",null,null],[12,"id","","",99,null],[12,"scroll_offset","","",99,null],[3,"BorderRadius","","",null,null],[12,"top_left","","",100,null],[12,"top_right","","",100,null],[12,"bottom_left","","",100,null],[12,"bottom_right","","",100,null],[3,"NativeFontHandle","","",null,null],[12,"pathname","","",101,null],[12,"index","","",101,null],[3,"HitTestItem","","",null,null],[12,"pipeline","","The pipeline that the display item that was hit belongs to.",102,null],[12,"tag","","The tag of the hit display item.",102,null],[12,"point_in_viewport","","The hit point in the coordinate space of the \"viewport\" of the display item. The viewport is the scroll node formed by the root reference frame of the display item's pipeline.",102,null],[12,"point_relative_to_item","","The coordinates of the original hit test point relative to the origin of this item. This is useful for calculating things like text offsets in the client.",102,null],[6,"DeviceUintRect","","",null,null],[6,"LayoutTransform","","",null,null],[3,"BuiltDisplayListIter","","",null,null],[17,"YUV_FORMATS","","",null,null],[17,"MAX_TEXT_RUN_LENGTH","","",null,null],[6,"WorldPoint3D","","",null,null],[4,"SpecificDisplayItem","","",null,null],[13,"Clip","","",103,null],[13,"ScrollFrame","","",103,null],[13,"StickyFrame","","",103,null],[13,"Rectangle","","",103,null],[13,"ClearRectangle","","",103,null],[13,"Line","","",103,null],[13,"Text","","",103,null],[13,"Image","","",103,null],[13,"YuvImage","","",103,null],[13,"Border","","",103,null],[13,"BoxShadow","","",103,null],[13,"Gradient","","",103,null],[13,"RadialGradient","","",103,null],[13,"Iframe","","",103,null],[13,"PushStackingContext","","",103,null],[13,"PopStackingContext","","",103,null],[13,"SetGradientStops","","",103,null],[13,"PushShadow","","",103,null],[13,"PopAllShadows","","",103,null],[6,"DocumentLayer","","Documents are rendered in the ascending order of their associated layer values.",null,null],[3,"RenderApiSender","","",null,null],[8,"RenderNotifier","","",null,null],[10,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"generics":["rendernotifier"],"name":"box"}}],[10,"wake_up","","",104,null],[10,"new_document_ready","","",104,null],[11,"external_event","","",104,null],[11,"shut_down","","",104,null],[6,"DeviceUintSize","","",null,null],[3,"UpdateImage","","",null,null],[12,"key","","",105,null],[12,"descriptor","","",105,null],[12,"data","","",105,null],[12,"dirty_rect","","",105,null],[6,"LayerSize","","",null,null],[3,"ClipAndScrollInfo","","",null,null],[12,"scroll_node_id","","",106,null],[12,"clip_node_id","","",106,null],[4,"LocalClip","","",null,null],[13,"Rect","","",107,null],[13,"RoundedRect","","",107,null],[6,"ScrollToLayerTransform","","",null,null],[4,"DocumentMsg","","",null,null],[13,"HitTest","","",108,null],[13,"SetDisplayList","","",108,null],[12,"list_descriptor","webrender::api::DocumentMsg","",108,null],[12,"epoch","","",108,null],[12,"pipeline_id","","",108,null],[12,"background","","",108,null],[12,"viewport_size","","",108,null],[12,"content_size","","",108,null],[12,"preserve_frame_state","","",108,null],[12,"resources","","",108,null],[13,"UpdateResources","webrender::api","",108,null],[13,"UpdatePipelineResources","","",108,null],[12,"resources","webrender::api::DocumentMsg","",108,null],[12,"pipeline_id","","",108,null],[12,"epoch","","",108,null],[13,"UpdateEpoch","webrender::api","",108,null],[13,"SetPageZoom","","",108,null],[13,"SetPinchZoom","","",108,null],[13,"SetPan","","",108,null],[13,"SetRootPipeline","","",108,null],[13,"RemovePipeline","","",108,null],[13,"EnableFrameOutput","","",108,null],[13,"SetWindowParameters","","",108,null],[12,"window_size","webrender::api::DocumentMsg","",108,null],[12,"inner_rect","","",108,null],[12,"device_pixel_ratio","","",108,null],[13,"Scroll","webrender::api","",108,null],[13,"ScrollNodeWithId","","",108,null],[13,"TickScrollingBounce","","",108,null],[13,"GetScrollNodeState","","",108,null],[13,"GenerateFrame","","",108,null],[13,"UpdateDynamicProperties","","",108,null],[4,"BorderStyle","","",null,null],[13,"None","","",109,null],[13,"Solid","","",109,null],[13,"Double","","",109,null],[13,"Dotted","","",109,null],[13,"Dashed","","",109,null],[13,"Hidden","","",109,null],[13,"Groove","","",109,null],[13,"Ridge","","",109,null],[13,"Inset","","",109,null],[13,"Outset","","",109,null],[3,"GenericDisplayItem","","The DI is generic over the specifics, while allows to use the \"complete\" version of it for convenient serialization.",null,null],[12,"item","","",110,null],[12,"clip_and_scroll","","",110,null],[12,"info","","",110,null],[3,"ExternalImageId","","An arbitrary identifier for an external image provided by the application. It must be a unique identifier for each external image.",null,null],[12,"0","","",111,null],[6,"DeviceUintPoint","","",null,null],[3,"NormalBorder","","",null,null],[12,"left","","",112,null],[12,"right","","",112,null],[12,"top","","",112,null],[12,"bottom","","",112,null],[12,"radius","","",112,null],[3,"ExternalImageData","","",null,null],[12,"id","","",113,null],[12,"channel_index","","",113,null],[12,"image_type","","",113,null],[4,"ClipMode","","",null,null],[13,"Clip","","",114,null],[13,"ClipOut","","",114,null],[3,"BinaryRecorder","webrender","",null,null],[3,"CpuProfile","","",null,null],[12,"frame_id","","",115,null],[12,"backend_time_ns","","",115,null],[12,"composite_time_ns","","",115,null],[12,"draw_calls","","",115,null],[3,"DebugFlags","","",null,null],[3,"GpuProfile","","",null,null],[12,"frame_id","","",116,null],[12,"paint_time_ns","","",116,null],[3,"ExternalImage","","The data that an external client should provide about an external image. The timestamp is used to test if the renderer should upload new texture data this frame. For instance, if providing video frames, the application could call wr.render() whenever a new video frame is ready. If the callback increments the returned timestamp for a given image, the renderer will know to re-upload the image data to the GPU. Note that the UV coords are supplied in texel-space!",null,null],[12,"u0","","",117,null],[12,"v0","","",117,null],[12,"u1","","",117,null],[12,"v1","","",117,null],[12,"source","","",117,null],[3,"GraphicsApiInfo","","",null,null],[12,"kind","","",118,null],[12,"renderer","","",118,null],[12,"version","","",118,null],[3,"Renderer","","The renderer is responsible for submitting to the GPU the work prepared by the RenderBackend.",null,null],[3,"RendererOptions","","",null,null],[12,"device_pixel_ratio","","",119,null],[12,"resource_override_path","","",119,null],[12,"enable_aa","","",119,null],[12,"enable_dithering","","",119,null],[12,"max_recorded_profiles","","",119,null],[12,"debug","","",119,null],[12,"enable_scrollbars","","",119,null],[12,"precache_shaders","","",119,null],[12,"renderer_kind","","",119,null],[12,"enable_subpixel_aa","","",119,null],[12,"clear_color","","",119,null],[12,"enable_clear_scissor","","",119,null],[12,"max_texture_size","","",119,null],[12,"scatter_gpu_cache_updates","","",119,null],[12,"upload_method","","",119,null],[12,"workers","","",119,null],[12,"blob_image_renderer","","",119,null],[12,"recorder","","",119,null],[12,"thread_listener","","",119,null],[12,"enable_render_on_scroll","","",119,null],[12,"cached_programs","","",119,null],[12,"debug_flags","","",119,null],[12,"renderer_id","","",119,null],[12,"disable_dual_source_blending","","",119,null],[3,"RendererStats","","",null,null],[12,"total_draw_calls","","",120,null],[12,"alpha_target_count","","",120,null],[12,"color_target_count","","",120,null],[4,"RendererKind","","",null,null],[13,"Native","","",121,null],[13,"OSMesa","","",121,null],[4,"ExternalImageSource","","",null,null],[13,"RawData","","",122,null],[13,"NativeTexture","","",122,null],[13,"Invalid","","",122,null],[4,"GraphicsApi","","",null,null],[13,"OpenGL","","",123,null],[4,"ReadPixelsFormat","","",null,null],[13,"Rgba8","","",124,null],[13,"Bgra8","","",124,null],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",125,{"inputs":[{"name":"pathbuf"}],"output":{"name":"binaryrecorder"}}],[11,"write_msg","","",125,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"apimsg"}],"output":null}],[11,"write_payload","","",125,null],[11,"eq","","",126,{"inputs":[{"name":"self"},{"name":"debugflags"}],"output":{"name":"bool"}}],[11,"ne","","",126,{"inputs":[{"name":"self"},{"name":"debugflags"}],"output":{"name":"bool"}}],[11,"clone","","",126,{"inputs":[{"name":"self"}],"output":{"name":"debugflags"}}],[11,"partial_cmp","","",126,{"inputs":[{"name":"self"},{"name":"debugflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",126,{"inputs":[{"name":"self"},{"name":"debugflags"}],"output":{"name":"bool"}}],[11,"le","","",126,{"inputs":[{"name":"self"},{"name":"debugflags"}],"output":{"name":"bool"}}],[11,"gt","","",126,{"inputs":[{"name":"self"},{"name":"debugflags"}],"output":{"name":"bool"}}],[11,"ge","","",126,{"inputs":[{"name":"self"},{"name":"debugflags"}],"output":{"name":"bool"}}],[11,"cmp","","",126,{"inputs":[{"name":"self"},{"name":"debugflags"}],"output":{"name":"ordering"}}],[11,"hash","","",126,null],[11,"default","","",126,{"inputs":[],"output":{"name":"debugflags"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"PROFILER_DBG","","",126,null],[18,"RENDER_TARGET_DBG","","",126,null],[18,"TEXTURE_CACHE_DBG","","",126,null],[18,"ALPHA_PRIM_DBG","","",126,null],[18,"GPU_TIME_QUERIES","","",126,null],[18,"GPU_SAMPLE_QUERIES","","",126,null],[18,"DISABLE_BATCHING","","",126,null],[18,"EPOCHS","","",126,null],[18,"COMPACT_PROFILER","","",126,null],[11,"empty","","Returns an empty set of flags.",126,{"inputs":[],"output":{"name":"debugflags"}}],[11,"all","","Returns the set containing all flags.",126,{"inputs":[],"output":{"name":"debugflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",126,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",126,{"inputs":[{"name":"u32"}],"output":{"generics":["debugflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",126,{"inputs":[{"name":"u32"}],"output":{"name":"debugflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",126,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",126,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",126,{"inputs":[{"name":"self"},{"name":"debugflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",126,{"inputs":[{"name":"self"},{"name":"debugflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",126,{"inputs":[{"name":"self"},{"name":"debugflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",126,{"inputs":[{"name":"self"},{"name":"debugflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",126,{"inputs":[{"name":"self"},{"name":"debugflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",126,{"inputs":[{"name":"self"},{"name":"debugflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",126,{"inputs":[{"name":"self"},{"name":"debugflags"}],"output":{"name":"debugflags"}}],[11,"bitor_assign","","Adds the set of flags.",126,{"inputs":[{"name":"self"},{"name":"debugflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",126,{"inputs":[{"name":"self"},{"name":"debugflags"}],"output":{"name":"debugflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",126,{"inputs":[{"name":"self"},{"name":"debugflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",126,{"inputs":[{"name":"self"},{"name":"debugflags"}],"output":{"name":"debugflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",126,{"inputs":[{"name":"self"},{"name":"debugflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",126,{"inputs":[{"name":"self"},{"name":"debugflags"}],"output":{"name":"debugflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",126,{"inputs":[{"name":"self"},{"name":"debugflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",126,{"inputs":[{"name":"self"}],"output":{"name":"debugflags"}}],[11,"extend","","",126,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",126,{"inputs":[{"name":"t"}],"output":{"name":"debugflags"}}],[11,"clone","","",123,{"inputs":[{"name":"self"}],"output":{"name":"graphicsapi"}}],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",123,{"inputs":[{"name":"self"},{"name":"graphicsapi"}],"output":{"name":"bool"}}],[11,"clone","","",118,{"inputs":[{"name":"self"}],"output":{"name":"graphicsapiinfo"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"rendererkind"}}],[11,"fmt","","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",124,{"inputs":[{"name":"self"}],"output":{"name":"readpixelsformat"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",124,{"inputs":[{"name":"self"},{"name":"readpixelsformat"}],"output":{"name":"bool"}}],[11,"new","","Initializes webrender and creates a `Renderer` and `RenderApiSender`.",127,{"inputs":[{"generics":["gl"],"name":"rc"},{"generics":["rendernotifier"],"name":"box"},{"name":"rendereroptions"}],"output":{"generics":["renderererror"],"name":"result"}}],[11,"get_max_texture_size","","",127,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_graphics_api_info","","",127,{"inputs":[{"name":"self"}],"output":{"name":"graphicsapiinfo"}}],[11,"current_epoch","","Returns the Epoch of the current frame in a pipeline.",127,{"inputs":[{"name":"self"},{"name":"pipelineid"}],"output":{"generics":["epoch"],"name":"option"}}],[11,"flush_rendered_epochs","","Returns a HashMap containing the pipeline ids that have been received by the renderer and their respective epochs since the last time the method was called.",127,{"inputs":[{"name":"self"}],"output":{"generics":["pipelineid","epoch","buildhasherdefault"],"name":"hashmap"}}],[11,"update_program_cache","","",127,{"inputs":[{"name":"self"},{"generics":["programcache"],"name":"rc"}],"output":null}],[11,"update","","Processes the result queue.",127,{"inputs":[{"name":"self"}],"output":null}],[11,"set_external_image_handler","","Set a callback for handling external images.",127,{"inputs":[{"name":"self"},{"generics":["externalimagehandler"],"name":"box"}],"output":null}],[11,"set_output_image_handler","","Set a callback for handling external outputs.",127,{"inputs":[{"name":"self"},{"generics":["outputimagehandler"],"name":"box"}],"output":null}],[11,"get_frame_profiles","","Retrieve (and clear) the current list of recorded frame profiles.",127,null],[11,"render","","Renders the current frame.",127,{"inputs":[{"name":"self"},{"name":"deviceuintsize"}],"output":{"generics":["rendererstats","vec"],"name":"result"}}],[11,"layers_are_bouncing_back","","",127,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"debug_renderer","","",127,{"inputs":[{"name":"self"}],"output":{"name":"debugrenderer"}}],[11,"get_debug_flags","","",127,{"inputs":[{"name":"self"}],"output":{"name":"debugflags"}}],[11,"set_debug_flags","","",127,{"inputs":[{"name":"self"},{"name":"debugflags"}],"output":null}],[11,"set_debug_flag","","",127,{"inputs":[{"name":"self"},{"name":"debugflags"},{"name":"bool"}],"output":null}],[11,"toggle_debug_flags","","",127,{"inputs":[{"name":"self"},{"name":"debugflags"}],"output":null}],[11,"save_cpu_profile","","",127,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"read_pixels_rgba8","","",127,{"inputs":[{"name":"self"},{"name":"deviceuintrect"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"read_gpu_cache","","",127,null],[11,"read_pixels_into","","",127,null],[11,"deinit","","",127,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","",119,{"inputs":[],"output":{"name":"rendereroptions"}}],[11,"empty","","",120,{"inputs":[],"output":{"name":"rendererstats"}}],[7,"WEBRENDER_RECORDING_HEADER","","",null,null],[17,"MAX_VERTEX_TEXTURE_WIDTH","","",null,null],[8,"ApiRecordingReceiver","","",null,null],[10,"write_msg","","",128,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"apimsg"}],"output":null}],[10,"write_payload","","",128,null],[8,"OutputImageHandler","","Allows callers to receive a texture with the contents of a specific pipeline copied to it. Lock should return the native texture handle and the size of the texture. Unlock will only be called if the lock() call succeeds, when WR has issued the GL commands to copy the output to the texture handle.",null,null],[10,"lock","","",129,{"inputs":[{"name":"self"},{"name":"pipelineid"}],"output":{"name":"option"}}],[10,"unlock","","",129,{"inputs":[{"name":"self"},{"name":"pipelineid"}],"output":null}],[8,"ExternalImageHandler","","The interfaces that an application can implement to support providing external image buffers. When the the application passes an external image to WR, it should kepp that external image life time. People could check the epoch id in RenderNotifier at the client side to make sure that the external image is not used by WR. Then, do the clean up for that external image.",null,null],[10,"lock","","Lock the external image. Then, WR could start to read the image content. The WR client should not change the image content until the unlock() call.",130,{"inputs":[{"name":"self"},{"name":"externalimageid"},{"name":"u8"}],"output":{"name":"externalimage"}}],[10,"unlock","","Unlock the external image. The WR should not read the image content after this call.",130,{"inputs":[{"name":"self"},{"name":"externalimageid"},{"name":"u8"}],"output":null}],[8,"ThreadListener","","",null,null],[10,"thread_started","","",131,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[10,"thread_stopped","","",131,{"inputs":[{"name":"self"},{"name":"str"}],"output":null}],[11,"to_data","webrender::api::channel","Convert the payload to a raw byte vector, in order for it to be efficiently shared via shmem, for example.",0,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"from_data","","Deserializes the given payload from a raw byte vector.",0,null],[11,"fmt","webrender::api","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"hash","","",133,null],[11,"hash","","",134,null],[11,"hash","","",135,null],[11,"hash","","",87,null],[11,"hash","","",106,null],[11,"hash","","",136,null],[11,"hash","","",25,null],[11,"hash","","",79,null],[11,"hash","","",82,null],[11,"hash","","",70,null],[11,"hash","","",73,null],[11,"hash","","",137,null],[11,"hash","","",49,null],[11,"hash","","",10,null],[11,"hash","","",76,null],[11,"hash","","",52,null],[11,"hash","","",15,null],[11,"hash","","",138,null],[11,"hash","","",71,null],[11,"hash","","",22,null],[11,"hash","","",132,null],[11,"hash","","",55,null],[11,"hash","","",91,null],[11,"hash","","",139,null],[11,"hash","","",83,null],[11,"hash","","",31,null],[11,"hash","","",140,null],[11,"hash","","",13,null],[11,"hash","","",51,null],[11,"hash","","",96,null],[11,"hash","","",35,null],[11,"hash","","",38,null],[11,"hash","","",62,null],[11,"hash","","",113,null],[11,"hash","","",63,null],[11,"hash","","",66,null],[11,"hash","","",6,null],[11,"hash","","",50,null],[11,"hash","","",48,null],[11,"hash","","",61,null],[11,"hash","","",111,null],[11,"hash","","",20,null],[11,"hash","","",4,null],[11,"bitand","","Returns the intersection between the two sets of flags.",133,{"inputs":[{"name":"self"},{"name":"fontinstanceflags"}],"output":{"name":"fontinstanceflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",132,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":{"name":"hittestflags"}}],[11,"from_iter","","",133,{"inputs":[{"name":"t"}],"output":{"name":"fontinstanceflags"}}],[11,"from_iter","","",132,{"inputs":[{"name":"t"}],"output":{"name":"hittestflags"}}],[11,"from","","",69,{"inputs":[{"name":"coloru"}],"output":{"name":"colorf"}}],[11,"from","","",41,{"inputs":[{"name":"propertybindingkey"}],"output":{"name":"propertybinding"}}],[11,"from","","",107,{"inputs":[{"generics":["f32","layerpixel"],"name":"typedrect"}],"output":{"name":"localclip"}}],[11,"from","","",76,{"inputs":[{"name":"colorf"}],"output":{"name":"coloru"}}],[11,"from","","",41,{"inputs":[{"name":"t"}],"output":{"name":"propertybinding"}}],[11,"sub_assign","","Disables all flags enabled in the set.",132,null],[11,"sub_assign","","Disables all flags enabled in the set.",133,null],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"bitor","","Returns the union of the two sets of flags.",132,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":{"name":"hittestflags"}}],[11,"bitor","","Returns the union of the two sets of flags.",133,{"inputs":[{"name":"self"},{"name":"fontinstanceflags"}],"output":{"name":"fontinstanceflags"}}],[11,"into","","",62,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"imageborder"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"imageborder"}],"output":{"name":"bool"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"borderradiuskind"}],"output":{"name":"bool"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"imageformat"}],"output":{"name":"bool"}}],[11,"eq","","",109,{"inputs":[{"name":"self"},{"name":"borderstyle"}],"output":{"name":"bool"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"imagekey"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"imagekey"}],"output":{"name":"bool"}}],[11,"eq","","",102,{"inputs":[{"name":"self"},{"name":"hittestitem"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"self"},{"name":"hittestitem"}],"output":{"name":"bool"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"fonthinting"}],"output":{"name":"bool"}}],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"glyphinstance"}],"output":{"name":"bool"}}],[11,"ne","","",88,{"inputs":[{"name":"self"},{"name":"glyphinstance"}],"output":{"name":"bool"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"fontinstanceplatformoptions"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"fontinstanceplatformoptions"}],"output":{"name":"bool"}}],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"filterop"}],"output":{"name":"bool"}}],[11,"ne","","",97,{"inputs":[{"name":"self"},{"name":"filterop"}],"output":{"name":"bool"}}],[11,"eq","","",137,{"inputs":[{"name":"self"},{"name":"devicepixel"}],"output":{"name":"bool"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"subpixeldirection"}],"output":{"name":"bool"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"borderside"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"borderside"}],"output":{"name":"bool"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"colorf"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"self"},{"name":"colorf"}],"output":{"name":"bool"}}],[11,"eq","","",132,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":{"name":"bool"}}],[11,"ne","","",132,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":{"name":"bool"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"rectangledisplayitem"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"rectangledisplayitem"}],"output":{"name":"bool"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"linedisplayitem"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"linedisplayitem"}],"output":{"name":"bool"}}],[11,"eq","","",136,{"inputs":[{"name":"self"},{"name":"layerpixel"}],"output":{"name":"bool"}}],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"fontlcdfilter"}],"output":{"name":"bool"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"stickyoffsetbounds"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"stickyoffsetbounds"}],"output":{"name":"bool"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"propertybinding"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"propertybinding"}],"output":{"name":"bool"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"scrolleventphase"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"scrolleventphase"}],"output":{"name":"bool"}}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"gradientstop"}],"output":{"name":"bool"}}],[11,"ne","","",89,{"inputs":[{"name":"self"},{"name":"gradientstop"}],"output":{"name":"bool"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"fontkey"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"fontkey"}],"output":{"name":"bool"}}],[11,"eq","","",113,{"inputs":[{"name":"self"},{"name":"externalimagedata"}],"output":{"name":"bool"}}],[11,"ne","","",113,{"inputs":[{"name":"self"},{"name":"externalimagedata"}],"output":{"name":"bool"}}],[11,"eq","","",103,{"inputs":[{"name":"self"},{"name":"specificdisplayitem"}],"output":{"name":"bool"}}],[11,"ne","","",103,{"inputs":[{"name":"self"},{"name":"specificdisplayitem"}],"output":{"name":"bool"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"imagemask"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"imagemask"}],"output":{"name":"bool"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"transformstyle"}],"output":{"name":"bool"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"shadow"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"shadow"}],"output":{"name":"bool"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"scrollpolicy"}],"output":{"name":"bool"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"extendmode"}],"output":{"name":"bool"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"pushstackingcontextdisplayitem"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"pushstackingcontextdisplayitem"}],"output":{"name":"bool"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"stickyframedisplayitem"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"self"},{"name":"stickyframedisplayitem"}],"output":{"name":"bool"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"yuvcolorspace"}],"output":{"name":"bool"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"gradientdisplayitem"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"gradientdisplayitem"}],"output":{"name":"bool"}}],[11,"eq","","",139,{"inputs":[{"name":"self"},{"name":"tiles"}],"output":{"name":"bool"}}],[11,"eq","","",135,{"inputs":[{"name":"self"},{"name":"scrolllayerpixel"}],"output":{"name":"bool"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"yuvformat"}],"output":{"name":"bool"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"radialgradientdisplayitem"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"radialgradientdisplayitem"}],"output":{"name":"bool"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"imagedisplayitem"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"self"},{"name":"imagedisplayitem"}],"output":{"name":"bool"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"gradient"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"gradient"}],"output":{"name":"bool"}}],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"radialgradientborder"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"self"},{"name":"radialgradientborder"}],"output":{"name":"bool"}}],[11,"eq","","",100,{"inputs":[{"name":"self"},{"name":"borderradius"}],"output":{"name":"bool"}}],[11,"ne","","",100,{"inputs":[{"name":"self"},{"name":"borderradius"}],"output":{"name":"bool"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"borderdisplayitem"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"borderdisplayitem"}],"output":{"name":"bool"}}],[11,"eq","","",140,{"inputs":[{"name":"self"},{"name":"itemrange"}],"output":{"name":"bool"}}],[11,"ne","","",140,{"inputs":[{"name":"self"},{"name":"itemrange"}],"output":{"name":"bool"}}],[11,"eq","","",133,{"inputs":[{"name":"self"},{"name":"fontinstanceflags"}],"output":{"name":"bool"}}],[11,"ne","","",133,{"inputs":[{"name":"self"},{"name":"fontinstanceflags"}],"output":{"name":"bool"}}],[11,"eq","","",73,{"inputs":[{"name":"self"},{"name":"documentid"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"self"},{"name":"documentid"}],"output":{"name":"bool"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"subpixeloffset"}],"output":{"name":"bool"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"complexclipregion"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"complexclipregion"}],"output":{"name":"bool"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"glyphoptions"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"glyphoptions"}],"output":{"name":"bool"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"epoch"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"epoch"}],"output":{"name":"bool"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"clipdisplayitem"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"clipdisplayitem"}],"output":{"name":"bool"}}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"fontvariation"}],"output":{"name":"bool"}}],[11,"eq","","",112,{"inputs":[{"name":"self"},{"name":"normalborder"}],"output":{"name":"bool"}}],[11,"ne","","",112,{"inputs":[{"name":"self"},{"name":"normalborder"}],"output":{"name":"bool"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"pipelineid"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"pipelineid"}],"output":{"name":"bool"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"lineorientation"}],"output":{"name":"bool"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"boxshadowclipmode"}],"output":{"name":"bool"}}],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"fontrendermode"}],"output":{"name":"bool"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"linestyle"}],"output":{"name":"bool"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"premultipliedcolorf"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"self"},{"name":"premultipliedcolorf"}],"output":{"name":"bool"}}],[11,"eq","","",107,{"inputs":[{"name":"self"},{"name":"localclip"}],"output":{"name":"bool"}}],[11,"ne","","",107,{"inputs":[{"name":"self"},{"name":"localclip"}],"output":{"name":"bool"}}],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"borderwidths"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"self"},{"name":"borderwidths"}],"output":{"name":"bool"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"imagedescriptor"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"imagedescriptor"}],"output":{"name":"bool"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"ninepatchdescriptor"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"ninepatchdescriptor"}],"output":{"name":"bool"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"iframedisplayitem"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"self"},{"name":"iframedisplayitem"}],"output":{"name":"bool"}}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"clipid"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"self"},{"name":"clipid"}],"output":{"name":"bool"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"scrollframedisplayitem"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"scrollframedisplayitem"}],"output":{"name":"bool"}}],[11,"eq","","",76,{"inputs":[{"name":"self"},{"name":"coloru"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"self"},{"name":"coloru"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"blobimagerequest"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"blobimagerequest"}],"output":{"name":"bool"}}],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"fontinstancekey"}],"output":{"name":"bool"}}],[11,"ne","","",96,{"inputs":[{"name":"self"},{"name":"fontinstancekey"}],"output":{"name":"bool"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"yuvimagedisplayitem"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"yuvimagedisplayitem"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"boxshadowdisplayitem"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"boxshadowdisplayitem"}],"output":{"name":"bool"}}],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"textdisplayitem"}],"output":{"name":"bool"}}],[11,"ne","","",93,{"inputs":[{"name":"self"},{"name":"textdisplayitem"}],"output":{"name":"bool"}}],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"propertybindingkey"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"propertybindingkey"}],"output":{"name":"bool"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"mixblendmode"}],"output":{"name":"bool"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"gradientborder"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"gradientborder"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"fontinstanceoptions"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"fontinstanceoptions"}],"output":{"name":"bool"}}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"scrollsensitivity"}],"output":{"name":"bool"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"idnamespace"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"idnamespace"}],"output":{"name":"bool"}}],[11,"eq","","",111,{"inputs":[{"name":"self"},{"name":"externalimageid"}],"output":{"name":"bool"}}],[11,"ne","","",111,{"inputs":[{"name":"self"},{"name":"externalimageid"}],"output":{"name":"bool"}}],[11,"eq","","",110,{"inputs":[{"name":"self"},{"name":"genericdisplayitem"}],"output":{"name":"bool"}}],[11,"ne","","",110,{"inputs":[{"name":"self"},{"name":"genericdisplayitem"}],"output":{"name":"bool"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"radialgradient"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"radialgradient"}],"output":{"name":"bool"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"externalimagetype"}],"output":{"name":"bool"}}],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"stackingcontext"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"self"},{"name":"stackingcontext"}],"output":{"name":"bool"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"glyphkey"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"glyphkey"}],"output":{"name":"bool"}}],[11,"eq","","",98,{"inputs":[{"name":"self"},{"name":"primitiveinfo"}],"output":{"name":"bool"}}],[11,"ne","","",98,{"inputs":[{"name":"self"},{"name":"primitiveinfo"}],"output":{"name":"bool"}}],[11,"eq","","",138,{"inputs":[{"name":"self"},{"name":"worldpixel"}],"output":{"name":"bool"}}],[11,"eq","","",106,{"inputs":[{"name":"self"},{"name":"clipandscrollinfo"}],"output":{"name":"bool"}}],[11,"ne","","",106,{"inputs":[{"name":"self"},{"name":"clipandscrollinfo"}],"output":{"name":"bool"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"yuvdata"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"yuvdata"}],"output":{"name":"bool"}}],[11,"eq","","",114,{"inputs":[{"name":"self"},{"name":"clipmode"}],"output":{"name":"bool"}}],[11,"eq","","",71,{"inputs":[{"name":"self"},{"name":"imagerendering"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"borderdetails"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"borderdetails"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"repeatmode"}],"output":{"name":"bool"}}],[11,"eq","","",134,{"inputs":[{"name":"self"},{"name":"propertybindingid"}],"output":{"name":"bool"}}],[11,"ne","","",134,{"inputs":[{"name":"self"},{"name":"propertybindingid"}],"output":{"name":"bool"}}],[11,"extend","","",132,null],[11,"extend","","",133,null],[11,"drop","","",141,null],[11,"send_payload","webrender::api::channel","",142,{"inputs":[{"name":"self"},{"name":"payload"}],"output":{"generics":["error"],"name":"result"}}],[11,"bitand_assign","webrender::api","Disables all flags disabled in the set.",132,null],[11,"bitand_assign","","Disables all flags disabled in the set.",133,null],[11,"serialize","","",101,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",15,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",96,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",140,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",28,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","webrender::api::channel","",143,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","webrender::api","",87,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",45,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",62,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",86,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",136,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",53,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",81,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",14,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",59,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","webrender::api::channel","",142,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","webrender::api","",44,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",41,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",74,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",82,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",133,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",37,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",69,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",105,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",51,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",43,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",83,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",73,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",3,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",61,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",111,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",18,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",42,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",11,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",112,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",144,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",70,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",78,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",106,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",7,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",145,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",52,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",55,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",10,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",146,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",30,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",95,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",64,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",47,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",32,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",21,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",77,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",63,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",49,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",98,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",40,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",75,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",71,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",68,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",39,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",103,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",79,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",22,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",80,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",88,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",16,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",134,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",60,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",24,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",57,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",109,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",36,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",17,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",66,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",58,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",31,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",91,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",13,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",85,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",67,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",25,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",34,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",50,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",12,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",147,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",23,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",89,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",108,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",99,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",92,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",20,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",107,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",38,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",114,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",113,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",100,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",19,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",48,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",76,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",90,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",9,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",102,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",132,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",35,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",8,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",6,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",97,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",5,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",110,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",46,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",93,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",54,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",26,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"serialize","","",65,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"bitor_assign","","Adds the set of flags.",133,null],[11,"bitor_assign","","Adds the set of flags.",132,null],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"not","","",114,{"inputs":[{"name":"self"}],"output":{"name":"clipmode"}}],[11,"not","","Returns the complement of this set of flags.",132,{"inputs":[{"name":"self"}],"output":{"name":"hittestflags"}}],[11,"not","","Returns the complement of this set of flags.",133,{"inputs":[{"name":"self"}],"output":{"name":"fontinstanceflags"}}],[11,"default","","",140,{"inputs":[],"output":{"name":"itemrange"}}],[11,"default","","",146,{"inputs":[],"output":{"name":"builtdisplaylistdescriptor"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"fontinstanceoptions"}}],[11,"default","","",133,{"inputs":[],"output":{"name":"fontinstanceflags"}}],[11,"default","","",50,{"inputs":[],"output":{"name":"fontinstanceplatformoptions"}}],[11,"default","","",148,{"inputs":[],"output":{"name":"builtdisplaylist"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"hittestresult"}}],[11,"bitxor_assign","","Toggles the set of flags.",133,null],[11,"bitxor_assign","","Toggles the set of flags.",132,null],[11,"cmp","","",87,{"inputs":[{"name":"self"},{"name":"fontlcdfilter"}],"output":{"name":"ordering"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"fontinstanceoptions"}],"output":{"name":"ordering"}}],[11,"cmp","","",52,{"inputs":[{"name":"self"},{"name":"subpixeldirection"}],"output":{"name":"ordering"}}],[11,"cmp","","",139,{"inputs":[{"name":"self"},{"name":"tiles"}],"output":{"name":"ordering"}}],[11,"cmp","","",61,{"inputs":[{"name":"self"},{"name":"fontkey"}],"output":{"name":"ordering"}}],[11,"cmp","","",136,{"inputs":[{"name":"self"},{"name":"layerpixel"}],"output":{"name":"ordering"}}],[11,"cmp","","",31,{"inputs":[{"name":"self"},{"name":"glyphoptions"}],"output":{"name":"ordering"}}],[11,"cmp","","",137,{"inputs":[{"name":"self"},{"name":"devicepixel"}],"output":{"name":"ordering"}}],[11,"cmp","","",138,{"inputs":[{"name":"self"},{"name":"worldpixel"}],"output":{"name":"ordering"}}],[11,"cmp","","",135,{"inputs":[{"name":"self"},{"name":"scrolllayerpixel"}],"output":{"name":"ordering"}}],[11,"cmp","","",133,{"inputs":[{"name":"self"},{"name":"fontinstanceflags"}],"output":{"name":"ordering"}}],[11,"cmp","","",132,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":{"name":"ordering"}}],[11,"cmp","","",50,{"inputs":[{"name":"self"},{"name":"fontinstanceplatformoptions"}],"output":{"name":"ordering"}}],[11,"cmp","","",96,{"inputs":[{"name":"self"},{"name":"fontinstancekey"}],"output":{"name":"ordering"}}],[11,"cmp","","",91,{"inputs":[{"name":"self"},{"name":"fontvariation"}],"output":{"name":"ordering"}}],[11,"cmp","","",51,{"inputs":[{"name":"self"},{"name":"imagekey"}],"output":{"name":"ordering"}}],[11,"cmp","","",48,{"inputs":[{"name":"self"},{"name":"epoch"}],"output":{"name":"ordering"}}],[11,"cmp","","",76,{"inputs":[{"name":"self"},{"name":"coloru"}],"output":{"name":"ordering"}}],[11,"cmp","","",82,{"inputs":[{"name":"self"},{"name":"fontrendermode"}],"output":{"name":"ordering"}}],[11,"cmp","","",63,{"inputs":[{"name":"self"},{"name":"extendmode"}],"output":{"name":"ordering"}}],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"idnamespace"}],"output":{"name":"ordering"}}],[11,"cmp","","",38,{"inputs":[{"name":"self"},{"name":"fonthinting"}],"output":{"name":"ordering"}}],[11,"cmp","","",62,{"inputs":[{"name":"self"},{"name":"subpixeloffset"}],"output":{"name":"ordering"}}],[11,"cmp","","",70,{"inputs":[{"name":"self"},{"name":"premultipliedcolorf"}],"output":{"name":"ordering"}}],[11,"cmp","","",20,{"inputs":[{"name":"self"},{"name":"glyphkey"}],"output":{"name":"ordering"}}],[11,"next","","",149,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",149,null],[11,"partial_cmp","","",70,{"inputs":[{"name":"self"},{"name":"premultipliedcolorf"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",70,{"inputs":[{"name":"self"},{"name":"premultipliedcolorf"}],"output":{"name":"bool"}}],[11,"le","","",70,{"inputs":[{"name":"self"},{"name":"premultipliedcolorf"}],"output":{"name":"bool"}}],[11,"gt","","",70,{"inputs":[{"name":"self"},{"name":"premultipliedcolorf"}],"output":{"name":"bool"}}],[11,"ge","","",70,{"inputs":[{"name":"self"},{"name":"premultipliedcolorf"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",135,{"inputs":[{"name":"self"},{"name":"scrolllayerpixel"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",51,{"inputs":[{"name":"self"},{"name":"imagekey"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",51,{"inputs":[{"name":"self"},{"name":"imagekey"}],"output":{"name":"bool"}}],[11,"le","","",51,{"inputs":[{"name":"self"},{"name":"imagekey"}],"output":{"name":"bool"}}],[11,"gt","","",51,{"inputs":[{"name":"self"},{"name":"imagekey"}],"output":{"name":"bool"}}],[11,"ge","","",51,{"inputs":[{"name":"self"},{"name":"imagekey"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",31,{"inputs":[{"name":"self"},{"name":"glyphoptions"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",31,{"inputs":[{"name":"self"},{"name":"glyphoptions"}],"output":{"name":"bool"}}],[11,"le","","",31,{"inputs":[{"name":"self"},{"name":"glyphoptions"}],"output":{"name":"bool"}}],[11,"gt","","",31,{"inputs":[{"name":"self"},{"name":"glyphoptions"}],"output":{"name":"bool"}}],[11,"ge","","",31,{"inputs":[{"name":"self"},{"name":"glyphoptions"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",62,{"inputs":[{"name":"self"},{"name":"subpixeloffset"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",76,{"inputs":[{"name":"self"},{"name":"coloru"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",76,{"inputs":[{"name":"self"},{"name":"coloru"}],"output":{"name":"bool"}}],[11,"le","","",76,{"inputs":[{"name":"self"},{"name":"coloru"}],"output":{"name":"bool"}}],[11,"gt","","",76,{"inputs":[{"name":"self"},{"name":"coloru"}],"output":{"name":"bool"}}],[11,"ge","","",76,{"inputs":[{"name":"self"},{"name":"coloru"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",87,{"inputs":[{"name":"self"},{"name":"fontlcdfilter"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"fontinstanceoptions"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"self"},{"name":"fontinstanceoptions"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"self"},{"name":"fontinstanceoptions"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"self"},{"name":"fontinstanceoptions"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"self"},{"name":"fontinstanceoptions"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",136,{"inputs":[{"name":"self"},{"name":"layerpixel"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",91,{"inputs":[{"name":"self"},{"name":"fontvariation"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",91,{"inputs":[{"name":"self"},{"name":"fontvariation"}],"output":{"name":"bool"}}],[11,"le","","",91,{"inputs":[{"name":"self"},{"name":"fontvariation"}],"output":{"name":"bool"}}],[11,"gt","","",91,{"inputs":[{"name":"self"},{"name":"fontvariation"}],"output":{"name":"bool"}}],[11,"ge","","",91,{"inputs":[{"name":"self"},{"name":"fontvariation"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",48,{"inputs":[{"name":"self"},{"name":"epoch"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",48,{"inputs":[{"name":"self"},{"name":"epoch"}],"output":{"name":"bool"}}],[11,"le","","",48,{"inputs":[{"name":"self"},{"name":"epoch"}],"output":{"name":"bool"}}],[11,"gt","","",48,{"inputs":[{"name":"self"},{"name":"epoch"}],"output":{"name":"bool"}}],[11,"ge","","",48,{"inputs":[{"name":"self"},{"name":"epoch"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",137,{"inputs":[{"name":"self"},{"name":"devicepixel"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",139,{"inputs":[{"name":"self"},{"name":"tiles"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",50,{"inputs":[{"name":"self"},{"name":"fontinstanceplatformoptions"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",50,{"inputs":[{"name":"self"},{"name":"fontinstanceplatformoptions"}],"output":{"name":"bool"}}],[11,"le","","",50,{"inputs":[{"name":"self"},{"name":"fontinstanceplatformoptions"}],"output":{"name":"bool"}}],[11,"gt","","",50,{"inputs":[{"name":"self"},{"name":"fontinstanceplatformoptions"}],"output":{"name":"bool"}}],[11,"ge","","",50,{"inputs":[{"name":"self"},{"name":"fontinstanceplatformoptions"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",61,{"inputs":[{"name":"self"},{"name":"fontkey"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",61,{"inputs":[{"name":"self"},{"name":"fontkey"}],"output":{"name":"bool"}}],[11,"le","","",61,{"inputs":[{"name":"self"},{"name":"fontkey"}],"output":{"name":"bool"}}],[11,"gt","","",61,{"inputs":[{"name":"self"},{"name":"fontkey"}],"output":{"name":"bool"}}],[11,"ge","","",61,{"inputs":[{"name":"self"},{"name":"fontkey"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",52,{"inputs":[{"name":"self"},{"name":"subpixeldirection"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",82,{"inputs":[{"name":"self"},{"name":"fontrendermode"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",96,{"inputs":[{"name":"self"},{"name":"fontinstancekey"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",96,{"inputs":[{"name":"self"},{"name":"fontinstancekey"}],"output":{"name":"bool"}}],[11,"le","","",96,{"inputs":[{"name":"self"},{"name":"fontinstancekey"}],"output":{"name":"bool"}}],[11,"gt","","",96,{"inputs":[{"name":"self"},{"name":"fontinstancekey"}],"output":{"name":"bool"}}],[11,"ge","","",96,{"inputs":[{"name":"self"},{"name":"fontinstancekey"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",132,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",132,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":{"name":"bool"}}],[11,"le","","",132,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":{"name":"bool"}}],[11,"gt","","",132,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":{"name":"bool"}}],[11,"ge","","",132,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",38,{"inputs":[{"name":"self"},{"name":"fonthinting"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",63,{"inputs":[{"name":"self"},{"name":"extendmode"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",133,{"inputs":[{"name":"self"},{"name":"fontinstanceflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",133,{"inputs":[{"name":"self"},{"name":"fontinstanceflags"}],"output":{"name":"bool"}}],[11,"le","","",133,{"inputs":[{"name":"self"},{"name":"fontinstanceflags"}],"output":{"name":"bool"}}],[11,"gt","","",133,{"inputs":[{"name":"self"},{"name":"fontinstanceflags"}],"output":{"name":"bool"}}],[11,"ge","","",133,{"inputs":[{"name":"self"},{"name":"fontinstanceflags"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",20,{"inputs":[{"name":"self"},{"name":"glyphkey"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",20,{"inputs":[{"name":"self"},{"name":"glyphkey"}],"output":{"name":"bool"}}],[11,"le","","",20,{"inputs":[{"name":"self"},{"name":"glyphkey"}],"output":{"name":"bool"}}],[11,"gt","","",20,{"inputs":[{"name":"self"},{"name":"glyphkey"}],"output":{"name":"bool"}}],[11,"ge","","",20,{"inputs":[{"name":"self"},{"name":"glyphkey"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",138,{"inputs":[{"name":"self"},{"name":"worldpixel"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"idnamespace"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"self"},{"name":"idnamespace"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"self"},{"name":"idnamespace"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"self"},{"name":"idnamespace"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"self"},{"name":"idnamespace"}],"output":{"name":"bool"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",133,{"inputs":[{"name":"self"},{"name":"fontinstanceflags"}],"output":{"name":"fontinstanceflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",132,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":{"name":"hittestflags"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"imagerendering"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"boxshadowclipmode"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"epoch"}}],[11,"clone","webrender::api::channel","",142,{"inputs":[{"name":"self"}],"output":{"name":"msgsender"}}],[11,"clone","webrender::api","",70,{"inputs":[{"name":"self"}],"output":{"name":"premultipliedcolorf"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"subpixeldirection"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"resourceupdates"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"glyphkey"}}],[11,"clone","","",135,{"inputs":[{"name":"self"}],"output":{"name":"scrolllayerpixel"}}],[11,"clone","","",140,{"inputs":[{"name":"self"}],"output":{"name":"itemrange"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"imagekey"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"borderside"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"scrollpolicy"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"fonthinting"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"blobimagerequest"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"fontrendermode"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"glyphinstance"}}],[11,"clone","","",137,{"inputs":[{"name":"self"}],"output":{"name":"devicepixel"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"debugcommand"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"externalimageid"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"borderdisplayitem"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"propertybinding"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"scrollclamping"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"genericdisplayitem"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"addimage"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"fontinstanceplatformoptions"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"externalimagetype"}}],[11,"clone","","",149,{"inputs":[{"name":"self"}],"output":{"name":"auxiter"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"scrollsensitivity"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"clipmode"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"yuvformat"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"borderstyle"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"glyphoptions"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"imageborder"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"fontinstancekey"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"imagedescriptor"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"borderdetails"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"pipelineid"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"blobimagedescriptor"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"idnamespace"}}],[11,"clone","","",146,{"inputs":[{"name":"self"}],"output":{"name":"builtdisplaylistdescriptor"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"propertyvalue"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"clipdisplayitem"}}],[11,"clone","","",145,{"inputs":[{"name":"self"}],"output":{"name":"externalevent"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"textdisplayitem"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"imagedisplayitem"}}],[11,"clone","","",138,{"inputs":[{"name":"self"}],"output":{"name":"worldpixel"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"documentid"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"gradientstop"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"yuvdata"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"scrolleventphase"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"gradient"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"radialgradient"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"dynamicproperties"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"imageformat"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"glyphdimensions"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"coloru"}}],[11,"clone","","",139,{"inputs":[{"name":"self"}],"output":{"name":"tiles"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"addfontinstance"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"resourceid"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"transformstyle"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"pushstackingcontextdisplayitem"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"hittestitem"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"yuvcolorspace"}}],[11,"clone","","",147,{"inputs":[{"name":"self"}],"output":{"name":"zoomfactor"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"specificdisplayitem"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"clipid"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"fontlcdfilter"}}],[11,"clone","webrender::api::channel","",0,{"inputs":[{"name":"self"}],"output":{"name":"payload"}}],[11,"clone","webrender::api","",101,{"inputs":[{"name":"self"}],"output":{"name":"nativefonthandle"}}],[11,"clone","","",144,{"inputs":[{"name":"self"}],"output":{"name":"renderapisender"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"iframedisplayitem"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"gradientdisplayitem"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"fontvariation"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"linedisplayitem"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"addfont"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"filterop"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"fonttemplate"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"boxshadowdisplayitem"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"hittestresult"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"ninepatchdescriptor"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"scrollframedisplayitem"}}],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"normalborder"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"scrolllocation"}}],[11,"clone","","",148,{"inputs":[{"name":"self"}],"output":{"name":"builtdisplaylist"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"documentmsg"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"imagemask"}}],[11,"clone","","",150,{"inputs":[{"name":"self"}],"output":{"name":"savestate"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"clipandscrollinfo"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"updateimage"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"linestyle"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"externalimagedata"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"radialgradientdisplayitem"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"borderradiuskind"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"subpixeloffset"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"mixblendmode"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"stickyframedisplayitem"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"yuvimagedisplayitem"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"extendmode"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"propertybindingkey"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"stackingcontext"}}],[11,"clone","","",132,{"inputs":[{"name":"self"}],"output":{"name":"hittestflags"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"displaylistbuilder"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"primitiveinfo"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"radialgradientborder"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"repeatmode"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"rectangledisplayitem"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"borderradius"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"complexclipregion"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"gradientborder"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"colorf"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"resourceupdate"}}],[11,"clone","","",134,{"inputs":[{"name":"self"}],"output":{"name":"propertybindingid"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"borderwidths"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"localclip"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"blobimageerror"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"shadow"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"imagedata"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"scrolllayerstate"}}],[11,"clone","","",133,{"inputs":[{"name":"self"}],"output":{"name":"fontinstanceflags"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"stickyoffsetbounds"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"fontkey"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"fontinstanceoptions"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"apimsg"}}],[11,"clone","","",136,{"inputs":[{"name":"self"}],"output":{"name":"layerpixel"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"lineorientation"}}],[11,"deserialize","","",34,{"inputs":[{"name":"__d"}],"output":{"generics":["radialgradientdisplayitem"],"name":"result"}}],[11,"deserialize_in_place","","",34,{"inputs":[{"name":"__d"},{"name":"radialgradientdisplayitem"}],"output":{"name":"result"}}],[11,"deserialize","","",47,{"inputs":[{"name":"__d"}],"output":{"generics":["imageborder"],"name":"result"}}],[11,"deserialize_in_place","","",47,{"inputs":[{"name":"__d"},{"name":"imageborder"}],"output":{"name":"result"}}],[11,"deserialize","","",53,{"inputs":[{"name":"__d"}],"output":{"generics":["resourceupdates"],"name":"result"}}],[11,"deserialize_in_place","","",53,{"inputs":[{"name":"__d"},{"name":"resourceupdates"}],"output":{"name":"result"}}],[11,"deserialize","","",11,{"inputs":[{"name":"__d"}],"output":{"generics":["yuvimagedisplayitem"],"name":"result"}}],[11,"deserialize_in_place","","",11,{"inputs":[{"name":"__d"},{"name":"yuvimagedisplayitem"}],"output":{"name":"result"}}],[11,"deserialize","","",16,{"inputs":[{"name":"__d"}],"output":{"generics":["imagedescriptor"],"name":"result"}}],[11,"deserialize_in_place","","",16,{"inputs":[{"name":"__d"},{"name":"imagedescriptor"}],"output":{"name":"result"}}],[11,"deserialize","","",132,{"inputs":[{"name":"__d"}],"output":{"generics":["hittestflags"],"name":"result"}}],[11,"deserialize_in_place","","",132,{"inputs":[{"name":"__d"},{"name":"hittestflags"}],"output":{"name":"result"}}],[11,"deserialize","","",36,{"inputs":[{"name":"__d"}],"output":{"generics":["shadow"],"name":"result"}}],[11,"deserialize_in_place","","",36,{"inputs":[{"name":"__d"},{"name":"shadow"}],"output":{"name":"result"}}],[11,"deserialize","","",96,{"inputs":[{"name":"__d"}],"output":{"generics":["fontinstancekey"],"name":"result"}}],[11,"deserialize_in_place","","",96,{"inputs":[{"name":"__d"},{"name":"fontinstancekey"}],"output":{"name":"result"}}],[11,"deserialize","","",21,{"inputs":[{"name":"__d"}],"output":{"generics":["imagemask"],"name":"result"}}],[11,"deserialize_in_place","","",21,{"inputs":[{"name":"__d"},{"name":"imagemask"}],"output":{"name":"result"}}],[11,"deserialize","","",46,{"inputs":[{"name":"__d"}],"output":{"generics":["gradientborder"],"name":"result"}}],[11,"deserialize_in_place","","",46,{"inputs":[{"name":"__d"},{"name":"gradientborder"}],"output":{"name":"result"}}],[11,"deserialize","","",66,{"inputs":[{"name":"__d"}],"output":{"generics":["imageformat"],"name":"result"}}],[11,"deserialize","","",52,{"inputs":[{"name":"__d"}],"output":{"generics":["subpixeldirection"],"name":"result"}}],[11,"deserialize","","",42,{"inputs":[{"name":"__d"}],"output":{"generics":["gradientdisplayitem"],"name":"result"}}],[11,"deserialize_in_place","","",42,{"inputs":[{"name":"__d"},{"name":"gradientdisplayitem"}],"output":{"name":"result"}}],[11,"deserialize","","",6,{"inputs":[{"name":"__d"}],"output":{"generics":["fontinstanceoptions"],"name":"result"}}],[11,"deserialize_in_place","","",6,{"inputs":[{"name":"__d"},{"name":"fontinstanceoptions"}],"output":{"name":"result"}}],[11,"deserialize","","",40,{"inputs":[{"name":"__d"}],"output":{"generics":["rectangledisplayitem"],"name":"result"}}],[11,"deserialize_in_place","","",40,{"inputs":[{"name":"__d"},{"name":"rectangledisplayitem"}],"output":{"name":"result"}}],[11,"deserialize","","",105,{"inputs":[{"name":"__d"}],"output":{"generics":["updateimage"],"name":"result"}}],[11,"deserialize_in_place","","",105,{"inputs":[{"name":"__d"},{"name":"updateimage"}],"output":{"name":"result"}}],[11,"deserialize","","",20,{"inputs":[{"name":"__d"}],"output":{"generics":["glyphkey"],"name":"result"}}],[11,"deserialize_in_place","","",20,{"inputs":[{"name":"__d"},{"name":"glyphkey"}],"output":{"name":"result"}}],[11,"deserialize","","",8,{"inputs":[{"name":"__d"}],"output":{"generics":["resourceid"],"name":"result"}}],[11,"deserialize_in_place","","",8,{"inputs":[{"name":"__d"},{"name":"resourceid"}],"output":{"name":"result"}}],[11,"deserialize","","",43,{"inputs":[{"name":"__d"}],"output":{"generics":["debugcommand"],"name":"result"}}],[11,"deserialize","","",10,{"inputs":[{"name":"__d"}],"output":{"generics":["idnamespace"],"name":"result"}}],[11,"deserialize_in_place","","",10,{"inputs":[{"name":"__d"},{"name":"idnamespace"}],"output":{"name":"result"}}],[11,"deserialize","","",102,{"inputs":[{"name":"__d"}],"output":{"generics":["hittestitem"],"name":"result"}}],[11,"deserialize_in_place","","",102,{"inputs":[{"name":"__d"},{"name":"hittestitem"}],"output":{"name":"result"}}],[11,"deserialize","","",32,{"inputs":[{"name":"__d"}],"output":{"generics":["scrollclamping"],"name":"result"}}],[11,"deserialize","","",28,{"inputs":[{"name":"__d"}],"output":{"generics":["gradient"],"name":"result"}}],[11,"deserialize_in_place","","",28,{"inputs":[{"name":"__d"},{"name":"gradient"}],"output":{"name":"result"}}],[11,"deserialize","","",136,{"inputs":[{"name":"__d"}],"output":{"generics":["layerpixel"],"name":"result"}}],[11,"deserialize","","",38,{"inputs":[{"name":"__d"}],"output":{"generics":["fonthinting"],"name":"result"}}],[11,"deserialize","","",67,{"inputs":[{"name":"__d"}],"output":{"generics":["scrollpolicy"],"name":"result"}}],[11,"deserialize","","",3,{"inputs":[{"name":"__d"}],"output":{"generics":["boxshadowdisplayitem"],"name":"result"}}],[11,"deserialize_in_place","","",3,{"inputs":[{"name":"__d"},{"name":"boxshadowdisplayitem"}],"output":{"name":"result"}}],[11,"deserialize","","",69,{"inputs":[{"name":"__d"}],"output":{"generics":["colorf"],"name":"result"}}],[11,"deserialize_in_place","","",69,{"inputs":[{"name":"__d"},{"name":"colorf"}],"output":{"name":"result"}}],[11,"deserialize","","",19,{"inputs":[{"name":"__d"}],"output":{"generics":["borderradiuskind"],"name":"result"}}],[11,"deserialize","","",22,{"inputs":[{"name":"__d"}],"output":{"generics":["transformstyle"],"name":"result"}}],[11,"deserialize","","",13,{"inputs":[{"name":"__d"}],"output":{"generics":["pipelineid"],"name":"result"}}],[11,"deserialize_in_place","","",13,{"inputs":[{"name":"__d"},{"name":"pipelineid"}],"output":{"name":"result"}}],[11,"deserialize","","",88,{"inputs":[{"name":"__d"}],"output":{"generics":["glyphinstance"],"name":"result"}}],[11,"deserialize_in_place","","",88,{"inputs":[{"name":"__d"},{"name":"glyphinstance"}],"output":{"name":"result"}}],[11,"deserialize","","",7,{"inputs":[{"name":"__d"}],"output":{"generics":["addimage"],"name":"result"}}],[11,"deserialize_in_place","","",7,{"inputs":[{"name":"__d"},{"name":"addimage"}],"output":{"name":"result"}}],[11,"deserialize","","",30,{"inputs":[{"name":"__d"}],"output":{"generics":["complexclipregion"],"name":"result"}}],[11,"deserialize_in_place","","",30,{"inputs":[{"name":"__d"},{"name":"complexclipregion"}],"output":{"name":"result"}}],[11,"deserialize","","",14,{"inputs":[{"name":"__d"}],"output":{"generics":["addfont"],"name":"result"}}],[11,"deserialize","","",103,{"inputs":[{"name":"__d"}],"output":{"generics":["specificdisplayitem"],"name":"result"}}],[11,"deserialize","","",77,{"inputs":[{"name":"__d"}],"output":{"generics":["apimsg"],"name":"result"}}],[11,"deserialize","","",112,{"inputs":[{"name":"__d"}],"output":{"generics":["normalborder"],"name":"result"}}],[11,"deserialize_in_place","","",112,{"inputs":[{"name":"__d"},{"name":"normalborder"}],"output":{"name":"result"}}],[11,"deserialize","","",9,{"inputs":[{"name":"__d"}],"output":{"generics":["hittestresult"],"name":"result"}}],[11,"deserialize_in_place","","",9,{"inputs":[{"name":"__d"},{"name":"hittestresult"}],"output":{"name":"result"}}],[11,"deserialize","","",109,{"inputs":[{"name":"__d"}],"output":{"generics":["borderstyle"],"name":"result"}}],[11,"deserialize","","",81,{"inputs":[{"name":"__d"}],"output":{"generics":["propertyvalue"],"name":"result"}}],[11,"deserialize_in_place","","",81,{"inputs":[{"name":"__d"},{"name":"propertyvalue"}],"output":{"name":"result"}}],[11,"deserialize","","",97,{"inputs":[{"name":"__d"}],"output":{"generics":["filterop"],"name":"result"}}],[11,"deserialize","","",24,{"inputs":[{"name":"__d"}],"output":{"generics":["borderdisplayitem"],"name":"result"}}],[11,"deserialize_in_place","","",24,{"inputs":[{"name":"__d"},{"name":"borderdisplayitem"}],"output":{"name":"result"}}],[11,"deserialize","","",63,{"inputs":[{"name":"__d"}],"output":{"generics":["extendmode"],"name":"result"}}],[11,"deserialize","","",82,{"inputs":[{"name":"__d"}],"output":{"generics":["fontrendermode"],"name":"result"}}],[11,"deserialize","","",68,{"inputs":[{"name":"__d"}],"output":{"generics":["radialgradient"],"name":"result"}}],[11,"deserialize_in_place","","",68,{"inputs":[{"name":"__d"},{"name":"radialgradient"}],"output":{"name":"result"}}],[11,"deserialize","","",70,{"inputs":[{"name":"__d"}],"output":{"generics":["premultipliedcolorf"],"name":"result"}}],[11,"deserialize_in_place","","",70,{"inputs":[{"name":"__d"},{"name":"premultipliedcolorf"}],"output":{"name":"result"}}],[11,"deserialize","","",98,{"inputs":[{"name":"__d"}],"output":{"generics":["primitiveinfo"],"name":"result"}}],[11,"deserialize_in_place","","",98,{"inputs":[{"name":"__d"},{"name":"primitiveinfo"}],"output":{"name":"result"}}],[11,"deserialize","","",35,{"inputs":[{"name":"__d"}],"output":{"generics":["yuvformat"],"name":"result"}}],[11,"deserialize","","",15,{"inputs":[{"name":"__d"}],"output":{"generics":["yuvdata"],"name":"result"}}],[11,"deserialize","","",108,{"inputs":[{"name":"__d"}],"output":{"generics":["documentmsg"],"name":"result"}}],[11,"deserialize","","",48,{"inputs":[{"name":"__d"}],"output":{"generics":["epoch"],"name":"result"}}],[11,"deserialize_in_place","","",48,{"inputs":[{"name":"__d"},{"name":"epoch"}],"output":{"name":"result"}}],[11,"deserialize","","",41,{"inputs":[{"name":"__d"}],"output":{"generics":["propertybinding"],"name":"result"}}],[11,"deserialize","","",100,{"inputs":[{"name":"__d"}],"output":{"generics":["borderradius"],"name":"result"}}],[11,"deserialize_in_place","","",100,{"inputs":[{"name":"__d"},{"name":"borderradius"}],"output":{"name":"result"}}],[11,"deserialize","","",57,{"inputs":[{"name":"__d"}],"output":{"generics":["linestyle"],"name":"result"}}],[11,"deserialize","","",145,{"inputs":[{"name":"__d"}],"output":{"generics":["externalevent"],"name":"result"}}],[11,"deserialize_in_place","","",145,{"inputs":[{"name":"__d"},{"name":"externalevent"}],"output":{"name":"result"}}],[11,"deserialize","","",64,{"inputs":[{"name":"__d"}],"output":{"generics":["resourceupdate"],"name":"result"}}],[11,"deserialize","","",134,{"inputs":[{"name":"__d"}],"output":{"generics":["propertybindingid"],"name":"result"}}],[11,"deserialize_in_place","","",134,{"inputs":[{"name":"__d"},{"name":"propertybindingid"}],"output":{"name":"result"}}],[11,"deserialize","","",55,{"inputs":[{"name":"__d"}],"output":{"generics":["mixblendmode"],"name":"result"}}],[11,"deserialize","","",39,{"inputs":[{"name":"__d"}],"output":{"generics":["imagedata"],"name":"result"}}],[11,"deserialize","","",83,{"inputs":[{"name":"__d"}],"output":{"generics":["boxshadowclipmode"],"name":"result"}}],[11,"deserialize","","",54,{"inputs":[{"name":"__d"}],"output":{"generics":["propertybindingkey"],"name":"result"}}],[11,"deserialize_in_place","","",54,{"inputs":[{"name":"__d"},{"name":"propertybindingkey"}],"output":{"name":"result"}}],[11,"deserialize","","",65,{"inputs":[{"name":"__d"}],"output":{"generics":["scrollframedisplayitem"],"name":"result"}}],[11,"deserialize_in_place","","",65,{"inputs":[{"name":"__d"},{"name":"scrollframedisplayitem"}],"output":{"name":"result"}}],[11,"deserialize","","",107,{"inputs":[{"name":"__d"}],"output":{"generics":["localclip"],"name":"result"}}],[11,"deserialize","","",79,{"inputs":[{"name":"__d"}],"output":{"generics":["clipid"],"name":"result"}}],[11,"deserialize","","",44,{"inputs":[{"name":"__d"}],"output":{"generics":["linedisplayitem"],"name":"result"}}],[11,"deserialize_in_place","","",44,{"inputs":[{"name":"__d"},{"name":"linedisplayitem"}],"output":{"name":"result"}}],[11,"deserialize","","",59,{"inputs":[{"name":"__d"}],"output":{"generics":["scrolllocation"],"name":"result"}}],[11,"deserialize","","",99,{"inputs":[{"name":"__d"}],"output":{"generics":["scrolllayerstate"],"name":"result"}}],[11,"deserialize_in_place","","",99,{"inputs":[{"name":"__d"},{"name":"scrolllayerstate"}],"output":{"name":"result"}}],[11,"deserialize","","",106,{"inputs":[{"name":"__d"}],"output":{"generics":["clipandscrollinfo"],"name":"result"}}],[11,"deserialize_in_place","","",106,{"inputs":[{"name":"__d"},{"name":"clipandscrollinfo"}],"output":{"name":"result"}}],[11,"deserialize","","",23,{"inputs":[{"name":"__d"}],"output":{"generics":["ninepatchdescriptor"],"name":"result"}}],[11,"deserialize_in_place","","",23,{"inputs":[{"name":"__d"},{"name":"ninepatchdescriptor"}],"output":{"name":"result"}}],[11,"deserialize","","",71,{"inputs":[{"name":"__d"}],"output":{"generics":["imagerendering"],"name":"result"}}],[11,"deserialize","","",26,{"inputs":[{"name":"__d"}],"output":{"generics":["addfontinstance"],"name":"result"}}],[11,"deserialize_in_place","","",26,{"inputs":[{"name":"__d"},{"name":"addfontinstance"}],"output":{"name":"result"}}],[11,"deserialize","","",17,{"inputs":[{"name":"__d"}],"output":{"generics":["borderside"],"name":"result"}}],[11,"deserialize_in_place","","",17,{"inputs":[{"name":"__d"},{"name":"borderside"}],"output":{"name":"result"}}],[11,"deserialize","","",110,{"inputs":[{"name":"__d"}],"output":{"generics":["genericdisplayitem"],"name":"result"}}],[11,"deserialize_in_place","","",110,{"inputs":[{"name":"__d"},{"name":"genericdisplayitem"}],"output":{"name":"result"}}],[11,"deserialize","","",5,{"inputs":[{"name":"__d"}],"output":{"generics":["borderdetails"],"name":"result"}}],[11,"deserialize","webrender::api::channel","",143,{"inputs":[{"name":"d"}],"output":{"generics":["msgreceiver"],"name":"result"}}],[11,"deserialize","webrender::api","",75,{"inputs":[{"name":"__d"}],"output":{"generics":["iframedisplayitem"],"name":"result"}}],[11,"deserialize_in_place","","",75,{"inputs":[{"name":"__d"},{"name":"iframedisplayitem"}],"output":{"name":"result"}}],[11,"deserialize","","",133,{"inputs":[{"name":"__d"}],"output":{"generics":["fontinstanceflags"],"name":"result"}}],[11,"deserialize_in_place","","",133,{"inputs":[{"name":"__d"},{"name":"fontinstanceflags"}],"output":{"name":"result"}}],[11,"deserialize","","",89,{"inputs":[{"name":"__d"}],"output":{"generics":["gradientstop"],"name":"result"}}],[11,"deserialize_in_place","","",89,{"inputs":[{"name":"__d"},{"name":"gradientstop"}],"output":{"name":"result"}}],[11,"deserialize","","",31,{"inputs":[{"name":"__d"}],"output":{"generics":["glyphoptions"],"name":"result"}}],[11,"deserialize_in_place","","",31,{"inputs":[{"name":"__d"},{"name":"glyphoptions"}],"output":{"name":"result"}}],[11,"deserialize","","",78,{"inputs":[{"name":"__d"}],"output":{"generics":["imagedisplayitem"],"name":"result"}}],[11,"deserialize_in_place","","",78,{"inputs":[{"name":"__d"},{"name":"imagedisplayitem"}],"output":{"name":"result"}}],[11,"deserialize","","",113,{"inputs":[{"name":"__d"}],"output":{"generics":["externalimagedata"],"name":"result"}}],[11,"deserialize_in_place","","",113,{"inputs":[{"name":"__d"},{"name":"externalimagedata"}],"output":{"name":"result"}}],[11,"deserialize","","",93,{"inputs":[{"name":"__d"}],"output":{"generics":["textdisplayitem"],"name":"result"}}],[11,"deserialize_in_place","","",93,{"inputs":[{"name":"__d"},{"name":"textdisplayitem"}],"output":{"name":"result"}}],[11,"deserialize","webrender::api::channel","",142,{"inputs":[{"name":"d"}],"output":{"generics":["msgsender"],"name":"result"}}],[11,"deserialize","webrender::api","",60,{"inputs":[{"name":"__d"}],"output":{"generics":["stickyoffsetbounds"],"name":"result"}}],[11,"deserialize_in_place","","",60,{"inputs":[{"name":"__d"},{"name":"stickyoffsetbounds"}],"output":{"name":"result"}}],[11,"deserialize","","",144,{"inputs":[{"name":"__d"}],"output":{"generics":["renderapisender"],"name":"result"}}],[11,"deserialize_in_place","","",144,{"inputs":[{"name":"__d"},{"name":"renderapisender"}],"output":{"name":"result"}}],[11,"deserialize","","",90,{"inputs":[{"name":"__d"}],"output":{"generics":["borderwidths"],"name":"result"}}],[11,"deserialize_in_place","","",90,{"inputs":[{"name":"__d"},{"name":"borderwidths"}],"output":{"name":"result"}}],[11,"deserialize","","",85,{"inputs":[{"name":"__d"}],"output":{"generics":["dynamicproperties"],"name":"result"}}],[11,"deserialize_in_place","","",85,{"inputs":[{"name":"__d"},{"name":"dynamicproperties"}],"output":{"name":"result"}}],[11,"deserialize","","",51,{"inputs":[{"name":"__d"}],"output":{"generics":["imagekey"],"name":"result"}}],[11,"deserialize_in_place","","",51,{"inputs":[{"name":"__d"},{"name":"imagekey"}],"output":{"name":"result"}}],[11,"deserialize","","",80,{"inputs":[{"name":"__d"}],"output":{"generics":["stickyframedisplayitem"],"name":"result"}}],[11,"deserialize_in_place","","",80,{"inputs":[{"name":"__d"},{"name":"stickyframedisplayitem"}],"output":{"name":"result"}}],[11,"deserialize","","",147,{"inputs":[{"name":"__d"}],"output":{"generics":["zoomfactor"],"name":"result"}}],[11,"deserialize_in_place","","",147,{"inputs":[{"name":"__d"},{"name":"zoomfactor"}],"output":{"name":"result"}}],[11,"deserialize","","",95,{"inputs":[{"name":"__d"}],"output":{"generics":["radialgradientborder"],"name":"result"}}],[11,"deserialize_in_place","","",95,{"inputs":[{"name":"__d"},{"name":"radialgradientborder"}],"output":{"name":"result"}}],[11,"deserialize","","",73,{"inputs":[{"name":"__d"}],"output":{"generics":["documentid"],"name":"result"}}],[11,"deserialize_in_place","","",73,{"inputs":[{"name":"__d"},{"name":"documentid"}],"output":{"name":"result"}}],[11,"deserialize","","",45,{"inputs":[{"name":"__d"}],"output":{"generics":["clipdisplayitem"],"name":"result"}}],[11,"deserialize_in_place","","",45,{"inputs":[{"name":"__d"},{"name":"clipdisplayitem"}],"output":{"name":"result"}}],[11,"deserialize","","",25,{"inputs":[{"name":"__d"}],"output":{"generics":["externalimagetype"],"name":"result"}}],[11,"deserialize","","",18,{"inputs":[{"name":"__d"}],"output":{"generics":["scrolleventphase"],"name":"result"}}],[11,"deserialize","","",111,{"inputs":[{"name":"__d"}],"output":{"generics":["externalimageid"],"name":"result"}}],[11,"deserialize_in_place","","",111,{"inputs":[{"name":"__d"},{"name":"externalimageid"}],"output":{"name":"result"}}],[11,"deserialize","","",12,{"inputs":[{"name":"__d"}],"output":{"generics":["repeatmode"],"name":"result"}}],[11,"deserialize","","",140,{"inputs":[{"name":"__d"}],"output":{"generics":["itemrange"],"name":"result"}}],[11,"deserialize_in_place","","",140,{"inputs":[{"name":"__d"},{"name":"itemrange"}],"output":{"name":"result"}}],[11,"deserialize","","",37,{"inputs":[{"name":"__d"}],"output":{"generics":["pushstackingcontextdisplayitem"],"name":"result"}}],[11,"deserialize_in_place","","",37,{"inputs":[{"name":"__d"},{"name":"pushstackingcontextdisplayitem"}],"output":{"name":"result"}}],[11,"deserialize","","",62,{"inputs":[{"name":"__d"}],"output":{"generics":["subpixeloffset"],"name":"result"}}],[11,"deserialize","","",146,{"inputs":[{"name":"__d"}],"output":{"generics":["builtdisplaylistdescriptor"],"name":"result"}}],[11,"deserialize_in_place","","",146,{"inputs":[{"name":"__d"},{"name":"builtdisplaylistdescriptor"}],"output":{"name":"result"}}],[11,"deserialize","","",76,{"inputs":[{"name":"__d"}],"output":{"generics":["coloru"],"name":"result"}}],[11,"deserialize_in_place","","",76,{"inputs":[{"name":"__d"},{"name":"coloru"}],"output":{"name":"result"}}],[11,"deserialize","","",50,{"inputs":[{"name":"__d"}],"output":{"generics":["fontinstanceplatformoptions"],"name":"result"}}],[11,"deserialize_in_place","","",50,{"inputs":[{"name":"__d"},{"name":"fontinstanceplatformoptions"}],"output":{"name":"result"}}],[11,"deserialize","","",74,{"inputs":[{"name":"__d"}],"output":{"generics":["lineorientation"],"name":"result"}}],[11,"deserialize","","",92,{"inputs":[{"name":"__d"}],"output":{"generics":["scrollsensitivity"],"name":"result"}}],[11,"deserialize","","",91,{"inputs":[{"name":"__d"}],"output":{"generics":["fontvariation"],"name":"result"}}],[11,"deserialize_in_place","","",91,{"inputs":[{"name":"__d"},{"name":"fontvariation"}],"output":{"name":"result"}}],[11,"deserialize","","",114,{"inputs":[{"name":"__d"}],"output":{"generics":["clipmode"],"name":"result"}}],[11,"deserialize","","",58,{"inputs":[{"name":"__d"}],"output":{"generics":["glyphdimensions"],"name":"result"}}],[11,"deserialize_in_place","","",58,{"inputs":[{"name":"__d"},{"name":"glyphdimensions"}],"output":{"name":"result"}}],[11,"deserialize","","",61,{"inputs":[{"name":"__d"}],"output":{"generics":["fontkey"],"name":"result"}}],[11,"deserialize_in_place","","",61,{"inputs":[{"name":"__d"},{"name":"fontkey"}],"output":{"name":"result"}}],[11,"deserialize","","",49,{"inputs":[{"name":"__d"}],"output":{"generics":["yuvcolorspace"],"name":"result"}}],[11,"deserialize","","",87,{"inputs":[{"name":"__d"}],"output":{"generics":["fontlcdfilter"],"name":"result"}}],[11,"deserialize","","",101,{"inputs":[{"name":"__d"}],"output":{"generics":["nativefonthandle"],"name":"result"}}],[11,"deserialize_in_place","","",101,{"inputs":[{"name":"__d"},{"name":"nativefonthandle"}],"output":{"name":"result"}}],[11,"deserialize","","",86,{"inputs":[{"name":"__d"}],"output":{"generics":["stackingcontext"],"name":"result"}}],[11,"deserialize_in_place","","",86,{"inputs":[{"name":"__d"},{"name":"stackingcontext"}],"output":{"name":"result"}}],[11,"recv_payload","webrender::api::channel","",143,{"inputs":[{"name":"self"}],"output":{"generics":["payload","error"],"name":"result"}}],[11,"fmt","webrender::api","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",150,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",147,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"sub","","Returns the set difference of the two sets of flags.",133,{"inputs":[{"name":"self"},{"name":"fontinstanceflags"}],"output":{"name":"fontinstanceflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",132,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":{"name":"hittestflags"}}],[11,"recv","webrender::api::channel","",143,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"send","","",142,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"new","webrender::api","Construct a new zoom factor.",147,{"inputs":[{"name":"f32"}],"output":{"name":"zoomfactor"}}],[11,"get","","Get the zoom factor as an untyped float.",147,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"dummy","","",13,{"inputs":[],"output":{"name":"pipelineid"}}],[11,"get_namespace_id","","",141,{"inputs":[{"name":"self"}],"output":{"name":"idnamespace"}}],[11,"clone_sender","","",141,{"inputs":[{"name":"self"}],"output":{"name":"renderapisender"}}],[11,"add_document","","",141,{"inputs":[{"name":"self"},{"generics":["u32","devicepixel"],"name":"typedsize2d"},{"name":"i8"}],"output":{"name":"documentid"}}],[11,"delete_document","","",141,null],[11,"generate_font_key","","",141,{"inputs":[{"name":"self"}],"output":{"name":"fontkey"}}],[11,"generate_font_instance_key","","",141,{"inputs":[{"name":"self"}],"output":{"name":"fontinstancekey"}}],[11,"get_glyph_dimensions","","Gets the dimensions for the supplied glyph keys",141,{"inputs":[{"name":"self"},{"name":"fontinstancekey"},{"generics":["glyphkey"],"name":"vec"}],"output":{"generics":["option"],"name":"vec"}}],[11,"get_glyph_indices","","Gets the glyph indices for the supplied string. These can be used to construct GlyphKeys.",141,{"inputs":[{"name":"self"},{"name":"fontkey"},{"name":"str"}],"output":{"generics":["option"],"name":"vec"}}],[11,"generate_image_key","","Creates an `ImageKey`.",141,{"inputs":[{"name":"self"}],"output":{"name":"imagekey"}}],[11,"update_resources","","Add/remove/update resources such as images and fonts.",141,null],[11,"update_pipeline_resources","","Add/remove/update resources such as images and fonts.",141,null],[11,"send_external_event","","",141,null],[11,"notify_memory_pressure","","",141,null],[11,"shut_down","","",141,null],[11,"generate_property_binding_key","","Create a new unique key that can be used for animated property bindings.",141,{"inputs":[{"name":"self"}],"output":{"name":"propertybindingkey"}}],[11,"set_root_pipeline","","Sets the root pipeline.",141,null],[11,"remove_pipeline","","Removes data associated with a pipeline from the internal data structures. If the specified `pipeline_id` is for the root pipeline, the root pipeline is reset back to `None`.",141,null],[11,"set_display_list","","Supplies a new frame to WebRender.",141,null],[11,"send_transaction","","",141,null],[11,"scroll","","Scrolls the scrolling layer under the `cursor`",141,null],[11,"scroll_node_with_id","","",141,null],[11,"hit_test","","Does a hit test on display items in the specified document, at the given point. If a pipeline_id is specified, it is used to further restrict the hit results so that only items inside that pipeline are matched. If the HitTestFlags argument contains the FIND_ALL flag, then the vector of hit results will contain all display items that match, ordered from front to back.",141,{"inputs":[{"name":"self"},{"name":"documentid"},{"generics":["pipelineid"],"name":"option"},{"generics":["f32","worldpixel"],"name":"typedpoint2d"},{"name":"hittestflags"}],"output":{"name":"hittestresult"}}],[11,"set_page_zoom","","",141,null],[11,"set_pinch_zoom","","",141,null],[11,"set_pan","","",141,null],[11,"set_window_parameters","","",141,null],[11,"tick_scrolling_bounce_animations","","",141,null],[11,"get_scroll_node_state","","",141,{"inputs":[{"name":"self"},{"name":"documentid"}],"output":{"generics":["scrolllayerstate"],"name":"vec"}}],[11,"enable_frame_output","","Enable copying of the output of this pipeline id to an external texture for callers to consume.",141,null],[11,"generate_frame","","Generate a new frame. Optionally, supply a list of animated property bindings that should be used to resolve bindings in the current display list.",141,null],[11,"save_capture","","Save a capture of the current frame state for debugging.",141,null],[11,"load_capture","","Load a capture of the current frame state for debugging.",141,null],[11,"send_debug_cmd","","",141,null],[11,"get_format","","",15,{"inputs":[{"name":"self"}],"output":{"name":"yuvformat"}}],[11,"new","","",16,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"imageformat"},{"name":"bool"}],"output":{"name":"imagedescriptor"}}],[11,"compute_stride","","",16,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"new","","",149,null],[11,"new","","",20,{"inputs":[{"name":"u32"},{"generics":["f32","layerpixel"],"name":"typedpoint2d"},{"name":"fontrendermode"},{"name":"subpixeldirection"}],"output":{"name":"glyphkey"}}],[11,"from_raw","","",145,{"inputs":[{"name":"usize"}],"output":{"name":"externalevent"}}],[11,"unwrap","","Consumes self to make it obvious that the event should be forwarded only once.",145,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Create a new complex clip region.",30,{"inputs":[{"generics":["f32","layerpixel"],"name":"typedrect"},{"name":"borderradius"},{"name":"clipmode"}],"output":{"name":"complexclipregion"}}],[11,"get_plane_num","","",35,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_feature_string","","",35,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","","",134,{"inputs":[{"name":"u64"}],"output":{"name":"propertybindingid"}}],[11,"new","","",39,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"imagedata"}}],[11,"new_shared","","",39,{"inputs":[{"generics":["vec"],"name":"arc"}],"output":{"name":"imagedata"}}],[11,"new_blob_image","","",39,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"imagedata"}}],[11,"is_blob","","",39,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"uses_texture_cache","","",39,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[18,"SYNTHETIC_ITALICS","","",133,null],[18,"SYNTHETIC_BOLD","","",133,null],[18,"EMBEDDED_BITMAPS","","",133,null],[18,"SUBPIXEL_BGR","","",133,null],[18,"FORCE_GDI","","",133,null],[18,"FONT_SMOOTHING","","",133,null],[18,"FORCE_AUTOHINT","","",133,null],[18,"NO_AUTOHINT","","",133,null],[18,"VERTICAL_LAYOUT","","",133,null],[11,"empty","","Returns an empty set of flags.",133,{"inputs":[],"output":{"name":"fontinstanceflags"}}],[11,"all","","Returns the set containing all flags.",133,{"inputs":[],"output":{"name":"fontinstanceflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",133,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",133,{"inputs":[{"name":"u32"}],"output":{"generics":["fontinstanceflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",133,{"inputs":[{"name":"u32"}],"output":{"name":"fontinstanceflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",133,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",133,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",133,{"inputs":[{"name":"self"},{"name":"fontinstanceflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",133,{"inputs":[{"name":"self"},{"name":"fontinstanceflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",133,null],[11,"remove","","Removes the specified flags in-place.",133,null],[11,"toggle","","Toggles the specified flags in-place.",133,null],[11,"set","","Inserts or removes the specified flags depending on the passed value.",133,null],[11,"get_feature_string","","",49,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","","",51,{"inputs":[{"name":"idnamespace"},{"name":"u32"}],"output":{"name":"imagekey"}}],[11,"dummy","","",51,{"inputs":[],"output":{"name":"imagekey"}}],[11,"display_item","","",151,{"inputs":[{"name":"self"}],"output":{"name":"genericdisplayitem"}}],[11,"rect","","",151,{"inputs":[{"name":"self"}],"output":{"generics":["f32","layerpixel"],"name":"typedrect"}}],[11,"get_layer_primitive_info","","",151,{"inputs":[{"name":"self"},{"name":"typedvector2d"}],"output":{"generics":["layerpixel"],"name":"primitiveinfo"}}],[11,"local_clip","","",151,{"inputs":[{"name":"self"}],"output":{"name":"localclip"}}],[11,"clip_and_scroll","","",151,{"inputs":[{"name":"self"}],"output":{"name":"clipandscrollinfo"}}],[11,"item","","",151,{"inputs":[{"name":"self"}],"output":{"name":"specificdisplayitem"}}],[11,"complex_clip","","",151,null],[11,"gradient_stops","","",151,{"inputs":[{"name":"self"}],"output":{"generics":["gradientstop"],"name":"itemrange"}}],[11,"glyphs","","",151,{"inputs":[{"name":"self"}],"output":{"generics":["glyphinstance"],"name":"itemrange"}}],[11,"filters","","",151,{"inputs":[{"name":"self"}],"output":{"generics":["filterop"],"name":"itemrange"}}],[11,"display_list","","",151,{"inputs":[{"name":"self"}],"output":{"name":"builtdisplaylist"}}],[11,"is_backface_visible","","",151,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sub_iter","","",151,{"inputs":[{"name":"self"}],"output":{"name":"builtdisplaylistiter"}}],[11,"limit_by","","",52,{"inputs":[{"name":"self"},{"name":"fontrendermode"}],"output":{"name":"subpixeldirection"}}],[11,"new","","",53,{"inputs":[],"output":{"name":"resourceupdates"}}],[11,"add_image","","",53,null],[11,"update_image","","",53,null],[11,"delete_image","","",53,null],[11,"add_raw_font","","",53,null],[11,"add_native_font","","",53,null],[11,"delete_font","","",53,null],[11,"add_font_instance","","",53,null],[11,"delete_font_instance","","",53,null],[11,"merge","","",53,null],[11,"clear","","",53,null],[11,"with","","",54,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"propertyvalue"}}],[11,"new","","",54,{"inputs":[{"name":"u64"}],"output":{"name":"propertybindingkey"}}],[11,"new","","",56,{"inputs":[{"name":"pipelineid"},{"generics":["f32","layerpixel"],"name":"typedsize2d"}],"output":{"name":"displaylistbuilder"}}],[11,"with_capacity","","",56,{"inputs":[{"name":"pipelineid"},{"generics":["f32","layerpixel"],"name":"typedsize2d"},{"name":"usize"}],"output":{"name":"displaylistbuilder"}}],[11,"content_size","","Return the content size for this display list",56,{"inputs":[{"name":"self"}],"output":{"generics":["f32","layerpixel"],"name":"typedsize2d"}}],[11,"save","","Saves the current display list state, so it may be `restore()`'d.",56,null],[11,"restore","","Restores the state of the builder to when `save()` was last called.",56,null],[11,"clear_save","","Discards the builder's save (indicating the attempted operation was sucessful).",56,null],[11,"print_display_list","","",56,null],[11,"push_rect","","",56,null],[11,"push_clear_rect","","",56,null],[11,"push_line","","",56,null],[11,"push_image","","",56,null],[11,"push_yuv_image","","Push a yuv image. All planar data in yuv image should use the same buffer type.",56,null],[11,"push_text","","",56,null],[11,"create_gradient","","",56,{"inputs":[{"name":"self"},{"generics":["f32","layerpixel"],"name":"typedpoint2d"},{"generics":["f32","layerpixel"],"name":"typedpoint2d"},{"generics":["gradientstop"],"name":"vec"},{"name":"extendmode"}],"output":{"name":"gradient"}}],[11,"create_radial_gradient","","",56,{"inputs":[{"name":"self"},{"generics":["f32","layerpixel"],"name":"typedpoint2d"},{"generics":["f32","layerpixel"],"name":"typedsize2d"},{"generics":["gradientstop"],"name":"vec"},{"name":"extendmode"}],"output":{"name":"radialgradient"}}],[11,"create_complex_radial_gradient","","",56,{"inputs":[{"name":"self"},{"generics":["f32","layerpixel"],"name":"typedpoint2d"},{"name":"f32"},{"generics":["f32","layerpixel"],"name":"typedpoint2d"},{"name":"f32"},{"name":"f32"},{"generics":["gradientstop"],"name":"vec"},{"name":"extendmode"}],"output":{"name":"radialgradient"}}],[11,"push_border","","",56,null],[11,"push_box_shadow","","",56,null],[11,"push_gradient","","Pushes a linear gradient to be displayed.",56,null],[11,"push_radial_gradient","","Pushes a radial gradient to be displayed.",56,null],[11,"push_stacking_context","","",56,null],[11,"pop_stacking_context","","",56,null],[11,"push_stops","","",56,null],[11,"define_scroll_frame","","",56,{"inputs":[{"name":"self"},{"generics":["clipid"],"name":"option"},{"generics":["f32","layerpixel"],"name":"typedrect"},{"generics":["f32","layerpixel"],"name":"typedrect"},{"name":"i"},{"generics":["imagemask"],"name":"option"},{"name":"scrollsensitivity"}],"output":{"name":"clipid"}}],[11,"define_scroll_frame_with_parent","","",56,{"inputs":[{"name":"self"},{"generics":["clipid"],"name":"option"},{"name":"clipid"},{"generics":["f32","layerpixel"],"name":"typedrect"},{"generics":["f32","layerpixel"],"name":"typedrect"},{"name":"i"},{"generics":["imagemask"],"name":"option"},{"name":"scrollsensitivity"}],"output":{"name":"clipid"}}],[11,"define_clip","","",56,{"inputs":[{"name":"self"},{"generics":["clipid"],"name":"option"},{"generics":["f32","layerpixel"],"name":"typedrect"},{"name":"i"},{"generics":["imagemask"],"name":"option"}],"output":{"name":"clipid"}}],[11,"define_clip_with_parent","","",56,{"inputs":[{"name":"self"},{"generics":["clipid"],"name":"option"},{"name":"clipid"},{"generics":["f32","layerpixel"],"name":"typedrect"},{"name":"i"},{"generics":["imagemask"],"name":"option"}],"output":{"name":"clipid"}}],[11,"define_sticky_frame","","",56,{"inputs":[{"name":"self"},{"generics":["clipid"],"name":"option"},{"generics":["f32","layerpixel"],"name":"typedrect"},{"generics":["option","unknownunit"],"name":"typedsideoffsets2d"},{"name":"stickyoffsetbounds"},{"name":"stickyoffsetbounds"},{"generics":["f32","layerpixel"],"name":"typedvector2d"}],"output":{"name":"clipid"}}],[11,"push_clip_id","","",56,null],[11,"push_clip_and_scroll_info","","",56,null],[11,"pop_clip_id","","",56,null],[11,"push_iframe","","",56,null],[11,"push_shadow","","",56,null],[11,"pop_all_shadows","","",56,null],[11,"finalize","","",56,null],[11,"from_data","","",148,{"inputs":[{"generics":["u8"],"name":"vec"},{"name":"builtdisplaylistdescriptor"}],"output":{"name":"builtdisplaylist"}}],[11,"into_data","","",148,null],[11,"data","","",148,null],[11,"item_slice","","",148,null],[11,"descriptor","","",148,{"inputs":[{"name":"self"}],"output":{"name":"builtdisplaylistdescriptor"}}],[11,"times","","",148,null],[11,"iter","","",148,{"inputs":[{"name":"self"}],"output":{"name":"builtdisplaylistiter"}}],[11,"get","","",148,{"inputs":[{"name":"self"},{"name":"itemrange"}],"output":{"name":"auxiter"}}],[11,"new","","",60,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"stickyoffsetbounds"}}],[11,"new","","",61,{"inputs":[{"name":"idnamespace"},{"name":"u32"}],"output":{"name":"fontkey"}}],[11,"is_empty","","",140,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"bytes_per_pixel","","",66,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"new","","Constructs a new `ColorF` from its components.",69,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"colorf"}}],[11,"scale_rgb","","Multiply the RGB channels (but not alpha) with a given factor.",69,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"colorf"}}],[11,"to_array","","",69,null],[11,"premultiplied","","Multiply the RGB components with the alpha channel.",69,{"inputs":[{"name":"self"}],"output":{"name":"premultipliedcolorf"}}],[11,"new","","",152,{"inputs":[],"output":{"name":"transaction"}}],[11,"is_empty","","",152,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"update_epoch","","",152,null],[11,"set_root_pipeline","","Sets the root pipeline.",152,null],[11,"remove_pipeline","","Removes data associated with a pipeline from the internal data structures. If the specified `pipeline_id` is for the root pipeline, the root pipeline is reset back to `None`.",152,null],[11,"set_display_list","","Supplies a new frame to WebRender.",152,null],[11,"update_resources","","",152,null],[11,"set_window_parameters","","",152,null],[11,"scroll","","Scrolls the scrolling layer under the `cursor`",152,null],[11,"scroll_node_with_id","","",152,null],[11,"set_page_zoom","","",152,null],[11,"set_pinch_zoom","","",152,null],[11,"set_pan","","",152,null],[11,"tick_scrolling_bounce_animations","","",152,null],[11,"generate_frame","","Generate a new frame.",152,null],[11,"update_dynamic_properties","","Supply a list of animated property bindings that should be used to resolve bindings in the current display list.",152,null],[18,"BLACK","","",70,null],[18,"TRANSPARENT","","",70,null],[11,"to_array","","",70,null],[18,"FIND_ALL","","",132,null],[18,"POINT_RELATIVE_TO_PIPELINE_VIEWPORT","","",132,null],[11,"empty","","Returns an empty set of flags.",132,{"inputs":[],"output":{"name":"hittestflags"}}],[11,"all","","Returns the set containing all flags.",132,{"inputs":[],"output":{"name":"hittestflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",132,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",132,{"inputs":[{"name":"u8"}],"output":{"generics":["hittestflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",132,{"inputs":[{"name":"u8"}],"output":{"name":"hittestflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",132,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",132,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",132,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",132,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",132,null],[11,"remove","","Removes the specified flags in-place.",132,null],[11,"toggle","","Toggles the specified flags in-place.",132,null],[11,"set","","Inserts or removes the specified flags depending on the passed value.",132,null],[11,"new","","Constructs a new additive `ColorU` from its components.",76,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"coloru"}}],[11,"root_scroll_node","","",79,{"inputs":[{"name":"pipelineid"}],"output":{"name":"clipid"}}],[11,"root_reference_frame","","",79,{"inputs":[{"name":"pipelineid"}],"output":{"name":"clipid"}}],[11,"new","","",79,{"inputs":[{"name":"u64"},{"name":"pipelineid"}],"output":{"name":"clipid"}}],[11,"pipeline_id","","",79,{"inputs":[{"name":"self"}],"output":{"name":"pipelineid"}}],[11,"external_id","","",79,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"is_root_scroll_node","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"limit_by","","",82,{"inputs":[{"name":"self"},{"name":"fontrendermode"}],"output":{"name":"fontrendermode"}}],[11,"new","","",96,{"inputs":[{"name":"idnamespace"},{"name":"u32"}],"output":{"name":"fontinstancekey"}}],[11,"new","","",98,{"inputs":[{"generics":["f32","layerpixel"],"name":"typedrect"}],"output":{"generics":["layerpixel"],"name":"primitiveinfo"}}],[11,"with_clip_rect","","",98,{"inputs":[{"generics":["f32","layerpixel"],"name":"typedrect"},{"generics":["f32","layerpixel"],"name":"typedrect"}],"output":{"generics":["layerpixel"],"name":"primitiveinfo"}}],[11,"with_clip","","",98,{"inputs":[{"generics":["f32","layerpixel"],"name":"typedrect"},{"name":"localclip"}],"output":{"generics":["layerpixel"],"name":"primitiveinfo"}}],[11,"zero","","",100,{"inputs":[],"output":{"name":"borderradius"}}],[11,"uniform","","",100,{"inputs":[{"name":"f32"}],"output":{"name":"borderradius"}}],[11,"uniform_size","","",100,{"inputs":[{"generics":["f32","layerpixel"],"name":"typedsize2d"}],"output":{"name":"borderradius"}}],[11,"is_uniform","","",100,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"is_uniform_size","","",100,{"inputs":[{"name":"self"}],"output":{"generics":["typedsize2d"],"name":"option"}}],[11,"is_zero","","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","",153,{"inputs":[{"name":"builtdisplaylist"}],"output":{"name":"builtdisplaylistiter"}}],[11,"new_with_list_and_data","","",153,null],[11,"display_list","","",153,{"inputs":[{"name":"self"}],"output":{"name":"builtdisplaylist"}}],[11,"next","","",153,{"inputs":[{"name":"self"}],"output":{"generics":["displayitemref"],"name":"option"}}],[11,"as_ref","","",153,{"inputs":[{"name":"self"}],"output":{"name":"displayitemref"}}],[11,"starting_stacking_context","","",153,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"skip_current_stacking_context","","",153,null],[11,"current_stacking_context_empty","","",153,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"peek","","",153,{"inputs":[{"name":"self"}],"output":{"generics":["displayitemref"],"name":"option"}}],[11,"new","","",144,{"inputs":[{"generics":["apimsg"],"name":"msgsender"},{"generics":["payload"],"name":"msgsender"}],"output":{"name":"renderapisender"}}],[11,"create_api","","Creates a new resource API object with a dedicated namespace.",144,{"inputs":[{"name":"self"}],"output":{"name":"renderapi"}}],[11,"simple","","",106,{"inputs":[{"name":"clipid"}],"output":{"name":"clipandscrollinfo"}}],[11,"new","","",106,{"inputs":[{"name":"clipid"},{"name":"clipid"}],"output":{"name":"clipandscrollinfo"}}],[11,"clip_node_id","","",106,{"inputs":[{"name":"self"}],"output":{"name":"clipid"}}],[11,"clip_rect","","",107,{"inputs":[{"name":"self"}],"output":{"name":"typedrect"}}],[11,"create_with_offset","","",107,{"inputs":[{"name":"self"},{"name":"typedvector2d"}],"output":{"name":"localclip"}}]],"paths":[[3,"Payload"],[8,"PayloadSenderHelperMethods"],[8,"PayloadReceiverHelperMethods"],[3,"BoxShadowDisplayItem"],[3,"BlobImageRequest"],[4,"BorderDetails"],[3,"FontInstanceOptions"],[3,"AddImage"],[3,"ResourceId"],[3,"HitTestResult"],[3,"IdNamespace"],[3,"YuvImageDisplayItem"],[4,"RepeatMode"],[3,"PipelineId"],[4,"AddFont"],[4,"YuvData"],[3,"ImageDescriptor"],[3,"BorderSide"],[4,"ScrollEventPhase"],[4,"BorderRadiusKind"],[3,"GlyphKey"],[3,"ImageMask"],[4,"TransformStyle"],[3,"NinePatchDescriptor"],[3,"BorderDisplayItem"],[4,"ExternalImageType"],[3,"AddFontInstance"],[8,"BlobImageRenderer"],[3,"Gradient"],[3,"BlobImageDescriptor"],[3,"ComplexClipRegion"],[3,"GlyphOptions"],[4,"ScrollClamping"],[4,"FontTemplate"],[3,"RadialGradientDisplayItem"],[4,"YuvFormat"],[3,"Shadow"],[3,"PushStackingContextDisplayItem"],[4,"FontHinting"],[4,"ImageData"],[3,"RectangleDisplayItem"],[4,"PropertyBinding"],[3,"GradientDisplayItem"],[4,"DebugCommand"],[3,"LineDisplayItem"],[3,"ClipDisplayItem"],[3,"GradientBorder"],[3,"ImageBorder"],[3,"Epoch"],[4,"YuvColorSpace"],[3,"FontInstancePlatformOptions"],[3,"ImageKey"],[4,"SubpixelDirection"],[3,"ResourceUpdates"],[3,"PropertyBindingKey"],[4,"MixBlendMode"],[3,"DisplayListBuilder"],[4,"LineStyle"],[3,"GlyphDimensions"],[4,"ScrollLocation"],[3,"StickyOffsetBounds"],[3,"FontKey"],[4,"SubpixelOffset"],[4,"ExtendMode"],[4,"ResourceUpdate"],[3,"ScrollFrameDisplayItem"],[4,"ImageFormat"],[4,"ScrollPolicy"],[3,"RadialGradient"],[3,"ColorF"],[3,"PremultipliedColorF"],[4,"ImageRendering"],[8,"BlobImageResources"],[3,"DocumentId"],[4,"LineOrientation"],[3,"IframeDisplayItem"],[3,"ColorU"],[4,"ApiMsg"],[3,"ImageDisplayItem"],[4,"ClipId"],[3,"StickyFrameDisplayItem"],[3,"PropertyValue"],[4,"FontRenderMode"],[4,"BoxShadowClipMode"],[4,"BlobImageError"],[3,"DynamicProperties"],[3,"StackingContext"],[4,"FontLCDFilter"],[3,"GlyphInstance"],[3,"GradientStop"],[3,"BorderWidths"],[3,"FontVariation"],[4,"ScrollSensitivity"],[3,"TextDisplayItem"],[3,"RasterizedBlobImage"],[3,"RadialGradientBorder"],[3,"FontInstanceKey"],[4,"FilterOp"],[3,"PrimitiveInfo"],[3,"ScrollLayerState"],[3,"BorderRadius"],[3,"NativeFontHandle"],[3,"HitTestItem"],[4,"SpecificDisplayItem"],[8,"RenderNotifier"],[3,"UpdateImage"],[3,"ClipAndScrollInfo"],[4,"LocalClip"],[4,"DocumentMsg"],[4,"BorderStyle"],[3,"GenericDisplayItem"],[3,"ExternalImageId"],[3,"NormalBorder"],[3,"ExternalImageData"],[4,"ClipMode"],[3,"CpuProfile"],[3,"GpuProfile"],[3,"ExternalImage"],[3,"GraphicsApiInfo"],[3,"RendererOptions"],[3,"RendererStats"],[4,"RendererKind"],[4,"ExternalImageSource"],[4,"GraphicsApi"],[4,"ReadPixelsFormat"],[3,"BinaryRecorder"],[3,"DebugFlags"],[3,"Renderer"],[8,"ApiRecordingReceiver"],[8,"OutputImageHandler"],[8,"ExternalImageHandler"],[8,"ThreadListener"],[3,"HitTestFlags"],[3,"FontInstanceFlags"],[3,"PropertyBindingId"],[3,"ScrollLayerPixel"],[3,"LayerPixel"],[3,"DevicePixel"],[3,"WorldPixel"],[3,"Tiles"],[3,"ItemRange"],[3,"RenderApi"],[3,"MsgSender"],[3,"MsgReceiver"],[3,"RenderApiSender"],[3,"ExternalEvent"],[3,"BuiltDisplayListDescriptor"],[3,"ZoomFactor"],[3,"BuiltDisplayList"],[3,"AuxIter"],[3,"SaveState"],[3,"DisplayItemRef"],[3,"Transaction"],[3,"BuiltDisplayListIter"]]};
searchIndex["webrender_api"] = {"doc":"","items":[[3,"ResourceUpdates","webrender_api","The resource updates for a given transaction (they must be applied in the same frame).",null,null],[12,"updates","","",0,null],[3,"Transaction","","A Transaction is a group of commands to apply atomically to a document.",null,null],[3,"AddImage","","",null,null],[12,"key","","",1,null],[12,"descriptor","","",1,null],[12,"data","","",1,null],[12,"tiling","","",1,null],[3,"UpdateImage","","",null,null],[12,"key","","",2,null],[12,"descriptor","","",2,null],[12,"data","","",2,null],[12,"dirty_rect","","",2,null],[3,"HitTestItem","","",null,null],[12,"pipeline","","The pipeline that the display item that was hit belongs to.",3,null],[12,"tag","","The tag of the hit display item.",3,null],[12,"point_in_viewport","","The hit point in the coordinate space of the \"viewport\" of the display item. The viewport is the scroll node formed by the root reference frame of the display item's pipeline.",3,null],[12,"point_relative_to_item","","The coordinates of the original hit test point relative to the origin of this item. This is useful for calculating things like text offsets in the client.",3,null],[3,"HitTestResult","","",null,null],[12,"items","","",4,null],[3,"HitTestFlags","","",null,null],[3,"AddFontInstance","","",null,null],[12,"key","","",5,null],[12,"font_key","","",5,null],[12,"glyph_size","","",5,null],[12,"options","","",5,null],[12,"platform_options","","",5,null],[12,"variations","","",5,null],[3,"Epoch","","",null,null],[12,"0","","",6,null],[3,"IdNamespace","","",null,null],[12,"0","","",7,null],[3,"DocumentId","","",null,null],[12,"0","","",8,null],[12,"1","","",8,null],[3,"PipelineId","","From the point of view of WR, `PipelineId` is completely opaque and generic as long as it's clonable, serializable, comparable, and hashable.",null,null],[12,"0","","",9,null],[12,"1","","",9,null],[3,"ResourceId","","",null,null],[12,"0","","",10,null],[3,"ExternalEvent","","An opaque pointer-sized value.",null,null],[3,"RenderApiSender","","",null,null],[3,"RenderApi","","",null,null],[3,"ScrollLayerState","","",null,null],[12,"id","","",11,null],[12,"scroll_offset","","",11,null],[3,"ZoomFactor","","Represents a zoom factor.",null,null],[3,"PropertyBindingId","","",null,null],[3,"PropertyBindingKey","","A unique key that is used for connecting animated property values to bindings in the display list.",null,null],[12,"id","","",12,null],[3,"PropertyValue","","The current value of an animated property. This is supplied by the calling code.",null,null],[12,"key","","",13,null],[12,"value","","",13,null],[3,"DynamicProperties","","When using `generate_frame()`, a list of `PropertyValue` structures can optionally be supplied to provide the current value of any animated properties.",null,null],[12,"transforms","","",14,null],[12,"floats","","",14,null],[3,"PremultipliedColorF","","Represents pre-multiplied RGBA colors with floating point numbers.",null,null],[12,"r","","",15,null],[12,"g","","",15,null],[12,"b","","",15,null],[12,"a","","",15,null],[3,"ColorF","","Represents RGBA screen colors with floating point numbers.",null,null],[12,"r","","",16,null],[12,"g","","",16,null],[12,"b","","",16,null],[12,"a","","",16,null],[3,"ColorU","","Represents RGBA screen colors with one byte per channel.",null,null],[12,"r","","",17,null],[12,"g","","",17,null],[12,"b","","",17,null],[12,"a","","",17,null],[3,"ClipAndScrollInfo","","",null,null],[12,"scroll_node_id","","",18,null],[12,"clip_node_id","","",18,null],[3,"GenericDisplayItem","","The DI is generic over the specifics, while allows to use the \"complete\" version of it for convenient serialization.",null,null],[12,"item","","",19,null],[12,"clip_and_scroll","","",19,null],[12,"info","","",19,null],[3,"PrimitiveInfo","","",null,null],[12,"rect","","",20,null],[12,"local_clip","","",20,null],[12,"is_backface_visible","","",20,null],[12,"tag","","",20,null],[3,"ClipDisplayItem","","",null,null],[12,"id","","",21,null],[12,"image_mask","","",21,null],[3,"StickyOffsetBounds","","The minimum and maximum allowable offset for a sticky frame in a single dimension.",null,null],[12,"min","","The minimum offset for this frame, typically a negative value, which specifies how far in the negative direction the sticky frame can offset its contents in this dimension.",22,null],[12,"max","","The maximum offset for this frame, typically a positive value, which specifies how far in the positive direction the sticky frame can offset its contents in this dimension.",22,null],[3,"StickyFrameDisplayItem","","",null,null],[12,"id","","",23,null],[12,"margins","","The margins that should be maintained between the edge of the parent viewport and this sticky frame. A margin of None indicates that the sticky frame should not stick at all to that particular edge of the viewport.",23,null],[12,"vertical_offset_bounds","","The minimum and maximum vertical offsets for this sticky frame. Ignoring these constraints, the sticky frame will continue to stick to the edge of the viewport as its original position is scrolled out of view. Constraints specify a maximum and minimum offset from the original position relative to non-sticky content within the same scrolling frame.",23,null],[12,"horizontal_offset_bounds","","The minimum and maximum horizontal offsets for this sticky frame. Ignoring these constraints, the sticky frame will continue to stick to the edge of the viewport as its original position is scrolled out of view. Constraints specify a maximum and minimum offset from the original position relative to non-sticky content within the same scrolling frame.",23,null],[12,"previously_applied_offset","","The amount of offset that has already been applied to the sticky frame. A positive y component this field means that a top-sticky item was in a scrollframe that has been scrolled down, such that the sticky item's position needed to be offset downwards by `previously_applied_offset.y`. A negative y component corresponds to the upward offset applied due to bottom-stickiness. The x-axis works analogously.",23,null],[3,"ScrollFrameDisplayItem","","",null,null],[12,"id","","",24,null],[12,"image_mask","","",24,null],[12,"scroll_sensitivity","","",24,null],[3,"RectangleDisplayItem","","",null,null],[12,"color","","",25,null],[3,"LineDisplayItem","","",null,null],[12,"orientation","","",26,null],[12,"wavy_line_thickness","","",26,null],[12,"color","","",26,null],[12,"style","","",26,null],[3,"TextDisplayItem","","",null,null],[12,"font_key","","",27,null],[12,"color","","",27,null],[12,"glyph_options","","",27,null],[3,"NormalBorder","","",null,null],[12,"left","","",28,null],[12,"right","","",28,null],[12,"top","","",28,null],[12,"bottom","","",28,null],[12,"radius","","",28,null],[3,"NinePatchDescriptor","","",null,null],[12,"width","","",29,null],[12,"height","","",29,null],[12,"slice","","",29,null],[3,"ImageBorder","","",null,null],[12,"image_key","","",30,null],[12,"patch","","",30,null],[12,"fill","","Controls whether the center of the 9 patch image is rendered or ignored.",30,null],[12,"outset","","",30,null],[12,"repeat_horizontal","","",30,null],[12,"repeat_vertical","","",30,null],[3,"GradientBorder","","",null,null],[12,"gradient","","",31,null],[12,"outset","","",31,null],[3,"RadialGradientBorder","","",null,null],[12,"gradient","","",32,null],[12,"outset","","",32,null],[3,"BorderDisplayItem","","",null,null],[12,"widths","","",33,null],[12,"details","","",33,null],[3,"BorderRadius","","",null,null],[12,"top_left","","",34,null],[12,"top_right","","",34,null],[12,"bottom_left","","",34,null],[12,"bottom_right","","",34,null],[3,"BorderWidths","","",null,null],[12,"left","","",35,null],[12,"top","","",35,null],[12,"right","","",35,null],[12,"bottom","","",35,null],[3,"BorderSide","","",null,null],[12,"color","","",36,null],[12,"style","","",36,null],[3,"BoxShadowDisplayItem","","",null,null],[12,"box_bounds","","",37,null],[12,"offset","","",37,null],[12,"color","","",37,null],[12,"blur_radius","","",37,null],[12,"spread_radius","","",37,null],[12,"border_radius","","",37,null],[12,"clip_mode","","",37,null],[3,"Shadow","","",null,null],[12,"offset","","",38,null],[12,"color","","",38,null],[12,"blur_radius","","",38,null],[3,"Gradient","","",null,null],[12,"start_point","","",39,null],[12,"end_point","","",39,null],[12,"extend_mode","","",39,null],[3,"GradientDisplayItem","","",null,null],[12,"gradient","","",40,null],[12,"tile_size","","",40,null],[12,"tile_spacing","","",40,null],[3,"GradientStop","","",null,null],[12,"offset","","",41,null],[12,"color","","",41,null],[3,"RadialGradient","","",null,null],[12,"start_center","","",42,null],[12,"start_radius","","",42,null],[12,"end_center","","",42,null],[12,"end_radius","","",42,null],[12,"ratio_xy","","",42,null],[12,"extend_mode","","",42,null],[3,"RadialGradientDisplayItem","","",null,null],[12,"gradient","","",43,null],[12,"tile_size","","",43,null],[12,"tile_spacing","","",43,null],[3,"PushStackingContextDisplayItem","","",null,null],[12,"stacking_context","","",44,null],[3,"StackingContext","","",null,null],[12,"scroll_policy","","",45,null],[12,"transform","","",45,null],[12,"transform_style","","",45,null],[12,"perspective","","",45,null],[12,"mix_blend_mode","","",45,null],[3,"IframeDisplayItem","","",null,null],[12,"pipeline_id","","",46,null],[3,"ImageDisplayItem","","",null,null],[12,"image_key","","",47,null],[12,"stretch_size","","",47,null],[12,"tile_spacing","","",47,null],[12,"image_rendering","","",47,null],[3,"YuvImageDisplayItem","","",null,null],[12,"yuv_data","","",48,null],[12,"color_space","","",48,null],[12,"image_rendering","","",48,null],[3,"ImageMask","","",null,null],[12,"image","","",49,null],[12,"rect","","",49,null],[12,"repeat","","",49,null],[3,"ComplexClipRegion","","",null,null],[12,"rect","","The boundaries of the rectangle.",50,null],[12,"radii","","Border radii of this rectangle.",50,null],[12,"mode","","Whether we are clipping inside or outside the region.",50,null],[3,"ItemRange","","",null,null],[3,"BuiltDisplayList","","A display list.",null,null],[3,"BuiltDisplayListDescriptor","","Describes the memory layout of a display list.",null,null],[3,"BuiltDisplayListIter","","",null,null],[3,"DisplayItemRef","","",null,null],[3,"AuxIter","","",null,null],[3,"SaveState","","",null,null],[3,"DisplayListBuilder","","",null,null],[12,"data","","",51,null],[12,"pipeline_id","","",51,null],[3,"NativeFontHandle","","",null,null],[12,"pathname","","",52,null],[12,"index","","",52,null],[3,"GlyphDimensions","","",null,null],[12,"left","","",53,null],[12,"top","","",53,null],[12,"width","","",53,null],[12,"height","","",53,null],[12,"advance","","",53,null],[3,"FontKey","","",null,null],[12,"0","","",54,null],[12,"1","","",54,null],[3,"FontVariation","","",null,null],[12,"tag","","",55,null],[12,"value","","",55,null],[3,"GlyphOptions","","",null,null],[12,"render_mode","","",56,null],[3,"FontInstanceFlags","","",null,null],[3,"FontInstanceOptions","","",null,null],[12,"render_mode","","",57,null],[12,"subpx_dir","","",57,null],[12,"flags","","",57,null],[12,"bg_color","","When bg_color.a is != 0 and render_mode is FontRenderMode::Subpixel, the text will be rendered with bg_color.r/g/b as an opaque estimated background color.",57,null],[3,"FontInstancePlatformOptions","","",null,null],[12,"lcd_filter","","",58,null],[12,"hinting","","",58,null],[3,"FontInstanceKey","","",null,null],[12,"0","","",59,null],[12,"1","","",59,null],[3,"GlyphKey","","",null,null],[12,"index","","",60,null],[12,"subpixel_offset","","",60,null],[3,"GlyphInstance","","",null,null],[12,"index","","",61,null],[12,"point","","",61,null],[3,"ImageKey","","",null,null],[12,"0","","",62,null],[12,"1","","",62,null],[3,"ExternalImageId","","An arbitrary identifier for an external image provided by the application. It must be a unique identifier for each external image.",null,null],[12,"0","","",63,null],[3,"ExternalImageData","","",null,null],[12,"id","","",64,null],[12,"channel_index","","",64,null],[12,"image_type","","",64,null],[3,"ImageDescriptor","","",null,null],[12,"format","","",65,null],[12,"width","","",65,null],[12,"height","","",65,null],[12,"stride","","",65,null],[12,"offset","","",65,null],[12,"is_opaque","","",65,null],[3,"BlobImageDescriptor","","",null,null],[12,"width","","",66,null],[12,"height","","",66,null],[12,"offset","","",66,null],[12,"format","","",66,null],[3,"RasterizedBlobImage","","",null,null],[12,"width","","",67,null],[12,"height","","",67,null],[12,"data","","",67,null],[3,"BlobImageRequest","","",null,null],[12,"key","","",68,null],[12,"tile","","",68,null],[3,"DevicePixel","","Geometry in the coordinate system of the render target (screen or intermediate surface) in physical pixels.",null,null],[3,"LayerPixel","","Geometry in a layer's local coordinate space (logical pixels).",null,null],[3,"ScrollLayerPixel","","Geometry in a layer's scrollable parent coordinate space (logical pixels).",null,null],[3,"WorldPixel","","Geometry in the document's coordinate space (logical pixels).",null,null],[3,"Tiles","","Offset in number of tiles.",null,null],[4,"ResourceUpdate","","",null,null],[13,"AddImage","","",69,null],[13,"UpdateImage","","",69,null],[13,"DeleteImage","","",69,null],[13,"AddFont","","",69,null],[13,"DeleteFont","","",69,null],[13,"AddFontInstance","","",69,null],[13,"DeleteFontInstance","","",69,null],[4,"AddFont","","",null,null],[13,"Raw","","",70,null],[13,"Native","","",70,null],[4,"DocumentMsg","","",null,null],[13,"HitTest","","",71,null],[13,"SetDisplayList","","",71,null],[12,"list_descriptor","webrender_api::DocumentMsg","",71,null],[12,"epoch","","",71,null],[12,"pipeline_id","","",71,null],[12,"background","","",71,null],[12,"viewport_size","","",71,null],[12,"content_size","","",71,null],[12,"preserve_frame_state","","",71,null],[12,"resources","","",71,null],[13,"UpdateResources","webrender_api","",71,null],[13,"UpdatePipelineResources","","",71,null],[12,"resources","webrender_api::DocumentMsg","",71,null],[12,"pipeline_id","","",71,null],[12,"epoch","","",71,null],[13,"UpdateEpoch","webrender_api","",71,null],[13,"SetPageZoom","","",71,null],[13,"SetPinchZoom","","",71,null],[13,"SetPan","","",71,null],[13,"SetRootPipeline","","",71,null],[13,"RemovePipeline","","",71,null],[13,"EnableFrameOutput","","",71,null],[13,"SetWindowParameters","","",71,null],[12,"window_size","webrender_api::DocumentMsg","",71,null],[12,"inner_rect","","",71,null],[12,"device_pixel_ratio","","",71,null],[13,"Scroll","webrender_api","",71,null],[13,"ScrollNodeWithId","","",71,null],[13,"TickScrollingBounce","","",71,null],[13,"GetScrollNodeState","","",71,null],[13,"GenerateFrame","","",71,null],[13,"UpdateDynamicProperties","","",71,null],[4,"DebugCommand","","",null,null],[13,"EnableProfiler","","Display the frame profiler on screen.",72,null],[13,"EnableTextureCacheDebug","","Display all texture cache pages on screen.",72,null],[13,"EnableRenderTargetDebug","","Display intermediate render targets on screen.",72,null],[13,"EnableAlphaRectsDebug","","Display alpha primitive rects.",72,null],[13,"EnableGpuTimeQueries","","Display GPU timing results.",72,null],[13,"EnableGpuSampleQueries","","Display GPU overdraw results",72,null],[13,"FetchDocuments","","Fetch current documents and display lists.",72,null],[13,"FetchPasses","","Fetch current passes and batches.",72,null],[13,"FetchClipScrollTree","","Fetch clip-scroll tree.",72,null],[13,"FetchRenderTasks","","Fetch render tasks.",72,null],[13,"FetchScreenshot","","Fetch screenshot.",72,null],[13,"SaveCapture","","Save a capture of all the documents state.",72,null],[13,"LoadCapture","","Load a capture of all the documents state.",72,null],[13,"EnableDualSourceBlending","","Configure if dual-source blending is used, if available.",72,null],[4,"ApiMsg","","",null,null],[13,"UpdateResources","","Add/remove/update images and fonts.",73,null],[13,"GetGlyphDimensions","","Gets the glyph dimensions",73,null],[13,"GetGlyphIndices","","Gets the glyph indices from a string",73,null],[13,"CloneApi","","Adds a new document namespace.",73,null],[13,"AddDocument","","Adds a new document with given initial size.",73,null],[13,"UpdateDocument","","A message targeted at a particular document.",73,null],[13,"DeleteDocument","","Deletes an existing document.",73,null],[13,"ExternalEvent","","An opaque handle that must be passed to the render notifier. It is used by Gecko to forward gecko-specific messages to the render thread preserving the ordering within the other messages.",73,null],[13,"ClearNamespace","","Removes all resources associated with a namespace.",73,null],[13,"MemoryPressure","","Flush from the caches anything that isn't necessary, to free some memory.",73,null],[13,"DebugCommand","","Change debugging options.",73,null],[13,"ShutDown","","",73,null],[4,"ScrollClamping","","",null,null],[13,"ToContentBounds","","",74,null],[13,"NoClamping","","",74,null],[4,"ScrollEventPhase","","",null,null],[13,"Start","","The user started scrolling.",75,null],[13,"Move","","The user performed a scroll. The Boolean flag indicates whether the user's fingers are down, if a touchpad is in use. (If false, the event is a touchpad fling.)",75,null],[13,"End","","The user ended scrolling.",75,null],[4,"ScrollLocation","","",null,null],[13,"Delta","","Scroll by a certain amount.",76,null],[13,"Start","","Scroll to very top of element.",76,null],[13,"End","","Scroll to very bottom of element.",76,null],[4,"PropertyBinding","","A binding property can either be a specific value (the normal, non-animated case) or point to a binding location to fetch the current value from.",null,null],[13,"Value","","",77,null],[13,"Binding","","",77,null],[4,"SpecificDisplayItem","","",null,null],[13,"Clip","","",78,null],[13,"ScrollFrame","","",78,null],[13,"StickyFrame","","",78,null],[13,"Rectangle","","",78,null],[13,"ClearRectangle","","",78,null],[13,"Line","","",78,null],[13,"Text","","",78,null],[13,"Image","","",78,null],[13,"YuvImage","","",78,null],[13,"Border","","",78,null],[13,"BoxShadow","","",78,null],[13,"Gradient","","",78,null],[13,"RadialGradient","","",78,null],[13,"Iframe","","",78,null],[13,"PushStackingContext","","",78,null],[13,"PopStackingContext","","",78,null],[13,"SetGradientStops","","",78,null],[13,"PushShadow","","",78,null],[13,"PopAllShadows","","",78,null],[4,"ScrollSensitivity","","",null,null],[13,"ScriptAndInputEvents","","",79,null],[13,"Script","","",79,null],[4,"LineOrientation","","",null,null],[13,"Vertical","","",80,null],[13,"Horizontal","","",80,null],[4,"LineStyle","","",null,null],[13,"Solid","","",81,null],[13,"Dotted","","",81,null],[13,"Dashed","","",81,null],[13,"Wavy","","",81,null],[4,"RepeatMode","","",null,null],[13,"Stretch","","",82,null],[13,"Repeat","","",82,null],[13,"Round","","",82,null],[13,"Space","","",82,null],[4,"BorderDetails","","",null,null],[13,"Normal","","",83,null],[13,"Image","","",83,null],[13,"Gradient","","",83,null],[13,"RadialGradient","","",83,null],[4,"BorderRadiusKind","","",null,null],[13,"Uniform","","",84,null],[13,"NonUniform","","",84,null],[4,"BorderStyle","","",null,null],[13,"None","","",85,null],[13,"Solid","","",85,null],[13,"Double","","",85,null],[13,"Dotted","","",85,null],[13,"Dashed","","",85,null],[13,"Hidden","","",85,null],[13,"Groove","","",85,null],[13,"Ridge","","",85,null],[13,"Inset","","",85,null],[13,"Outset","","",85,null],[4,"BoxShadowClipMode","","",null,null],[13,"Outset","","",86,null],[13,"Inset","","",86,null],[4,"ExtendMode","","",null,null],[13,"Clamp","","",87,null],[13,"Repeat","","",87,null],[4,"ScrollPolicy","","",null,null],[13,"Scrollable","","",88,null],[13,"Fixed","","",88,null],[4,"TransformStyle","","",null,null],[13,"Flat","","",89,null],[13,"Preserve3D","","",89,null],[4,"MixBlendMode","","",null,null],[13,"Normal","","",90,null],[13,"Multiply","","",90,null],[13,"Screen","","",90,null],[13,"Overlay","","",90,null],[13,"Darken","","",90,null],[13,"Lighten","","",90,null],[13,"ColorDodge","","",90,null],[13,"ColorBurn","","",90,null],[13,"HardLight","","",90,null],[13,"SoftLight","","",90,null],[13,"Difference","","",90,null],[13,"Exclusion","","",90,null],[13,"Hue","","",90,null],[13,"Saturation","","",90,null],[13,"Color","","",90,null],[13,"Luminosity","","",90,null],[4,"FilterOp","","",null,null],[13,"Blur","","",91,null],[13,"Brightness","","",91,null],[13,"Contrast","","",91,null],[13,"Grayscale","","",91,null],[13,"HueRotate","","",91,null],[13,"Invert","","",91,null],[13,"Opacity","","",91,null],[13,"Saturate","","",91,null],[13,"Sepia","","",91,null],[13,"DropShadow","","",91,null],[4,"ImageRendering","","",null,null],[13,"Auto","","",92,null],[13,"CrispEdges","","",92,null],[13,"Pixelated","","",92,null],[4,"YuvColorSpace","","",null,null],[13,"Rec601","","",93,null],[13,"Rec709","","",93,null],[4,"YuvData","","",null,null],[13,"NV12","","",94,null],[13,"PlanarYCbCr","","",94,null],[13,"InterleavedYCbCr","","",94,null],[4,"YuvFormat","","",null,null],[13,"NV12","","",95,null],[13,"PlanarYCbCr","","",95,null],[13,"InterleavedYCbCr","","",95,null],[4,"LocalClip","","",null,null],[13,"Rect","","",96,null],[13,"RoundedRect","","",96,null],[4,"ClipMode","","",null,null],[13,"Clip","","",97,null],[13,"ClipOut","","",97,null],[4,"ClipId","","",null,null],[13,"Clip","","",98,null],[13,"ClipExternalId","","",98,null],[13,"DynamicallyAddedNode","","",98,null],[4,"FontTemplate","","",null,null],[13,"Raw","","",99,null],[13,"Native","","",99,null],[4,"FontRenderMode","","",null,null],[13,"Mono","","",100,null],[13,"Alpha","","",100,null],[13,"Subpixel","","",100,null],[4,"SubpixelDirection","","",null,null],[13,"None","","",101,null],[13,"Horizontal","","",101,null],[13,"Vertical","","",101,null],[4,"SubpixelOffset","","",null,null],[13,"Zero","","",102,null],[13,"Quarter","","",102,null],[13,"Half","","",102,null],[13,"ThreeQuarters","","",102,null],[4,"FontLCDFilter","","",null,null],[13,"None","","",103,null],[13,"Default","","",103,null],[13,"Light","","",103,null],[13,"Legacy","","",103,null],[4,"FontHinting","","",null,null],[13,"None","","",104,null],[13,"Mono","","",104,null],[13,"Light","","",104,null],[13,"Normal","","",104,null],[13,"LCD","","",104,null],[4,"ExternalImageType","","",null,null],[13,"Texture2DHandle","","",105,null],[13,"Texture2DArrayHandle","","",105,null],[13,"TextureRectHandle","","",105,null],[13,"TextureExternalHandle","","",105,null],[13,"ExternalBuffer","","",105,null],[4,"ImageFormat","","",null,null],[13,"Invalid","","",106,null],[13,"A8","","",106,null],[13,"BGRA8","","",106,null],[13,"RGBAF32","","",106,null],[13,"RG8","","",106,null],[4,"ImageData","","",null,null],[13,"Raw","","",107,null],[13,"Blob","","",107,null],[13,"External","","",107,null],[4,"BlobImageError","","",null,null],[13,"Oom","","",108,null],[13,"InvalidKey","","",108,null],[13,"InvalidData","","",108,null],[13,"Other","","",108,null],[5,"as_scroll_parent_rect","","",null,{"inputs":[{"name":"layerrect"}],"output":{"name":"scrolllayerrect"}}],[5,"as_scroll_parent_vector","","",null,{"inputs":[{"name":"layervector2d"}],"output":{"name":"scrolllayervector2d"}}],[11,"hash","","",109,null],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"devicepixel"}}],[11,"fmt","","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",109,{"inputs":[{"name":"self"},{"name":"devicepixel"}],"output":{"name":"bool"}}],[11,"cmp","","",109,{"inputs":[{"name":"self"},{"name":"devicepixel"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",109,{"inputs":[{"name":"self"},{"name":"devicepixel"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"hash","","",110,null],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"layerpixel"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",110,{"inputs":[{"name":"self"},{"name":"layerpixel"}],"output":{"name":"bool"}}],[11,"cmp","","",110,{"inputs":[{"name":"self"},{"name":"layerpixel"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",110,{"inputs":[{"name":"self"},{"name":"layerpixel"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"hash","","",111,null],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"scrolllayerpixel"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",111,{"inputs":[{"name":"self"},{"name":"scrolllayerpixel"}],"output":{"name":"bool"}}],[11,"cmp","","",111,{"inputs":[{"name":"self"},{"name":"scrolllayerpixel"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",111,{"inputs":[{"name":"self"},{"name":"scrolllayerpixel"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"hash","","",112,null],[11,"clone","","",112,{"inputs":[{"name":"self"}],"output":{"name":"worldpixel"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",112,{"inputs":[{"name":"self"},{"name":"worldpixel"}],"output":{"name":"bool"}}],[11,"cmp","","",112,{"inputs":[{"name":"self"},{"name":"worldpixel"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",112,{"inputs":[{"name":"self"},{"name":"worldpixel"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"hash","","",113,null],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"tiles"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",113,{"inputs":[{"name":"self"},{"name":"tiles"}],"output":{"name":"bool"}}],[11,"cmp","","",113,{"inputs":[{"name":"self"},{"name":"tiles"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",113,{"inputs":[{"name":"self"},{"name":"tiles"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"resourceupdates"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"resourceupdate"}}],[11,"new","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"add_image","","",0,{"inputs":[{"name":"self"},{"name":"imagekey"},{"name":"imagedescriptor"},{"name":"imagedata"},{"generics":["tilesize"],"name":"option"}],"output":null}],[11,"update_image","","",0,{"inputs":[{"name":"self"},{"name":"imagekey"},{"name":"imagedescriptor"},{"name":"imagedata"},{"generics":["deviceuintrect"],"name":"option"}],"output":null}],[11,"delete_image","","",0,{"inputs":[{"name":"self"},{"name":"imagekey"}],"output":null}],[11,"add_raw_font","","",0,{"inputs":[{"name":"self"},{"name":"fontkey"},{"generics":["u8"],"name":"vec"},{"name":"u32"}],"output":null}],[11,"add_native_font","","",0,{"inputs":[{"name":"self"},{"name":"fontkey"},{"name":"nativefonthandle"}],"output":null}],[11,"delete_font","","",0,{"inputs":[{"name":"self"},{"name":"fontkey"}],"output":null}],[11,"add_font_instance","","",0,{"inputs":[{"name":"self"},{"name":"fontinstancekey"},{"name":"fontkey"},{"name":"au"},{"generics":["fontinstanceoptions"],"name":"option"},{"generics":["fontinstanceplatformoptions"],"name":"option"},{"generics":["fontvariation"],"name":"vec"}],"output":null}],[11,"delete_font_instance","","",0,{"inputs":[{"name":"self"},{"name":"fontinstancekey"}],"output":null}],[11,"merge","","",0,{"inputs":[{"name":"self"},{"name":"resourceupdates"}],"output":null}],[11,"clear","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",114,{"inputs":[],"output":{"name":"self"}}],[11,"is_empty","","",114,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"update_epoch","","",114,{"inputs":[{"name":"self"},{"name":"pipelineid"},{"name":"epoch"}],"output":null}],[11,"set_root_pipeline","","Sets the root pipeline.",114,{"inputs":[{"name":"self"},{"name":"pipelineid"}],"output":null}],[11,"remove_pipeline","","Removes data associated with a pipeline from the internal data structures. If the specified `pipeline_id` is for the root pipeline, the root pipeline is reset back to `None`.",114,{"inputs":[{"name":"self"},{"name":"pipelineid"}],"output":null}],[11,"set_display_list","","Supplies a new frame to WebRender.",114,null],[11,"update_resources","","",114,{"inputs":[{"name":"self"},{"name":"resourceupdates"}],"output":null}],[11,"set_window_parameters","","",114,{"inputs":[{"name":"self"},{"name":"deviceuintsize"},{"name":"deviceuintrect"},{"name":"f32"}],"output":null}],[11,"scroll","","Scrolls the scrolling layer under the `cursor`",114,{"inputs":[{"name":"self"},{"name":"scrolllocation"},{"name":"worldpoint"},{"name":"scrolleventphase"}],"output":null}],[11,"scroll_node_with_id","","",114,{"inputs":[{"name":"self"},{"name":"layoutpoint"},{"name":"clipid"},{"name":"scrollclamping"}],"output":null}],[11,"set_page_zoom","","",114,{"inputs":[{"name":"self"},{"name":"zoomfactor"}],"output":null}],[11,"set_pinch_zoom","","",114,{"inputs":[{"name":"self"},{"name":"zoomfactor"}],"output":null}],[11,"set_pan","","",114,{"inputs":[{"name":"self"},{"name":"deviceintpoint"}],"output":null}],[11,"tick_scrolling_bounce_animations","","",114,{"inputs":[{"name":"self"}],"output":null}],[11,"generate_frame","","Generate a new frame.",114,{"inputs":[{"name":"self"}],"output":null}],[11,"update_dynamic_properties","","Supply a list of animated property bindings that should be used to resolve bindings in the current display list.",114,{"inputs":[{"name":"self"},{"name":"dynamicproperties"}],"output":null}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"addimage"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"updateimage"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"addfont"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"hittestitem"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"hittestitem"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"hittestitem"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"hittestresult"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"hittestresult"}}],[11,"eq","","",115,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":{"name":"bool"}}],[11,"ne","","",115,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":{"name":"bool"}}],[11,"clone","","",115,{"inputs":[{"name":"self"}],"output":{"name":"hittestflags"}}],[11,"partial_cmp","","",115,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",115,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":{"name":"bool"}}],[11,"le","","",115,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":{"name":"bool"}}],[11,"gt","","",115,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":{"name":"bool"}}],[11,"ge","","",115,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":{"name":"bool"}}],[11,"cmp","","",115,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":{"name":"ordering"}}],[11,"hash","","",115,null],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"FIND_ALL","","",115,null],[18,"POINT_RELATIVE_TO_PIPELINE_VIEWPORT","","",115,null],[11,"empty","","Returns an empty set of flags.",115,{"inputs":[],"output":{"name":"hittestflags"}}],[11,"all","","Returns the set containing all flags.",115,{"inputs":[],"output":{"name":"hittestflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",115,{"inputs":[{"name":"self"}],"output":{"name":"u8"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",115,{"inputs":[{"name":"u8"}],"output":{"generics":["hittestflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",115,{"inputs":[{"name":"u8"}],"output":{"name":"hittestflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",115,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",115,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",115,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",115,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",115,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",115,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",115,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",115,{"inputs":[{"name":"self"},{"name":"hittestflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",115,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":{"name":"hittestflags"}}],[11,"bitor_assign","","Adds the set of flags.",115,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",115,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":{"name":"hittestflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",115,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",115,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":{"name":"hittestflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",115,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",115,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":{"name":"hittestflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",115,{"inputs":[{"name":"self"},{"name":"hittestflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",115,{"inputs":[{"name":"self"}],"output":{"name":"hittestflags"}}],[11,"extend","","",115,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",115,{"inputs":[{"name":"t"}],"output":{"name":"hittestflags"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"addfontinstance"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"documentmsg"}}],[11,"fmt","","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"debugcommand"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"apimsg"}}],[11,"fmt","","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"epoch"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",6,null],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"epoch"}],"output":{"name":"ordering"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"epoch"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"epoch"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"epoch"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"self"},{"name":"epoch"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"self"},{"name":"epoch"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"self"},{"name":"epoch"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"self"},{"name":"epoch"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"idnamespace"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"idnamespace"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"idnamespace"}],"output":{"name":"bool"}}],[11,"hash","","",7,null],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"idnamespace"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"idnamespace"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"idnamespace"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"idnamespace"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"idnamespace"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"idnamespace"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"documentid"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",8,null],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"documentid"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"documentid"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"pipelineid"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",9,null],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"pipelineid"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"pipelineid"}],"output":{"name":"bool"}}],[11,"dummy","","",9,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"resourceid"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"externalevent"}}],[11,"from_raw","","",116,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"unwrap","","Consumes self to make it obvious that the event should be forwarded only once.",116,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"scrollclamping"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"renderapisender"}}],[11,"new","","",117,{"inputs":[{"generics":["apimsg"],"name":"msgsender"},{"name":"payloadsender"}],"output":{"name":"self"}}],[11,"create_api","","Creates a new resource API object with a dedicated namespace.",117,{"inputs":[{"name":"self"}],"output":{"name":"renderapi"}}],[11,"get_namespace_id","","",118,{"inputs":[{"name":"self"}],"output":{"name":"idnamespace"}}],[11,"clone_sender","","",118,{"inputs":[{"name":"self"}],"output":{"name":"renderapisender"}}],[11,"add_document","","",118,{"inputs":[{"name":"self"},{"name":"deviceuintsize"},{"name":"documentlayer"}],"output":{"name":"documentid"}}],[11,"delete_document","","",118,{"inputs":[{"name":"self"},{"name":"documentid"}],"output":null}],[11,"generate_font_key","","",118,{"inputs":[{"name":"self"}],"output":{"name":"fontkey"}}],[11,"generate_font_instance_key","","",118,{"inputs":[{"name":"self"}],"output":{"name":"fontinstancekey"}}],[11,"get_glyph_dimensions","","Gets the dimensions for the supplied glyph keys",118,{"inputs":[{"name":"self"},{"name":"fontinstancekey"},{"generics":["glyphkey"],"name":"vec"}],"output":{"generics":["option"],"name":"vec"}}],[11,"get_glyph_indices","","Gets the glyph indices for the supplied string. These can be used to construct GlyphKeys.",118,{"inputs":[{"name":"self"},{"name":"fontkey"},{"name":"str"}],"output":{"generics":["option"],"name":"vec"}}],[11,"generate_image_key","","Creates an `ImageKey`.",118,{"inputs":[{"name":"self"}],"output":{"name":"imagekey"}}],[11,"update_resources","","Add/remove/update resources such as images and fonts.",118,{"inputs":[{"name":"self"},{"name":"resourceupdates"}],"output":null}],[11,"update_pipeline_resources","","Add/remove/update resources such as images and fonts.",118,{"inputs":[{"name":"self"},{"name":"resourceupdates"},{"name":"documentid"},{"name":"pipelineid"},{"name":"epoch"}],"output":null}],[11,"send_external_event","","",118,{"inputs":[{"name":"self"},{"name":"externalevent"}],"output":null}],[11,"notify_memory_pressure","","",118,{"inputs":[{"name":"self"}],"output":null}],[11,"shut_down","","",118,{"inputs":[{"name":"self"}],"output":null}],[11,"generate_property_binding_key","","Create a new unique key that can be used for animated property bindings.",118,{"inputs":[{"name":"self"}],"output":{"name":"propertybindingkey"}}],[11,"set_root_pipeline","","Sets the root pipeline.",118,{"inputs":[{"name":"self"},{"name":"documentid"},{"name":"pipelineid"}],"output":null}],[11,"remove_pipeline","","Removes data associated with a pipeline from the internal data structures. If the specified `pipeline_id` is for the root pipeline, the root pipeline is reset back to `None`.",118,{"inputs":[{"name":"self"},{"name":"documentid"},{"name":"pipelineid"}],"output":null}],[11,"set_display_list","","Supplies a new frame to WebRender.",118,null],[11,"send_transaction","","",118,{"inputs":[{"name":"self"},{"name":"documentid"},{"name":"transaction"}],"output":null}],[11,"scroll","","Scrolls the scrolling layer under the `cursor`",118,{"inputs":[{"name":"self"},{"name":"documentid"},{"name":"scrolllocation"},{"name":"worldpoint"},{"name":"scrolleventphase"}],"output":null}],[11,"scroll_node_with_id","","",118,{"inputs":[{"name":"self"},{"name":"documentid"},{"name":"layoutpoint"},{"name":"clipid"},{"name":"scrollclamping"}],"output":null}],[11,"hit_test","","Does a hit test on display items in the specified document, at the given point. If a pipeline_id is specified, it is used to further restrict the hit results so that only items inside that pipeline are matched. If the HitTestFlags argument contains the FIND_ALL flag, then the vector of hit results will contain all display items that match, ordered from front to back.",118,{"inputs":[{"name":"self"},{"name":"documentid"},{"generics":["pipelineid"],"name":"option"},{"name":"worldpoint"},{"name":"hittestflags"}],"output":{"name":"hittestresult"}}],[11,"set_page_zoom","","",118,{"inputs":[{"name":"self"},{"name":"documentid"},{"name":"zoomfactor"}],"output":null}],[11,"set_pinch_zoom","","",118,{"inputs":[{"name":"self"},{"name":"documentid"},{"name":"zoomfactor"}],"output":null}],[11,"set_pan","","",118,{"inputs":[{"name":"self"},{"name":"documentid"},{"name":"deviceintpoint"}],"output":null}],[11,"set_window_parameters","","",118,{"inputs":[{"name":"self"},{"name":"documentid"},{"name":"deviceuintsize"},{"name":"deviceuintrect"},{"name":"f32"}],"output":null}],[11,"tick_scrolling_bounce_animations","","",118,{"inputs":[{"name":"self"},{"name":"documentid"}],"output":null}],[11,"get_scroll_node_state","","",118,{"inputs":[{"name":"self"},{"name":"documentid"}],"output":{"generics":["scrolllayerstate"],"name":"vec"}}],[11,"enable_frame_output","","Enable copying of the output of this pipeline id to an external texture for callers to consume.",118,{"inputs":[{"name":"self"},{"name":"documentid"},{"name":"pipelineid"},{"name":"bool"}],"output":null}],[11,"generate_frame","","Generate a new frame. Optionally, supply a list of animated property bindings that should be used to resolve bindings in the current display list.",118,{"inputs":[{"name":"self"},{"name":"documentid"},{"generics":["dynamicproperties"],"name":"option"}],"output":null}],[11,"save_capture","","Save a capture of the current frame state for debugging.",118,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":null}],[11,"load_capture","","Load a capture of the current frame state for debugging.",118,{"inputs":[{"name":"self"},{"name":"pathbuf"}],"output":null}],[11,"send_debug_cmd","","",118,{"inputs":[{"name":"self"},{"name":"debugcommand"}],"output":null}],[11,"drop","","",118,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"scrolleventphase"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"scrolleventphase"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"self"},{"name":"scrolleventphase"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"scrolllayerstate"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"scrolllocation"}}],[11,"fmt","","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",119,{"inputs":[{"name":"self"}],"output":{"name":"zoomfactor"}}],[11,"fmt","","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new zoom factor.",119,{"inputs":[{"name":"f32"}],"output":{"name":"zoomfactor"}}],[11,"get","","Get the zoom factor as an untyped float.",119,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"clone","","",120,{"inputs":[{"name":"self"}],"output":{"name":"propertybindingid"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",120,{"inputs":[{"name":"self"},{"name":"propertybindingid"}],"output":{"name":"bool"}}],[11,"ne","","",120,{"inputs":[{"name":"self"},{"name":"propertybindingid"}],"output":{"name":"bool"}}],[11,"hash","","",120,null],[11,"new","","",120,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"propertybindingkey"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"propertybindingkey"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"propertybindingkey"}],"output":{"name":"bool"}}],[11,"with","","",12,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"propertyvalue"}}],[11,"new","","",12,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"propertybinding"}}],[11,"fmt","","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",77,{"inputs":[{"name":"self"},{"name":"propertybinding"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"self"},{"name":"propertybinding"}],"output":{"name":"bool"}}],[11,"from","","",77,{"inputs":[{"name":"t"}],"output":{"name":"propertybinding"}}],[11,"from","","",77,{"inputs":[{"name":"propertybindingkey"}],"output":{"name":"propertybinding"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"propertyvalue"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"dynamicproperties"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"premultipliedcolorf"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"premultipliedcolorf"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"premultipliedcolorf"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"self"},{"name":"premultipliedcolorf"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",15,{"inputs":[{"name":"self"},{"name":"premultipliedcolorf"}],"output":{"name":"bool"}}],[11,"le","","",15,{"inputs":[{"name":"self"},{"name":"premultipliedcolorf"}],"output":{"name":"bool"}}],[11,"gt","","",15,{"inputs":[{"name":"self"},{"name":"premultipliedcolorf"}],"output":{"name":"bool"}}],[11,"ge","","",15,{"inputs":[{"name":"self"},{"name":"premultipliedcolorf"}],"output":{"name":"bool"}}],[18,"BLACK","","",15,null],[18,"TRANSPARENT","","",15,null],[11,"to_array","","",15,null],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"colorf"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"colorf"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"colorf"}],"output":{"name":"bool"}}],[11,"new","","Constructs a new `ColorF` from its components.",16,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"colorf"}}],[11,"scale_rgb","","Multiply the RGB channels (but not alpha) with a given factor.",16,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"colorf"}}],[11,"to_array","","",16,null],[11,"premultiplied","","Multiply the RGB components with the alpha channel.",16,{"inputs":[{"name":"self"}],"output":{"name":"premultipliedcolorf"}}],[11,"cmp","","",15,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hash","","",15,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"coloru"}}],[11,"hash","","",17,null],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"coloru"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"coloru"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"self"},{"name":"coloru"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",17,{"inputs":[{"name":"self"},{"name":"coloru"}],"output":{"name":"bool"}}],[11,"le","","",17,{"inputs":[{"name":"self"},{"name":"coloru"}],"output":{"name":"bool"}}],[11,"gt","","",17,{"inputs":[{"name":"self"},{"name":"coloru"}],"output":{"name":"bool"}}],[11,"ge","","",17,{"inputs":[{"name":"self"},{"name":"coloru"}],"output":{"name":"bool"}}],[11,"cmp","","",17,{"inputs":[{"name":"self"},{"name":"coloru"}],"output":{"name":"ordering"}}],[11,"new","","Constructs a new additive `ColorU` from its components.",17,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"coloru"}}],[11,"from","","",17,{"inputs":[{"name":"colorf"}],"output":{"name":"self"}}],[11,"from","","",16,{"inputs":[{"name":"coloru"}],"output":{"name":"self"}}],[0,"channel","","",null,null],[3,"Payload","webrender_api::channel","",null,null],[12,"epoch","","An epoch used to get the proper payload for a pipeline id frame request.",121,null],[12,"pipeline_id","","A pipeline id to key the payload with, along with the epoch.",121,null],[12,"display_list_data","","",121,null],[3,"MsgReceiver","","",null,null],[3,"MsgSender","","",null,null],[5,"payload_channel","","",null,{"inputs":[],"output":{"generics":["error"],"name":"result"}}],[5,"msg_channel","","",null,{"inputs":[],"output":{"generics":["error"],"name":"result"}}],[6,"PayloadSender","","Handles the channel implementation when in process channels are enabled.",null,null],[6,"PayloadReceiver","","",null,null],[8,"PayloadSenderHelperMethods","","A helper to handle the interface difference between `IpcBytesSender` and `Sender<Vec<u8>>`.",null,null],[10,"send_payload","","",122,{"inputs":[{"name":"self"},{"name":"payload"}],"output":{"generics":["error"],"name":"result"}}],[8,"PayloadReceiverHelperMethods","","",null,null],[10,"recv_payload","","",123,{"inputs":[{"name":"self"}],"output":{"generics":["payload","error"],"name":"result"}}],[11,"clone","","",121,{"inputs":[{"name":"self"}],"output":{"name":"payload"}}],[11,"to_data","","Convert the payload to a raw byte vector, in order for it to be efficiently shared via shmem, for example.",121,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"from_data","","Deserializes the given payload from a raw byte vector.",121,null],[11,"send_payload","","",124,{"inputs":[{"name":"self"},{"name":"payload"}],"output":{"generics":["error"],"name":"result"}}],[11,"recv_payload","","",125,{"inputs":[{"name":"self"}],"output":{"generics":["payload","error"],"name":"result"}}],[11,"recv","","",126,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",127,{"inputs":[{"name":"self"}],"output":{"name":"msgsender"}}],[11,"send","","",127,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"serialize","","",126,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",127,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",126,{"inputs":[{"name":"d"}],"output":{"generics":["msgreceiver"],"name":"result"}}],[11,"deserialize","","",127,{"inputs":[{"name":"d"}],"output":{"generics":["msgsender"],"name":"result"}}],[11,"clone","webrender_api","",18,{"inputs":[{"name":"self"}],"output":{"name":"clipandscrollinfo"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",18,null],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"clipandscrollinfo"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"clipandscrollinfo"}],"output":{"name":"bool"}}],[11,"simple","","",18,{"inputs":[{"name":"clipid"}],"output":{"name":"clipandscrollinfo"}}],[11,"new","","",18,{"inputs":[{"name":"clipid"},{"name":"clipid"}],"output":{"name":"clipandscrollinfo"}}],[11,"clip_node_id","","",18,{"inputs":[{"name":"self"}],"output":{"name":"clipid"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"genericdisplayitem"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"genericdisplayitem"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"genericdisplayitem"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"primitiveinfo"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"primitiveinfo"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"primitiveinfo"}],"output":{"name":"bool"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"specificdisplayitem"}}],[11,"fmt","","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",78,{"inputs":[{"name":"self"},{"name":"specificdisplayitem"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"self"},{"name":"specificdisplayitem"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"clipdisplayitem"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"clipdisplayitem"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"clipdisplayitem"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"stickyoffsetbounds"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"stickyoffsetbounds"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"stickyoffsetbounds"}],"output":{"name":"bool"}}],[11,"new","","",22,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"stickyoffsetbounds"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"stickyframedisplayitem"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"stickyframedisplayitem"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"stickyframedisplayitem"}],"output":{"name":"bool"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"scrollsensitivity"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",79,{"inputs":[{"name":"self"},{"name":"scrollsensitivity"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"scrollframedisplayitem"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"scrollframedisplayitem"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"scrollframedisplayitem"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"rectangledisplayitem"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"rectangledisplayitem"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"rectangledisplayitem"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"linedisplayitem"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"linedisplayitem"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"linedisplayitem"}],"output":{"name":"bool"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"lineorientation"}}],[11,"fmt","","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",80,{"inputs":[{"name":"self"},{"name":"lineorientation"}],"output":{"name":"bool"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"linestyle"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"linestyle"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"textdisplayitem"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"textdisplayitem"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"textdisplayitem"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"normalborder"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"normalborder"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"self"},{"name":"normalborder"}],"output":{"name":"bool"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"repeatmode"}}],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"repeatmode"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"ninepatchdescriptor"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"ninepatchdescriptor"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"ninepatchdescriptor"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"imageborder"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"imageborder"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"imageborder"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"gradientborder"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"gradientborder"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"gradientborder"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"radialgradientborder"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"radialgradientborder"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"radialgradientborder"}],"output":{"name":"bool"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"borderdetails"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"borderdetails"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"self"},{"name":"borderdetails"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"borderdisplayitem"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"borderdisplayitem"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"borderdisplayitem"}],"output":{"name":"bool"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"borderradiuskind"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",84,{"inputs":[{"name":"self"},{"name":"borderradiuskind"}],"output":{"name":"bool"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"borderradius"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"borderradius"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"borderradius"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"borderwidths"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"borderwidths"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"borderwidths"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"borderside"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"borderside"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"borderside"}],"output":{"name":"bool"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"borderstyle"}}],[11,"fmt","","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",85,{"inputs":[{"name":"self"},{"name":"borderstyle"}],"output":{"name":"bool"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"boxshadowclipmode"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",86,null],[11,"eq","","",86,{"inputs":[{"name":"self"},{"name":"boxshadowclipmode"}],"output":{"name":"bool"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"boxshadowdisplayitem"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"boxshadowdisplayitem"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"self"},{"name":"boxshadowdisplayitem"}],"output":{"name":"bool"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"shadow"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"shadow"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"self"},{"name":"shadow"}],"output":{"name":"bool"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"extendmode"}}],[11,"hash","","",87,null],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"extendmode"}],"output":{"name":"bool"}}],[11,"cmp","","",87,{"inputs":[{"name":"self"},{"name":"extendmode"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",87,{"inputs":[{"name":"self"},{"name":"extendmode"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"gradient"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"gradient"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"gradient"}],"output":{"name":"bool"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"gradientdisplayitem"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"gradientdisplayitem"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"gradientdisplayitem"}],"output":{"name":"bool"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"gradientstop"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"gradientstop"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"gradientstop"}],"output":{"name":"bool"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"radialgradient"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"radialgradient"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"radialgradient"}],"output":{"name":"bool"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"radialgradientdisplayitem"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"radialgradientdisplayitem"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"radialgradientdisplayitem"}],"output":{"name":"bool"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"pushstackingcontextdisplayitem"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"pushstackingcontextdisplayitem"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"pushstackingcontextdisplayitem"}],"output":{"name":"bool"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"stackingcontext"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"stackingcontext"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"stackingcontext"}],"output":{"name":"bool"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"scrollpolicy"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"scrollpolicy"}],"output":{"name":"bool"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"transformstyle"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",89,null],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"transformstyle"}],"output":{"name":"bool"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"mixblendmode"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",90,null],[11,"eq","","",90,{"inputs":[{"name":"self"},{"name":"mixblendmode"}],"output":{"name":"bool"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"filterop"}}],[11,"fmt","","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",91,{"inputs":[{"name":"self"},{"name":"filterop"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"self"},{"name":"filterop"}],"output":{"name":"bool"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"iframedisplayitem"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"iframedisplayitem"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"self"},{"name":"iframedisplayitem"}],"output":{"name":"bool"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"imagedisplayitem"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"imagedisplayitem"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"self"},{"name":"imagedisplayitem"}],"output":{"name":"bool"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"imagerendering"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",92,null],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"imagerendering"}],"output":{"name":"bool"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"yuvimagedisplayitem"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"yuvimagedisplayitem"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"yuvimagedisplayitem"}],"output":{"name":"bool"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"yuvcolorspace"}}],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",93,null],[11,"eq","","",93,{"inputs":[{"name":"self"},{"name":"yuvcolorspace"}],"output":{"name":"bool"}}],[11,"get_feature_string","","",93,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"yuvdata"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",94,null],[11,"eq","","",94,{"inputs":[{"name":"self"},{"name":"yuvdata"}],"output":{"name":"bool"}}],[11,"ne","","",94,{"inputs":[{"name":"self"},{"name":"yuvdata"}],"output":{"name":"bool"}}],[11,"get_format","","",94,{"inputs":[{"name":"self"}],"output":{"name":"yuvformat"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"yuvformat"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",95,null],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"yuvformat"}],"output":{"name":"bool"}}],[11,"get_plane_num","","",95,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_feature_string","","",95,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"imagemask"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"imagemask"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"imagemask"}],"output":{"name":"bool"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"localclip"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"localclip"}],"output":{"name":"bool"}}],[11,"ne","","",96,{"inputs":[{"name":"self"},{"name":"localclip"}],"output":{"name":"bool"}}],[11,"from","","",96,{"inputs":[{"name":"layoutrect"}],"output":{"name":"self"}}],[11,"clip_rect","","",96,{"inputs":[{"name":"self"}],"output":{"name":"layoutrect"}}],[11,"create_with_offset","","",96,{"inputs":[{"name":"self"},{"name":"layoutvector2d"}],"output":{"name":"localclip"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"clipmode"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"clipmode"}],"output":{"name":"bool"}}],[11,"not","","",97,{"inputs":[{"name":"self"}],"output":{"name":"clipmode"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"complexclipregion"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"complexclipregion"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"self"},{"name":"complexclipregion"}],"output":{"name":"bool"}}],[11,"zero","","",34,{"inputs":[],"output":{"name":"borderradius"}}],[11,"uniform","","",34,{"inputs":[{"name":"f32"}],"output":{"name":"borderradius"}}],[11,"uniform_size","","",34,{"inputs":[{"name":"layoutsize"}],"output":{"name":"borderradius"}}],[11,"is_uniform","","",34,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"is_uniform_size","","",34,{"inputs":[{"name":"self"}],"output":{"generics":["layoutsize"],"name":"option"}}],[11,"is_zero","","",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Create a new complex clip region.",50,{"inputs":[{"name":"layoutrect"},{"name":"borderradius"},{"name":"clipmode"}],"output":{"name":"self"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"clipid"}}],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",98,null],[11,"eq","","",98,{"inputs":[{"name":"self"},{"name":"clipid"}],"output":{"name":"bool"}}],[11,"ne","","",98,{"inputs":[{"name":"self"},{"name":"clipid"}],"output":{"name":"bool"}}],[11,"root_scroll_node","","",98,{"inputs":[{"name":"pipelineid"}],"output":{"name":"clipid"}}],[11,"root_reference_frame","","",98,{"inputs":[{"name":"pipelineid"}],"output":{"name":"clipid"}}],[11,"new","","",98,{"inputs":[{"name":"u64"},{"name":"pipelineid"}],"output":{"name":"clipid"}}],[11,"pipeline_id","","",98,{"inputs":[{"name":"self"}],"output":{"name":"pipelineid"}}],[11,"external_id","","",98,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"is_root_scroll_node","","",98,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",128,{"inputs":[{"name":"self"}],"output":{"name":"itemrange"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",128,null],[11,"eq","","",128,{"inputs":[{"name":"self"},{"name":"itemrange"}],"output":{"name":"bool"}}],[11,"ne","","",128,{"inputs":[{"name":"self"},{"name":"itemrange"}],"output":{"name":"bool"}}],[11,"default","","",128,{"inputs":[],"output":{"name":"self"}}],[11,"is_empty","","",128,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",129,{"inputs":[{"name":"self"}],"output":{"name":"builtdisplaylist"}}],[11,"default","","",129,{"inputs":[],"output":{"name":"builtdisplaylist"}}],[11,"clone","","",130,{"inputs":[{"name":"self"}],"output":{"name":"builtdisplaylistdescriptor"}}],[11,"default","","",130,{"inputs":[],"output":{"name":"builtdisplaylistdescriptor"}}],[11,"clone","","",131,{"inputs":[{"name":"self"}],"output":{"name":"auxiter"}}],[11,"from_data","","",129,{"inputs":[{"generics":["u8"],"name":"vec"},{"name":"builtdisplaylistdescriptor"}],"output":{"name":"builtdisplaylist"}}],[11,"into_data","","",129,null],[11,"data","","",129,null],[11,"item_slice","","",129,null],[11,"descriptor","","",129,{"inputs":[{"name":"self"}],"output":{"name":"builtdisplaylistdescriptor"}}],[11,"times","","",129,null],[11,"iter","","",129,{"inputs":[{"name":"self"}],"output":{"name":"builtdisplaylistiter"}}],[11,"get","","",129,{"inputs":[{"name":"self"},{"name":"itemrange"}],"output":{"name":"auxiter"}}],[11,"new","","",132,{"inputs":[{"name":"builtdisplaylist"}],"output":{"name":"self"}}],[11,"new_with_list_and_data","","",132,null],[11,"display_list","","",132,{"inputs":[{"name":"self"}],"output":{"name":"builtdisplaylist"}}],[11,"next","","",132,{"inputs":[{"name":"self"}],"output":{"generics":["displayitemref"],"name":"option"}}],[11,"as_ref","","",132,{"inputs":[{"name":"self"}],"output":{"name":"displayitemref"}}],[11,"starting_stacking_context","","",132,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"skip_current_stacking_context","","",132,{"inputs":[{"name":"self"}],"output":null}],[11,"current_stacking_context_empty","","",132,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"peek","","",132,{"inputs":[{"name":"self"}],"output":{"generics":["displayitemref"],"name":"option"}}],[11,"display_item","","",133,{"inputs":[{"name":"self"}],"output":{"name":"displayitem"}}],[11,"rect","","",133,{"inputs":[{"name":"self"}],"output":{"name":"layoutrect"}}],[11,"get_layer_primitive_info","","",133,{"inputs":[{"name":"self"},{"name":"layoutvector2d"}],"output":{"name":"layerprimitiveinfo"}}],[11,"local_clip","","",133,{"inputs":[{"name":"self"}],"output":{"name":"localclip"}}],[11,"clip_and_scroll","","",133,{"inputs":[{"name":"self"}],"output":{"name":"clipandscrollinfo"}}],[11,"item","","",133,{"inputs":[{"name":"self"}],"output":{"name":"specificdisplayitem"}}],[11,"complex_clip","","",133,null],[11,"gradient_stops","","",133,{"inputs":[{"name":"self"}],"output":{"generics":["gradientstop"],"name":"itemrange"}}],[11,"glyphs","","",133,{"inputs":[{"name":"self"}],"output":{"generics":["glyphinstance"],"name":"itemrange"}}],[11,"filters","","",133,{"inputs":[{"name":"self"}],"output":{"generics":["filterop"],"name":"itemrange"}}],[11,"display_list","","",133,{"inputs":[{"name":"self"}],"output":{"name":"builtdisplaylist"}}],[11,"is_backface_visible","","",133,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"sub_iter","","",133,{"inputs":[{"name":"self"}],"output":{"name":"builtdisplaylistiter"}}],[11,"new","","",131,null],[11,"next","","",131,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",131,null],[11,"clone","","",134,{"inputs":[{"name":"self"}],"output":{"name":"savestate"}}],[11,"fmt","","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"displaylistbuilder"}}],[11,"new","","",51,{"inputs":[{"name":"pipelineid"},{"name":"layoutsize"}],"output":{"name":"self"}}],[11,"with_capacity","","",51,{"inputs":[{"name":"pipelineid"},{"name":"layoutsize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"content_size","","Return the content size for this display list",51,{"inputs":[{"name":"self"}],"output":{"name":"layoutsize"}}],[11,"save","","Saves the current display list state, so it may be `restore()`'d.",51,{"inputs":[{"name":"self"}],"output":null}],[11,"restore","","Restores the state of the builder to when `save()` was last called.",51,{"inputs":[{"name":"self"}],"output":null}],[11,"clear_save","","Discards the builder's save (indicating the attempted operation was sucessful).",51,{"inputs":[{"name":"self"}],"output":null}],[11,"print_display_list","","",51,{"inputs":[{"name":"self"}],"output":null}],[11,"push_rect","","",51,{"inputs":[{"name":"self"},{"name":"layoutprimitiveinfo"},{"name":"colorf"}],"output":null}],[11,"push_clear_rect","","",51,{"inputs":[{"name":"self"},{"name":"layoutprimitiveinfo"}],"output":null}],[11,"push_line","","",51,{"inputs":[{"name":"self"},{"name":"layoutprimitiveinfo"},{"name":"f32"},{"name":"lineorientation"},{"name":"colorf"},{"name":"linestyle"}],"output":null}],[11,"push_image","","",51,{"inputs":[{"name":"self"},{"name":"layoutprimitiveinfo"},{"name":"layoutsize"},{"name":"layoutsize"},{"name":"imagerendering"},{"name":"imagekey"}],"output":null}],[11,"push_yuv_image","","Push a yuv image. All planar data in yuv image should use the same buffer type.",51,{"inputs":[{"name":"self"},{"name":"layoutprimitiveinfo"},{"name":"yuvdata"},{"name":"yuvcolorspace"},{"name":"imagerendering"}],"output":null}],[11,"push_text","","",51,null],[11,"create_gradient","","",51,{"inputs":[{"name":"self"},{"name":"layoutpoint"},{"name":"layoutpoint"},{"generics":["gradientstop"],"name":"vec"},{"name":"extendmode"}],"output":{"name":"gradient"}}],[11,"create_radial_gradient","","",51,{"inputs":[{"name":"self"},{"name":"layoutpoint"},{"name":"layoutsize"},{"generics":["gradientstop"],"name":"vec"},{"name":"extendmode"}],"output":{"name":"radialgradient"}}],[11,"create_complex_radial_gradient","","",51,{"inputs":[{"name":"self"},{"name":"layoutpoint"},{"name":"f32"},{"name":"layoutpoint"},{"name":"f32"},{"name":"f32"},{"generics":["gradientstop"],"name":"vec"},{"name":"extendmode"}],"output":{"name":"radialgradient"}}],[11,"push_border","","",51,{"inputs":[{"name":"self"},{"name":"layoutprimitiveinfo"},{"name":"borderwidths"},{"name":"borderdetails"}],"output":null}],[11,"push_box_shadow","","",51,{"inputs":[{"name":"self"},{"name":"layoutprimitiveinfo"},{"name":"layoutrect"},{"name":"layoutvector2d"},{"name":"colorf"},{"name":"f32"},{"name":"f32"},{"name":"borderradius"},{"name":"boxshadowclipmode"}],"output":null}],[11,"push_gradient","","Pushes a linear gradient to be displayed.",51,{"inputs":[{"name":"self"},{"name":"layoutprimitiveinfo"},{"name":"gradient"},{"name":"layoutsize"},{"name":"layoutsize"}],"output":null}],[11,"push_radial_gradient","","Pushes a radial gradient to be displayed.",51,{"inputs":[{"name":"self"},{"name":"layoutprimitiveinfo"},{"name":"radialgradient"},{"name":"layoutsize"},{"name":"layoutsize"}],"output":null}],[11,"push_stacking_context","","",51,{"inputs":[{"name":"self"},{"name":"layoutprimitiveinfo"},{"name":"scrollpolicy"},{"generics":["propertybinding"],"name":"option"},{"name":"transformstyle"},{"generics":["layouttransform"],"name":"option"},{"name":"mixblendmode"},{"generics":["filterop"],"name":"vec"}],"output":null}],[11,"pop_stacking_context","","",51,{"inputs":[{"name":"self"}],"output":null}],[11,"push_stops","","",51,null],[11,"define_scroll_frame","","",51,{"inputs":[{"name":"self"},{"generics":["clipid"],"name":"option"},{"name":"layoutrect"},{"name":"layoutrect"},{"name":"i"},{"generics":["imagemask"],"name":"option"},{"name":"scrollsensitivity"}],"output":{"name":"clipid"}}],[11,"define_scroll_frame_with_parent","","",51,{"inputs":[{"name":"self"},{"generics":["clipid"],"name":"option"},{"name":"clipid"},{"name":"layoutrect"},{"name":"layoutrect"},{"name":"i"},{"generics":["imagemask"],"name":"option"},{"name":"scrollsensitivity"}],"output":{"name":"clipid"}}],[11,"define_clip","","",51,{"inputs":[{"name":"self"},{"generics":["clipid"],"name":"option"},{"name":"layoutrect"},{"name":"i"},{"generics":["imagemask"],"name":"option"}],"output":{"name":"clipid"}}],[11,"define_clip_with_parent","","",51,{"inputs":[{"name":"self"},{"generics":["clipid"],"name":"option"},{"name":"clipid"},{"name":"layoutrect"},{"name":"i"},{"generics":["imagemask"],"name":"option"}],"output":{"name":"clipid"}}],[11,"define_sticky_frame","","",51,{"inputs":[{"name":"self"},{"generics":["clipid"],"name":"option"},{"name":"layoutrect"},{"generics":["option"],"name":"sideoffsets2d"},{"name":"stickyoffsetbounds"},{"name":"stickyoffsetbounds"},{"name":"layoutvector2d"}],"output":{"name":"clipid"}}],[11,"push_clip_id","","",51,{"inputs":[{"name":"self"},{"name":"clipid"}],"output":null}],[11,"push_clip_and_scroll_info","","",51,{"inputs":[{"name":"self"},{"name":"clipandscrollinfo"}],"output":null}],[11,"pop_clip_id","","",51,{"inputs":[{"name":"self"}],"output":null}],[11,"push_iframe","","",51,{"inputs":[{"name":"self"},{"name":"layoutprimitiveinfo"},{"name":"pipelineid"}],"output":null}],[11,"push_shadow","","",51,{"inputs":[{"name":"self"},{"name":"layoutprimitiveinfo"},{"name":"shadow"}],"output":null}],[11,"pop_all_shadows","","",51,{"inputs":[{"name":"self"}],"output":null}],[11,"finalize","","",51,null],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"nativefonthandle"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"glyphdimensions"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"fontkey"}}],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",54,null],[11,"eq","","",54,{"inputs":[{"name":"self"},{"name":"fontkey"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"self"},{"name":"fontkey"}],"output":{"name":"bool"}}],[11,"cmp","","",54,{"inputs":[{"name":"self"},{"name":"fontkey"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",54,{"inputs":[{"name":"self"},{"name":"fontkey"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",54,{"inputs":[{"name":"self"},{"name":"fontkey"}],"output":{"name":"bool"}}],[11,"le","","",54,{"inputs":[{"name":"self"},{"name":"fontkey"}],"output":{"name":"bool"}}],[11,"gt","","",54,{"inputs":[{"name":"self"},{"name":"fontkey"}],"output":{"name":"bool"}}],[11,"ge","","",54,{"inputs":[{"name":"self"},{"name":"fontkey"}],"output":{"name":"bool"}}],[11,"new","","",54,{"inputs":[{"name":"idnamespace"},{"name":"u32"}],"output":{"name":"fontkey"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"fonttemplate"}}],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"fontrendermode"}}],[11,"hash","","",100,null],[11,"eq","","",100,{"inputs":[{"name":"self"},{"name":"fontrendermode"}],"output":{"name":"bool"}}],[11,"cmp","","",100,{"inputs":[{"name":"self"},{"name":"fontrendermode"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",100,{"inputs":[{"name":"self"},{"name":"fontrendermode"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"subpixeldirection"}}],[11,"hash","","",101,null],[11,"eq","","",101,{"inputs":[{"name":"self"},{"name":"subpixeldirection"}],"output":{"name":"bool"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",101,{"inputs":[{"name":"self"},{"name":"subpixeldirection"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",101,{"inputs":[{"name":"self"},{"name":"subpixeldirection"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"limit_by","","",100,{"inputs":[{"name":"self"},{"name":"fontrendermode"}],"output":{"name":"fontrendermode"}}],[11,"limit_by","","",101,{"inputs":[{"name":"self"},{"name":"fontrendermode"}],"output":{"name":"subpixeldirection"}}],[11,"hash","","",102,null],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"subpixeloffset"}}],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",102,{"inputs":[{"name":"self"},{"name":"subpixeloffset"}],"output":{"name":"ordering"}}],[11,"eq","","",102,{"inputs":[{"name":"self"},{"name":"subpixeloffset"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",102,{"inputs":[{"name":"self"},{"name":"subpixeloffset"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"into","","",102,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"fontvariation"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",55,{"inputs":[{"name":"self"},{"name":"fontvariation"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",55,{"inputs":[{"name":"self"},{"name":"fontvariation"}],"output":{"name":"bool"}}],[11,"le","","",55,{"inputs":[{"name":"self"},{"name":"fontvariation"}],"output":{"name":"bool"}}],[11,"gt","","",55,{"inputs":[{"name":"self"},{"name":"fontvariation"}],"output":{"name":"bool"}}],[11,"ge","","",55,{"inputs":[{"name":"self"},{"name":"fontvariation"}],"output":{"name":"bool"}}],[11,"cmp","","",55,{"inputs":[{"name":"self"},{"name":"fontvariation"}],"output":{"name":"ordering"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"fontvariation"}],"output":{"name":"bool"}}],[11,"hash","","",55,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"glyphoptions"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",56,null],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"glyphoptions"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"self"},{"name":"glyphoptions"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",56,{"inputs":[{"name":"self"},{"name":"glyphoptions"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",56,{"inputs":[{"name":"self"},{"name":"glyphoptions"}],"output":{"name":"bool"}}],[11,"le","","",56,{"inputs":[{"name":"self"},{"name":"glyphoptions"}],"output":{"name":"bool"}}],[11,"gt","","",56,{"inputs":[{"name":"self"},{"name":"glyphoptions"}],"output":{"name":"bool"}}],[11,"ge","","",56,{"inputs":[{"name":"self"},{"name":"glyphoptions"}],"output":{"name":"bool"}}],[11,"cmp","","",56,{"inputs":[{"name":"self"},{"name":"glyphoptions"}],"output":{"name":"ordering"}}],[11,"eq","","",135,{"inputs":[{"name":"self"},{"name":"fontinstanceflags"}],"output":{"name":"bool"}}],[11,"ne","","",135,{"inputs":[{"name":"self"},{"name":"fontinstanceflags"}],"output":{"name":"bool"}}],[11,"clone","","",135,{"inputs":[{"name":"self"}],"output":{"name":"fontinstanceflags"}}],[11,"partial_cmp","","",135,{"inputs":[{"name":"self"},{"name":"fontinstanceflags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",135,{"inputs":[{"name":"self"},{"name":"fontinstanceflags"}],"output":{"name":"bool"}}],[11,"le","","",135,{"inputs":[{"name":"self"},{"name":"fontinstanceflags"}],"output":{"name":"bool"}}],[11,"gt","","",135,{"inputs":[{"name":"self"},{"name":"fontinstanceflags"}],"output":{"name":"bool"}}],[11,"ge","","",135,{"inputs":[{"name":"self"},{"name":"fontinstanceflags"}],"output":{"name":"bool"}}],[11,"cmp","","",135,{"inputs":[{"name":"self"},{"name":"fontinstanceflags"}],"output":{"name":"ordering"}}],[11,"hash","","",135,null],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"SYNTHETIC_ITALICS","","",135,null],[18,"SYNTHETIC_BOLD","","",135,null],[18,"EMBEDDED_BITMAPS","","",135,null],[18,"SUBPIXEL_BGR","","",135,null],[18,"FORCE_GDI","","",135,null],[18,"FONT_SMOOTHING","","",135,null],[18,"FORCE_AUTOHINT","","",135,null],[18,"NO_AUTOHINT","","",135,null],[18,"VERTICAL_LAYOUT","","",135,null],[11,"empty","","Returns an empty set of flags.",135,{"inputs":[],"output":{"name":"fontinstanceflags"}}],[11,"all","","Returns the set containing all flags.",135,{"inputs":[],"output":{"name":"fontinstanceflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",135,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",135,{"inputs":[{"name":"u32"}],"output":{"generics":["fontinstanceflags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",135,{"inputs":[{"name":"u32"}],"output":{"name":"fontinstanceflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",135,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",135,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",135,{"inputs":[{"name":"self"},{"name":"fontinstanceflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",135,{"inputs":[{"name":"self"},{"name":"fontinstanceflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",135,{"inputs":[{"name":"self"},{"name":"fontinstanceflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",135,{"inputs":[{"name":"self"},{"name":"fontinstanceflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",135,{"inputs":[{"name":"self"},{"name":"fontinstanceflags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",135,{"inputs":[{"name":"self"},{"name":"fontinstanceflags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",135,{"inputs":[{"name":"self"},{"name":"fontinstanceflags"}],"output":{"name":"fontinstanceflags"}}],[11,"bitor_assign","","Adds the set of flags.",135,{"inputs":[{"name":"self"},{"name":"fontinstanceflags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",135,{"inputs":[{"name":"self"},{"name":"fontinstanceflags"}],"output":{"name":"fontinstanceflags"}}],[11,"bitxor_assign","","Toggles the set of flags.",135,{"inputs":[{"name":"self"},{"name":"fontinstanceflags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",135,{"inputs":[{"name":"self"},{"name":"fontinstanceflags"}],"output":{"name":"fontinstanceflags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",135,{"inputs":[{"name":"self"},{"name":"fontinstanceflags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",135,{"inputs":[{"name":"self"},{"name":"fontinstanceflags"}],"output":{"name":"fontinstanceflags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",135,{"inputs":[{"name":"self"},{"name":"fontinstanceflags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",135,{"inputs":[{"name":"self"}],"output":{"name":"fontinstanceflags"}}],[11,"extend","","",135,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",135,{"inputs":[{"name":"t"}],"output":{"name":"fontinstanceflags"}}],[11,"default","","",135,{"inputs":[],"output":{"name":"fontinstanceflags"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"fontinstanceoptions"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",57,null],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"fontinstanceoptions"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"self"},{"name":"fontinstanceoptions"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",57,{"inputs":[{"name":"self"},{"name":"fontinstanceoptions"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",57,{"inputs":[{"name":"self"},{"name":"fontinstanceoptions"}],"output":{"name":"bool"}}],[11,"le","","",57,{"inputs":[{"name":"self"},{"name":"fontinstanceoptions"}],"output":{"name":"bool"}}],[11,"gt","","",57,{"inputs":[{"name":"self"},{"name":"fontinstanceoptions"}],"output":{"name":"bool"}}],[11,"ge","","",57,{"inputs":[{"name":"self"},{"name":"fontinstanceoptions"}],"output":{"name":"bool"}}],[11,"cmp","","",57,{"inputs":[{"name":"self"},{"name":"fontinstanceoptions"}],"output":{"name":"ordering"}}],[11,"default","","",57,{"inputs":[],"output":{"name":"fontinstanceoptions"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"fontlcdfilter"}}],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",103,null],[11,"eq","","",103,{"inputs":[{"name":"self"},{"name":"fontlcdfilter"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",103,{"inputs":[{"name":"self"},{"name":"fontlcdfilter"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",103,{"inputs":[{"name":"self"},{"name":"fontlcdfilter"}],"output":{"name":"ordering"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"fonthinting"}}],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",104,null],[11,"eq","","",104,{"inputs":[{"name":"self"},{"name":"fonthinting"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",104,{"inputs":[{"name":"self"},{"name":"fonthinting"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",104,{"inputs":[{"name":"self"},{"name":"fonthinting"}],"output":{"name":"ordering"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"fontinstanceplatformoptions"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",58,null],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"fontinstanceplatformoptions"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"fontinstanceplatformoptions"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",58,{"inputs":[{"name":"self"},{"name":"fontinstanceplatformoptions"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",58,{"inputs":[{"name":"self"},{"name":"fontinstanceplatformoptions"}],"output":{"name":"bool"}}],[11,"le","","",58,{"inputs":[{"name":"self"},{"name":"fontinstanceplatformoptions"}],"output":{"name":"bool"}}],[11,"gt","","",58,{"inputs":[{"name":"self"},{"name":"fontinstanceplatformoptions"}],"output":{"name":"bool"}}],[11,"ge","","",58,{"inputs":[{"name":"self"},{"name":"fontinstanceplatformoptions"}],"output":{"name":"bool"}}],[11,"cmp","","",58,{"inputs":[{"name":"self"},{"name":"fontinstanceplatformoptions"}],"output":{"name":"ordering"}}],[11,"default","","",58,{"inputs":[],"output":{"name":"fontinstanceplatformoptions"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"fontinstancekey"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",59,null],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"fontinstancekey"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"fontinstancekey"}],"output":{"name":"bool"}}],[11,"cmp","","",59,{"inputs":[{"name":"self"},{"name":"fontinstancekey"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",59,{"inputs":[{"name":"self"},{"name":"fontinstancekey"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",59,{"inputs":[{"name":"self"},{"name":"fontinstancekey"}],"output":{"name":"bool"}}],[11,"le","","",59,{"inputs":[{"name":"self"},{"name":"fontinstancekey"}],"output":{"name":"bool"}}],[11,"gt","","",59,{"inputs":[{"name":"self"},{"name":"fontinstancekey"}],"output":{"name":"bool"}}],[11,"ge","","",59,{"inputs":[{"name":"self"},{"name":"fontinstancekey"}],"output":{"name":"bool"}}],[11,"new","","",59,{"inputs":[{"name":"idnamespace"},{"name":"u32"}],"output":{"name":"fontinstancekey"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"glyphkey"}}],[11,"hash","","",60,null],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"glyphkey"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"self"},{"name":"glyphkey"}],"output":{"name":"bool"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",60,{"inputs":[{"name":"self"},{"name":"glyphkey"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",60,{"inputs":[{"name":"self"},{"name":"glyphkey"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",60,{"inputs":[{"name":"self"},{"name":"glyphkey"}],"output":{"name":"bool"}}],[11,"le","","",60,{"inputs":[{"name":"self"},{"name":"glyphkey"}],"output":{"name":"bool"}}],[11,"gt","","",60,{"inputs":[{"name":"self"},{"name":"glyphkey"}],"output":{"name":"bool"}}],[11,"ge","","",60,{"inputs":[{"name":"self"},{"name":"glyphkey"}],"output":{"name":"bool"}}],[11,"new","","",60,{"inputs":[{"name":"u32"},{"name":"layoutpoint"},{"name":"fontrendermode"},{"name":"subpixeldirection"}],"output":{"name":"glyphkey"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"glyphinstance"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"glyphinstance"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"self"},{"name":"glyphinstance"}],"output":{"name":"bool"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"imagekey"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",62,null],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"imagekey"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"self"},{"name":"imagekey"}],"output":{"name":"bool"}}],[11,"cmp","","",62,{"inputs":[{"name":"self"},{"name":"imagekey"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",62,{"inputs":[{"name":"self"},{"name":"imagekey"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",62,{"inputs":[{"name":"self"},{"name":"imagekey"}],"output":{"name":"bool"}}],[11,"le","","",62,{"inputs":[{"name":"self"},{"name":"imagekey"}],"output":{"name":"bool"}}],[11,"gt","","",62,{"inputs":[{"name":"self"},{"name":"imagekey"}],"output":{"name":"bool"}}],[11,"ge","","",62,{"inputs":[{"name":"self"},{"name":"imagekey"}],"output":{"name":"bool"}}],[11,"new","","",62,{"inputs":[{"name":"idnamespace"},{"name":"u32"}],"output":{"name":"imagekey"}}],[11,"dummy","","",62,{"inputs":[],"output":{"name":"imagekey"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"externalimageid"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",63,{"inputs":[{"name":"self"},{"name":"externalimageid"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"self"},{"name":"externalimageid"}],"output":{"name":"bool"}}],[11,"hash","","",63,null],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"externalimagetype"}}],[11,"hash","","",105,null],[11,"eq","","",105,{"inputs":[{"name":"self"},{"name":"externalimagetype"}],"output":{"name":"bool"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"externalimagedata"}}],[11,"hash","","",64,null],[11,"eq","","",64,{"inputs":[{"name":"self"},{"name":"externalimagedata"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"self"},{"name":"externalimagedata"}],"output":{"name":"bool"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"imageformat"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",106,null],[11,"eq","","",106,{"inputs":[{"name":"self"},{"name":"imageformat"}],"output":{"name":"bool"}}],[11,"bytes_per_pixel","","",106,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"imagedescriptor"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",65,{"inputs":[{"name":"self"},{"name":"imagedescriptor"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"self"},{"name":"imagedescriptor"}],"output":{"name":"bool"}}],[11,"new","","",65,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"imageformat"},{"name":"bool"}],"output":{"name":"self"}}],[11,"compute_stride","","",65,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"imagedata"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",107,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"imagedata"}}],[11,"new_shared","","",107,{"inputs":[{"generics":["vec"],"name":"arc"}],"output":{"name":"imagedata"}}],[11,"new_blob_image","","",107,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"imagedata"}}],[11,"is_blob","","",107,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"uses_texture_cache","","",107,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"blobimagedescriptor"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"blobimageerror"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"blobimagerequest"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"blobimagerequest"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"self"},{"name":"blobimagerequest"}],"output":{"name":"bool"}}],[11,"hash","","",68,null],[6,"TileSize","","",null,null],[6,"DocumentLayer","","Documents are rendered in the ascending order of their associated layer values.",null,null],[6,"PipelineSourceId","","This type carries no valuable semantics for WR. However, it reflects the fact that clients (Servo) may generate pipelines by different semi-independent sources. These pipelines still belong to the same `IdNamespace` and the same `DocumentId`. Having this extra Id field enables them to generate `PipelineId` without collision.",null,null],[6,"ItemTag","","A tag that can be used to identify items during hit testing. If the tag is missing then the item doesn't take part in hit testing at all. This is composed of two numbers. In Servo, the first is an identifier while the second is used to select the cursor that should be used during mouse movement. In Gecko, the first is a scrollframe identifier, while the second is used to store various flags that APZ needs to properly process input events.",null,null],[6,"DisplayItem","","",null,null],[6,"LayoutPrimitiveInfo","","",null,null],[6,"LayerPrimitiveInfo","","",null,null],[6,"GlyphIndex","","",null,null],[6,"BlobImageData","","",null,null],[6,"BlobImageResult","","",null,null],[6,"DeviceIntRect","","",null,null],[6,"DeviceIntPoint","","",null,null],[6,"DeviceIntSize","","",null,null],[6,"DeviceIntLength","","",null,null],[6,"DeviceUintRect","","",null,null],[6,"DeviceUintPoint","","",null,null],[6,"DeviceUintSize","","",null,null],[6,"DeviceRect","","",null,null],[6,"DevicePoint","","",null,null],[6,"DeviceVector2D","","",null,null],[6,"DeviceSize","","",null,null],[6,"LayoutPixel","","Geometry in a stacking context's local coordinate space (logical pixels).",null,null],[6,"LayoutRect","","",null,null],[6,"LayoutPoint","","",null,null],[6,"LayoutVector2D","","",null,null],[6,"LayoutVector3D","","",null,null],[6,"LayoutSize","","",null,null],[6,"LayerRect","","",null,null],[6,"LayerPoint","","",null,null],[6,"LayerPoint3D","","",null,null],[6,"LayerVector2D","","",null,null],[6,"LayerVector3D","","",null,null],[6,"LayerSize","","",null,null],[6,"ScrollLayerRect","","",null,null],[6,"ScrollLayerPoint","","",null,null],[6,"ScrollLayerVector2D","","",null,null],[6,"ScrollLayerSize","","",null,null],[6,"WorldRect","","",null,null],[6,"WorldPoint","","",null,null],[6,"WorldSize","","",null,null],[6,"WorldPoint3D","","",null,null],[6,"WorldVector2D","","",null,null],[6,"WorldVector3D","","",null,null],[6,"TileOffset","","",null,null],[6,"DevicePixelScale","","Scaling ratio from world pixels to device pixels.",null,null],[6,"LayerToWorldScale","","Scaling ratio from layer to world. Used for cases where we know the layer is in world space, or specifically want to treat it this way.",null,null],[6,"LayoutTransform","","",null,null],[6,"LayerTransform","","",null,null],[6,"LayerToScrollTransform","","",null,null],[6,"ScrollToLayerTransform","","",null,null],[6,"LayerToWorldTransform","","",null,null],[6,"WorldToLayerTransform","","",null,null],[6,"ScrollToWorldTransform","","",null,null],[6,"LayerPointAu","","",null,null],[6,"LayerRectAu","","",null,null],[6,"LayerSizeAu","","",null,null],[17,"YUV_COLOR_SPACES","","",null,null],[17,"YUV_FORMATS","","",null,null],[17,"MAX_TEXT_RUN_LENGTH","","",null,null],[8,"RenderNotifier","","",null,null],[10,"clone","","",136,{"inputs":[{"name":"self"}],"output":{"generics":["rendernotifier"],"name":"box"}}],[10,"wake_up","","",136,{"inputs":[{"name":"self"}],"output":null}],[10,"new_document_ready","","",136,{"inputs":[{"name":"self"},{"name":"documentid"},{"name":"bool"},{"name":"bool"}],"output":null}],[11,"external_event","","",136,{"inputs":[{"name":"self"},{"name":"externalevent"}],"output":null}],[11,"shut_down","","",136,{"inputs":[{"name":"self"}],"output":null}],[8,"BlobImageResources","","",null,null],[10,"get_font_data","","",137,{"inputs":[{"name":"self"},{"name":"fontkey"}],"output":{"name":"fonttemplate"}}],[10,"get_image","","",137,{"inputs":[{"name":"self"},{"name":"imagekey"}],"output":{"name":"option"}}],[8,"BlobImageRenderer","","",null,null],[10,"add","","",138,{"inputs":[{"name":"self"},{"name":"imagekey"},{"name":"blobimagedata"},{"generics":["tilesize"],"name":"option"}],"output":null}],[10,"update","","",138,{"inputs":[{"name":"self"},{"name":"imagekey"},{"name":"blobimagedata"},{"generics":["deviceuintrect"],"name":"option"}],"output":null}],[10,"delete","","",138,{"inputs":[{"name":"self"},{"name":"imagekey"}],"output":null}],[10,"request","","",138,{"inputs":[{"name":"self"},{"name":"blobimageresources"},{"name":"blobimagerequest"},{"name":"blobimagedescriptor"},{"generics":["deviceuintrect"],"name":"option"}],"output":null}],[10,"resolve","","",138,{"inputs":[{"name":"self"},{"name":"blobimagerequest"}],"output":{"name":"blobimageresult"}}],[10,"delete_font","","",138,{"inputs":[{"name":"self"},{"name":"fontkey"}],"output":null}],[10,"delete_font_instance","","",138,{"inputs":[{"name":"self"},{"name":"fontinstancekey"}],"output":null}],[11,"external_event","","",136,{"inputs":[{"name":"self"},{"name":"externalevent"}],"output":null}],[11,"shut_down","","",136,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","",139,{"inputs":[{"generics":["f32","layerpixel"],"name":"typedrect"}],"output":{"name":"self"}}],[11,"with_clip_rect","","",139,{"inputs":[{"generics":["f32","layerpixel"],"name":"typedrect"},{"generics":["f32","layerpixel"],"name":"typedrect"}],"output":{"name":"self"}}],[11,"with_clip","","",139,{"inputs":[{"generics":["f32","layerpixel"],"name":"typedrect"},{"name":"localclip"}],"output":{"name":"self"}}]],"paths":[[3,"ResourceUpdates"],[3,"AddImage"],[3,"UpdateImage"],[3,"HitTestItem"],[3,"HitTestResult"],[3,"AddFontInstance"],[3,"Epoch"],[3,"IdNamespace"],[3,"DocumentId"],[3,"PipelineId"],[3,"ResourceId"],[3,"ScrollLayerState"],[3,"PropertyBindingKey"],[3,"PropertyValue"],[3,"DynamicProperties"],[3,"PremultipliedColorF"],[3,"ColorF"],[3,"ColorU"],[3,"ClipAndScrollInfo"],[3,"GenericDisplayItem"],[3,"PrimitiveInfo"],[3,"ClipDisplayItem"],[3,"StickyOffsetBounds"],[3,"StickyFrameDisplayItem"],[3,"ScrollFrameDisplayItem"],[3,"RectangleDisplayItem"],[3,"LineDisplayItem"],[3,"TextDisplayItem"],[3,"NormalBorder"],[3,"NinePatchDescriptor"],[3,"ImageBorder"],[3,"GradientBorder"],[3,"RadialGradientBorder"],[3,"BorderDisplayItem"],[3,"BorderRadius"],[3,"BorderWidths"],[3,"BorderSide"],[3,"BoxShadowDisplayItem"],[3,"Shadow"],[3,"Gradient"],[3,"GradientDisplayItem"],[3,"GradientStop"],[3,"RadialGradient"],[3,"RadialGradientDisplayItem"],[3,"PushStackingContextDisplayItem"],[3,"StackingContext"],[3,"IframeDisplayItem"],[3,"ImageDisplayItem"],[3,"YuvImageDisplayItem"],[3,"ImageMask"],[3,"ComplexClipRegion"],[3,"DisplayListBuilder"],[3,"NativeFontHandle"],[3,"GlyphDimensions"],[3,"FontKey"],[3,"FontVariation"],[3,"GlyphOptions"],[3,"FontInstanceOptions"],[3,"FontInstancePlatformOptions"],[3,"FontInstanceKey"],[3,"GlyphKey"],[3,"GlyphInstance"],[3,"ImageKey"],[3,"ExternalImageId"],[3,"ExternalImageData"],[3,"ImageDescriptor"],[3,"BlobImageDescriptor"],[3,"RasterizedBlobImage"],[3,"BlobImageRequest"],[4,"ResourceUpdate"],[4,"AddFont"],[4,"DocumentMsg"],[4,"DebugCommand"],[4,"ApiMsg"],[4,"ScrollClamping"],[4,"ScrollEventPhase"],[4,"ScrollLocation"],[4,"PropertyBinding"],[4,"SpecificDisplayItem"],[4,"ScrollSensitivity"],[4,"LineOrientation"],[4,"LineStyle"],[4,"RepeatMode"],[4,"BorderDetails"],[4,"BorderRadiusKind"],[4,"BorderStyle"],[4,"BoxShadowClipMode"],[4,"ExtendMode"],[4,"ScrollPolicy"],[4,"TransformStyle"],[4,"MixBlendMode"],[4,"FilterOp"],[4,"ImageRendering"],[4,"YuvColorSpace"],[4,"YuvData"],[4,"YuvFormat"],[4,"LocalClip"],[4,"ClipMode"],[4,"ClipId"],[4,"FontTemplate"],[4,"FontRenderMode"],[4,"SubpixelDirection"],[4,"SubpixelOffset"],[4,"FontLCDFilter"],[4,"FontHinting"],[4,"ExternalImageType"],[4,"ImageFormat"],[4,"ImageData"],[4,"BlobImageError"],[3,"DevicePixel"],[3,"LayerPixel"],[3,"ScrollLayerPixel"],[3,"WorldPixel"],[3,"Tiles"],[3,"Transaction"],[3,"HitTestFlags"],[3,"ExternalEvent"],[3,"RenderApiSender"],[3,"RenderApi"],[3,"ZoomFactor"],[3,"PropertyBindingId"],[3,"Payload"],[8,"PayloadSenderHelperMethods"],[8,"PayloadReceiverHelperMethods"],[6,"PayloadSender"],[6,"PayloadReceiver"],[3,"MsgReceiver"],[3,"MsgSender"],[3,"ItemRange"],[3,"BuiltDisplayList"],[3,"BuiltDisplayListDescriptor"],[3,"AuxIter"],[3,"BuiltDisplayListIter"],[3,"DisplayItemRef"],[3,"SaveState"],[3,"FontInstanceFlags"],[8,"RenderNotifier"],[8,"BlobImageResources"],[8,"BlobImageRenderer"],[6,"LayerPrimitiveInfo"]]};
searchIndex["yoga"] = {"doc":"","items":[[3,"Node","yoga","",null,null],[0,"macros","","",null,null],[0,"prelude","","",null,null],[0,"types","","",null,null],[17,"Undefined","yoga::types","Not a Number (NaN).",null,null],[3,"YGInternalSize","","",null,null],[12,"width","","",0,null],[12,"height","","",0,null],[3,"Size","","",null,null],[12,"width","","",1,null],[12,"height","","",1,null],[3,"Layout","","",null,null],[3,"Context","","",null,null],[4,"Align","","",null,null],[13,"Auto","","",2,null],[13,"FlexStart","","",2,null],[13,"Center","","",2,null],[13,"FlexEnd","","",2,null],[13,"Stretch","","",2,null],[13,"Baseline","","",2,null],[13,"SpaceBetween","","",2,null],[13,"SpaceAround","","",2,null],[4,"Dimension","","",null,null],[13,"Width","","",3,null],[13,"Height","","",3,null],[4,"Direction","","",null,null],[13,"Inherit","","",4,null],[13,"LTR","","",4,null],[13,"RTL","","",4,null],[4,"Display","","",null,null],[13,"Flex","","",5,null],[13,"None","","",5,null],[4,"Edge","","",null,null],[13,"Left","","",6,null],[13,"Top","","",6,null],[13,"Right","","",6,null],[13,"Bottom","","",6,null],[13,"Start","","",6,null],[13,"End","","",6,null],[13,"Horizontal","","",6,null],[13,"Vertical","","",6,null],[13,"All","","",6,null],[4,"FlexDirection","","",null,null],[13,"Column","","",7,null],[13,"ColumnReverse","","",7,null],[13,"Row","","",7,null],[13,"RowReverse","","",7,null],[4,"Justify","","",null,null],[13,"FlexStart","","",8,null],[13,"Center","","",8,null],[13,"FlexEnd","","",8,null],[13,"SpaceBetween","","",8,null],[13,"SpaceAround","","",8,null],[4,"LogLevel","","",null,null],[13,"Error","","",9,null],[13,"Warn","","",9,null],[13,"Info","","",9,null],[13,"Debug","","",9,null],[13,"Verbose","","",9,null],[13,"Fatal","","",9,null],[4,"YGInternalMeasureMode","","",null,null],[13,"YGMeasureModeUndefined","","",10,null],[13,"YGMeasureModeExactly","","",10,null],[13,"YGMeasureModeAtMost","","",10,null],[4,"MeasureMode","","",null,null],[13,"Undefined","","",11,null],[13,"Exactly","","",11,null],[13,"AtMost","","",11,null],[4,"NodeType","","",null,null],[13,"Default","","",12,null],[13,"Text","","",12,null],[4,"Overflow","","",null,null],[13,"Visible","","",13,null],[13,"Hidden","","",13,null],[13,"Scroll","","",13,null],[4,"PositionType","","",null,null],[13,"Relative","","",14,null],[13,"Absolute","","",14,null],[4,"PrintOptions","","",null,null],[13,"Layout","","",15,null],[13,"Style","","",15,null],[13,"Children","","",15,null],[4,"StyleUnit","","",null,null],[13,"UndefinedValue","","",16,null],[13,"Point","","",16,null],[13,"Percent","","",16,null],[13,"Auto","","",16,null],[4,"Wrap","","",null,null],[13,"NoWrap","","",17,null],[13,"Wrap","","",17,null],[13,"WrapReverse","","",17,null],[4,"FlexStyle","","",null,null],[13,"AlignContent","","",18,null],[13,"AlignItems","","",18,null],[13,"AlignSelf","","",18,null],[13,"AspectRatio","","",18,null],[13,"BorderBottom","","",18,null],[13,"BorderEnd","","",18,null],[13,"BorderLeft","","",18,null],[13,"BorderRight","","",18,null],[13,"BorderStart","","",18,null],[13,"BorderTop","","",18,null],[13,"Border","","",18,null],[13,"Bottom","","",18,null],[13,"Display","","",18,null],[13,"End","","",18,null],[13,"Flex","","",18,null],[13,"FlexBasis","","",18,null],[13,"FlexDirection","","",18,null],[13,"FlexGrow","","",18,null],[13,"FlexShrink","","",18,null],[13,"FlexWrap","","",18,null],[13,"Height","","",18,null],[13,"JustifyContent","","",18,null],[13,"Left","","",18,null],[13,"Margin","","",18,null],[13,"MarginBottom","","",18,null],[13,"MarginEnd","","",18,null],[13,"MarginHorizontal","","",18,null],[13,"MarginLeft","","",18,null],[13,"MarginRight","","",18,null],[13,"MarginStart","","",18,null],[13,"MarginTop","","",18,null],[13,"MarginVertical","","",18,null],[13,"MaxHeight","","",18,null],[13,"MaxWidth","","",18,null],[13,"MinHeight","","",18,null],[13,"MinWidth","","",18,null],[13,"Overflow","","",18,null],[13,"Padding","","",18,null],[13,"PaddingBottom","","",18,null],[13,"PaddingEnd","","",18,null],[13,"PaddingHorizontal","","",18,null],[13,"PaddingLeft","","",18,null],[13,"PaddingRight","","",18,null],[13,"PaddingStart","","",18,null],[13,"PaddingTop","","",18,null],[13,"PaddingVertical","","",18,null],[13,"Position","","",18,null],[13,"Right","","",18,null],[13,"Start","","",18,null],[13,"Top","","",18,null],[13,"Width","","",18,null],[6,"YGInternalNodeRef","","",null,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"flexstyle"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"flexstyle"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"self"},{"name":"flexstyle"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",18,{"inputs":[{"name":"self"},{"name":"flexstyle"}],"output":{"name":"bool"}}],[11,"le","","",18,{"inputs":[{"name":"self"},{"name":"flexstyle"}],"output":{"name":"bool"}}],[11,"gt","","",18,{"inputs":[{"name":"self"},{"name":"flexstyle"}],"output":{"name":"bool"}}],[11,"ge","","",18,{"inputs":[{"name":"self"},{"name":"flexstyle"}],"output":{"name":"bool"}}],[11,"cmp","","",18,{"inputs":[{"name":"self"},{"name":"flexstyle"}],"output":{"name":"ordering"}}],[11,"hash","","",18,null],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"flexstyle"}}],[11,"to_tokens","","",18,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_custom_tokens","","",18,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",19,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",19,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"bool"}}],[11,"le","","",19,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"bool"}}],[11,"gt","","",19,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"bool"}}],[11,"ge","","",19,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"bool"}}],[11,"cmp","","",19,{"inputs":[{"name":"self"},{"name":"layout"}],"output":{"name":"ordering"}}],[11,"hash","","",19,null],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"layout"}}],[11,"to_tokens","","",19,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_custom_tokens","","",19,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"new","","",19,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"layout"}}],[11,"left","","",19,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"right","","",19,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"top","","",19,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"bottom","","",19,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"width","","",19,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"height","","",19,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",20,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"deref","","",20,{"inputs":[{"name":"self"}],"output":{"name":"box"}}],[0,"traits","yoga","",null,null],[8,"Percent","yoga::traits","",null,null],[10,"percent","","",21,{"inputs":[{"name":"self"}],"output":{"name":"styleunit"}}],[8,"Point","","",null,null],[10,"point","","",22,{"inputs":[{"name":"self"}],"output":{"name":"styleunit"}}],[11,"fmt","yoga","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"node"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"node"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",23,{"inputs":[{"name":"self"},{"name":"node"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",23,{"inputs":[{"name":"self"},{"name":"node"}],"output":{"name":"bool"}}],[11,"le","","",23,{"inputs":[{"name":"self"},{"name":"node"}],"output":{"name":"bool"}}],[11,"gt","","",23,{"inputs":[{"name":"self"},{"name":"node"}],"output":{"name":"bool"}}],[11,"ge","","",23,{"inputs":[{"name":"self"},{"name":"node"}],"output":{"name":"bool"}}],[11,"cmp","","",23,{"inputs":[{"name":"self"},{"name":"node"}],"output":{"name":"ordering"}}],[11,"hash","","",23,null],[11,"new","","",23,{"inputs":[],"output":{"name":"node"}}],[11,"ptr","","",23,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reset","","",23,{"inputs":[{"name":"self"}],"output":null}],[11,"apply_styles","","",23,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"apply_style","","",23,{"inputs":[{"name":"self"},{"name":"flexstyle"}],"output":null}],[11,"insert_child","","",23,{"inputs":[{"name":"self"},{"name":"node"},{"name":"u32"}],"output":null}],[11,"remove_child","","",23,{"inputs":[{"name":"self"},{"name":"node"}],"output":null}],[11,"child_count","","",23,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"set_direction","","",23,{"inputs":[{"name":"self"},{"name":"direction"}],"output":null}],[11,"set_flex_direction","","",23,{"inputs":[{"name":"self"},{"name":"flexdirection"}],"output":null}],[11,"set_justify_content","","",23,{"inputs":[{"name":"self"},{"name":"justify"}],"output":null}],[11,"set_align_content","","",23,{"inputs":[{"name":"self"},{"name":"align"}],"output":null}],[11,"set_align_items","","",23,{"inputs":[{"name":"self"},{"name":"align"}],"output":null}],[11,"set_align_self","","",23,{"inputs":[{"name":"self"},{"name":"align"}],"output":null}],[11,"set_position_type","","",23,{"inputs":[{"name":"self"},{"name":"positiontype"}],"output":null}],[11,"set_position","","",23,{"inputs":[{"name":"self"},{"name":"edge"},{"name":"styleunit"}],"output":null}],[11,"set_flex_wrap","","",23,{"inputs":[{"name":"self"},{"name":"wrap"}],"output":null}],[11,"set_overflow","","",23,{"inputs":[{"name":"self"},{"name":"overflow"}],"output":null}],[11,"set_flex","","",23,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"set_flex_grow","","",23,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"set_flex_shrink","","",23,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"set_flex_basis","","",23,{"inputs":[{"name":"self"},{"name":"styleunit"}],"output":null}],[11,"set_edge_position","","",23,{"inputs":[{"name":"self"},{"name":"edge"},{"name":"f32"}],"output":null}],[11,"set_margin","","",23,{"inputs":[{"name":"self"},{"name":"edge"},{"name":"styleunit"}],"output":null}],[11,"set_padding","","",23,{"inputs":[{"name":"self"},{"name":"edge"},{"name":"styleunit"}],"output":null}],[11,"set_border","","",23,{"inputs":[{"name":"self"},{"name":"edge"},{"name":"f32"}],"output":null}],[11,"set_width","","",23,{"inputs":[{"name":"self"},{"name":"styleunit"}],"output":null}],[11,"set_height","","",23,{"inputs":[{"name":"self"},{"name":"styleunit"}],"output":null}],[11,"set_min_width","","",23,{"inputs":[{"name":"self"},{"name":"styleunit"}],"output":null}],[11,"set_min_height","","",23,{"inputs":[{"name":"self"},{"name":"styleunit"}],"output":null}],[11,"set_max_width","","",23,{"inputs":[{"name":"self"},{"name":"styleunit"}],"output":null}],[11,"set_max_height","","",23,{"inputs":[{"name":"self"},{"name":"styleunit"}],"output":null}],[11,"set_aspect_ratio","","",23,{"inputs":[{"name":"self"},{"name":"f32"}],"output":null}],[11,"calculate_layout","","",23,{"inputs":[{"name":"self"},{"name":"f32"},{"name":"f32"},{"name":"direction"}],"output":null}],[11,"get_layout","","",23,{"inputs":[{"name":"self"}],"output":{"name":"layout"}}],[11,"get_child_count","","",23,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"get_child","","",23,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"yginternalnoderef"}}],[11,"get_style_direction","","",23,{"inputs":[{"name":"self"}],"output":{"name":"direction"}}],[11,"get_flex_direction","","",23,{"inputs":[{"name":"self"}],"output":{"name":"flexdirection"}}],[11,"get_justify_content","","",23,{"inputs":[{"name":"self"}],"output":{"name":"justify"}}],[11,"get_align_content","","",23,{"inputs":[{"name":"self"}],"output":{"name":"align"}}],[11,"get_align_items","","",23,{"inputs":[{"name":"self"}],"output":{"name":"align"}}],[11,"get_align_self","","",23,{"inputs":[{"name":"self"}],"output":{"name":"align"}}],[11,"get_position_type","","",23,{"inputs":[{"name":"self"}],"output":{"name":"positiontype"}}],[11,"get_flex_wrap","","",23,{"inputs":[{"name":"self"}],"output":{"name":"wrap"}}],[11,"get_overflow","","",23,{"inputs":[{"name":"self"}],"output":{"name":"overflow"}}],[11,"get_flex_grow","","",23,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_flex_shrink","","",23,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_flex_basis","","",23,{"inputs":[{"name":"self"}],"output":{"name":"styleunit"}}],[11,"get_style_position_left","","",23,{"inputs":[{"name":"self"}],"output":{"name":"styleunit"}}],[11,"get_style_position_right","","",23,{"inputs":[{"name":"self"}],"output":{"name":"styleunit"}}],[11,"get_style_position_top","","",23,{"inputs":[{"name":"self"}],"output":{"name":"styleunit"}}],[11,"get_style_position_bottom","","",23,{"inputs":[{"name":"self"}],"output":{"name":"styleunit"}}],[11,"get_style_position_start","","",23,{"inputs":[{"name":"self"}],"output":{"name":"styleunit"}}],[11,"get_style_position_end","","",23,{"inputs":[{"name":"self"}],"output":{"name":"styleunit"}}],[11,"get_style_margin_left","","",23,{"inputs":[{"name":"self"}],"output":{"name":"styleunit"}}],[11,"get_style_margin_right","","",23,{"inputs":[{"name":"self"}],"output":{"name":"styleunit"}}],[11,"get_style_margin_top","","",23,{"inputs":[{"name":"self"}],"output":{"name":"styleunit"}}],[11,"get_style_margin_bottom","","",23,{"inputs":[{"name":"self"}],"output":{"name":"styleunit"}}],[11,"get_style_margin_start","","",23,{"inputs":[{"name":"self"}],"output":{"name":"styleunit"}}],[11,"get_style_margin_end","","",23,{"inputs":[{"name":"self"}],"output":{"name":"styleunit"}}],[11,"get_style_padding_left","","",23,{"inputs":[{"name":"self"}],"output":{"name":"styleunit"}}],[11,"get_style_padding_right","","",23,{"inputs":[{"name":"self"}],"output":{"name":"styleunit"}}],[11,"get_style_padding_top","","",23,{"inputs":[{"name":"self"}],"output":{"name":"styleunit"}}],[11,"get_style_padding_bottom","","",23,{"inputs":[{"name":"self"}],"output":{"name":"styleunit"}}],[11,"get_style_padding_start","","",23,{"inputs":[{"name":"self"}],"output":{"name":"styleunit"}}],[11,"get_style_padding_end","","",23,{"inputs":[{"name":"self"}],"output":{"name":"styleunit"}}],[11,"get_style_border_left","","",23,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_style_border_right","","",23,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_style_border_top","","",23,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_style_border_bottom","","",23,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_style_border_start","","",23,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_style_border_end","","",23,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_style_width","","",23,{"inputs":[{"name":"self"}],"output":{"name":"styleunit"}}],[11,"get_style_height","","",23,{"inputs":[{"name":"self"}],"output":{"name":"styleunit"}}],[11,"get_style_min_width","","",23,{"inputs":[{"name":"self"}],"output":{"name":"styleunit"}}],[11,"get_style_min_height","","",23,{"inputs":[{"name":"self"}],"output":{"name":"styleunit"}}],[11,"get_style_max_width","","",23,{"inputs":[{"name":"self"}],"output":{"name":"styleunit"}}],[11,"get_style_max_height","","",23,{"inputs":[{"name":"self"}],"output":{"name":"styleunit"}}],[11,"get_layout_margin_left","","",23,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_layout_margin_right","","",23,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_layout_margin_top","","",23,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_layout_margin_bottom","","",23,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_layout_margin_start","","",23,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_layout_margin_end","","",23,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_layout_padding_left","","",23,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_layout_padding_right","","",23,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_layout_padding_top","","",23,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_layout_padding_bottom","","",23,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_layout_padding_start","","",23,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_layout_padding_end","","",23,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_layout_left","","",23,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_layout_right","","",23,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_layout_top","","",23,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_layout_bottom","","",23,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_layout_border_left","","",23,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_layout_border_right","","",23,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_layout_border_top","","",23,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_layout_border_bottom","","",23,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_layout_width","","",23,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_layout_height","","",23,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"get_layout_direction","","",23,{"inputs":[{"name":"self"}],"output":{"name":"direction"}}],[11,"is_dirty","","",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"mark_dirty","","",23,{"inputs":[{"name":"self"}],"output":null}],[11,"copy_style","","",23,{"inputs":[{"name":"self"},{"name":"node"}],"output":null}],[11,"set_display","","",23,{"inputs":[{"name":"self"},{"name":"display"}],"output":null}],[11,"set_measure_func","","",23,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"set_baseline_func","","",23,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"set_context","","",23,{"inputs":[{"name":"self"},{"generics":["context"],"name":"option"}],"output":null}],[11,"get_context","","",23,{"inputs":[{"name":"yginternalnoderef"}],"output":{"generics":["box"],"name":"option"}}],[11,"get_context_mut","","",23,{"inputs":[{"name":"yginternalnoderef"}],"output":{"generics":["box"],"name":"option"}}],[11,"get_own_context","","",23,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"option"}}],[11,"get_own_context_mut","","",23,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"option"}}],[11,"drop_context","","",23,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",23,{"inputs":[{"name":"self"}],"output":null}],[14,"unit","","",null,null],[14,"flex_style","","",null,null],[14,"style","","",null,null],[14,"make_styles","","",null,null],[11,"fmt","yoga::types","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"ygmeasuremode"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"ygmeasuremode"}],"output":{"name":"bool"}}],[11,"hash","","",10,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"align"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"align"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"align"}],"output":{"name":"ordering"}}],[11,"hash","","",2,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"align"}}],[11,"to_tokens","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_custom_tokens","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"dimension"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"dimension"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"dimension"}],"output":{"name":"ordering"}}],[11,"hash","","",3,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"dimension"}}],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_custom_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"direction"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"direction"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"direction"}],"output":{"name":"ordering"}}],[11,"hash","","",4,null],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"direction"}}],[11,"to_tokens","","",4,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_custom_tokens","","",4,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"display"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"self"},{"name":"display"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",5,{"inputs":[{"name":"self"},{"name":"display"}],"output":{"name":"ordering"}}],[11,"hash","","",5,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"display"}}],[11,"to_tokens","","",5,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_custom_tokens","","",5,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"edge"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"edge"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"edge"}],"output":{"name":"ordering"}}],[11,"hash","","",6,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"edge"}}],[11,"to_tokens","","",6,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_custom_tokens","","",6,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"flexdirection"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"flexdirection"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"flexdirection"}],"output":{"name":"ordering"}}],[11,"hash","","",7,null],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"flexdirection"}}],[11,"to_tokens","","",7,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_custom_tokens","","",7,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"justify"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"justify"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",8,{"inputs":[{"name":"self"},{"name":"justify"}],"output":{"name":"ordering"}}],[11,"hash","","",8,null],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"justify"}}],[11,"to_tokens","","",8,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_custom_tokens","","",8,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",9,{"inputs":[{"name":"self"},{"name":"loglevel"}],"output":{"name":"ordering"}}],[11,"hash","","",9,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"loglevel"}}],[11,"to_tokens","","",9,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_custom_tokens","","",9,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"measuremode"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"self"},{"name":"measuremode"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",11,{"inputs":[{"name":"self"},{"name":"measuremode"}],"output":{"name":"ordering"}}],[11,"hash","","",11,null],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"measuremode"}}],[11,"to_tokens","","",11,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_custom_tokens","","",11,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"from","","",10,{"inputs":[{"name":"measuremode"}],"output":{"name":"ygmeasuremode"}}],[11,"from","","",11,{"inputs":[{"name":"ygmeasuremode"}],"output":{"name":"measuremode"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"nodetype"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"self"},{"name":"nodetype"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",12,{"inputs":[{"name":"self"},{"name":"nodetype"}],"output":{"name":"ordering"}}],[11,"hash","","",12,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"nodetype"}}],[11,"to_tokens","","",12,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_custom_tokens","","",12,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"overflow"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"overflow"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",13,{"inputs":[{"name":"self"},{"name":"overflow"}],"output":{"name":"ordering"}}],[11,"hash","","",13,null],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"overflow"}}],[11,"to_tokens","","",13,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_custom_tokens","","",13,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"positiontype"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"self"},{"name":"positiontype"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",14,{"inputs":[{"name":"self"},{"name":"positiontype"}],"output":{"name":"ordering"}}],[11,"hash","","",14,null],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"positiontype"}}],[11,"to_tokens","","",14,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_custom_tokens","","",14,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"printoptions"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"self"},{"name":"printoptions"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",15,{"inputs":[{"name":"self"},{"name":"printoptions"}],"output":{"name":"ordering"}}],[11,"hash","","",15,null],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"printoptions"}}],[11,"to_tokens","","",15,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_custom_tokens","","",15,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"size"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"size"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"size"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"size"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"size"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"size"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"size"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"size"}}],[11,"from","","",0,{"inputs":[{"name":"size"}],"output":{"name":"ygsize"}}],[11,"from","","",1,{"inputs":[{"name":"ygsize"}],"output":{"name":"size"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"styleunit"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"styleunit"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"self"},{"name":"styleunit"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",16,{"inputs":[{"name":"self"},{"name":"styleunit"}],"output":{"name":"bool"}}],[11,"le","","",16,{"inputs":[{"name":"self"},{"name":"styleunit"}],"output":{"name":"bool"}}],[11,"gt","","",16,{"inputs":[{"name":"self"},{"name":"styleunit"}],"output":{"name":"bool"}}],[11,"ge","","",16,{"inputs":[{"name":"self"},{"name":"styleunit"}],"output":{"name":"bool"}}],[11,"cmp","","",16,{"inputs":[{"name":"self"},{"name":"styleunit"}],"output":{"name":"ordering"}}],[11,"hash","","",16,null],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"styleunit"}}],[11,"to_tokens","","",16,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_custom_tokens","","",16,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"default","","",16,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"wrap"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"self"},{"name":"wrap"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",17,{"inputs":[{"name":"self"},{"name":"wrap"}],"output":{"name":"ordering"}}],[11,"hash","","",17,null],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"wrap"}}],[11,"to_tokens","","",17,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_custom_tokens","","",17,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}]],"paths":[[3,"YGInternalSize"],[3,"Size"],[4,"Align"],[4,"Dimension"],[4,"Direction"],[4,"Display"],[4,"Edge"],[4,"FlexDirection"],[4,"Justify"],[4,"LogLevel"],[4,"YGInternalMeasureMode"],[4,"MeasureMode"],[4,"NodeType"],[4,"Overflow"],[4,"PositionType"],[4,"PrintOptions"],[4,"StyleUnit"],[4,"Wrap"],[4,"FlexStyle"],[3,"Layout"],[3,"Context"],[8,"Percent"],[8,"Point"],[3,"Node"]]};
initSearch(searchIndex);
